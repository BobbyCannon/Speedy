<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Speedy.Application.Xamarin</name>
    </assembly>
    <members>
        <member name="T:Speedy.Application.Xamarin.Converter.BooleanConverter">
            <summary>
            Represents a converter for a boolean value.
            </summary>
        </member>
        <member name="P:Speedy.Application.Xamarin.Converter.BooleanConverter.Inverted">
            <summary>
            Flag to determine if this converter is inverting the logic.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.Converter.BooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.Converter.BooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.Converter.StringConverter">
            <summary>
            Represents a converter for to string value.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.Converter.StringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.Converter.StringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.Converter.VisibilityConverter">
            <summary>
            Represents a converter for a visibility value.
            </summary>
        </member>
        <member name="P:Speedy.Application.Xamarin.Converter.VisibilityConverter.Inverted">
            <summary>
            Flag to determine if this converter is inverting the logic.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.Converter.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.Converter.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.Extensions.DeviceIdExtensions">
            <summary>
            Extension methods for <see cref="T:Speedy.Application.DeviceId" />.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.Extensions.DeviceIdExtensions.AddVendorId(Speedy.Application.DeviceId)">
            <summary>
            Add an ID from the Vendor (platform).
            </summary>
            <param name="builder"> The device ID builder. </param>
            <returns> The device ID updated with the vendor ID if available. </returns>
        </member>
        <member name="T:Speedy.Application.Xamarin.Extensions.DeviceIdiomExtension">
            <summary>
            Device Idiom Extension
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.Extensions.DeviceIdiomExtension.ToDeviceIdiom(Speedy.Data.DeviceType)">
            <summary>
            Convert DeviceType to a DeviceIdiom.
            </summary>
            <param name="deviceType"> The device type to convert. </param>
            <returns> The DeviceIdiom for the DeviceType. </returns>
        </member>
        <member name="M:Speedy.Application.Xamarin.Extensions.DeviceIdiomExtension.ToDeviceType(Xamarin.Essentials.DeviceIdiom)">
            <summary>
            Convert DeviceIdiom to a DeviceType.
            </summary>
            <param name="deviceIdiom"> The device idiom to convert. </param>
            <returns> The DeviceType for the DeviceIdiom. </returns>
        </member>
        <member name="T:Speedy.Application.Xamarin.Extensions.DevicePlatformExtension">
            <summary>
            Device Platform Extension
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.Extensions.DevicePlatformExtension.ToDevicePlatform(Xamarin.Essentials.DevicePlatform)">
            <summary>
            Converts a Xamarin Device Platform to a Speedy Device Platform.
            </summary>
            <param name="platform"> The Xamarin Device Platform. </param>
            <returns> The Speedy Device Platform. </returns>
        </member>
        <member name="M:Speedy.Application.Xamarin.Extensions.DevicePlatformExtension.ToDevicePlatform(Speedy.Data.DevicePlatform)">
            <summary>
            Converts a Speedy Device Platform to a Xamarin Device Platform.
            </summary>
            <param name="platform"> The Speedy Device Platform. </param>
            <returns> The Xamarin Device Platform. </returns>
        </member>
        <member name="T:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1">
            <summary>
            Location provider for the Xamarin Barometer.
            </summary>
            <typeparam name="T"> The vertical location type. </typeparam>
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates the xamarin barometer altitude provider.
            </summary>
            <param name="dispatcher"> The optional dispatcher to use. </param>
        </member>
        <member name="P:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1.Pressure">
            <summary>
            The Pressure in Hectopascals.
            </summary>
        </member>
        <member name="P:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1.ProviderName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1.GetCurrentLocationAsync(System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1.StartMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinBarometerLocationProvider`1.StopMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.XamarinDispatcher">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Application.Xamarin.XamarinDispatcher.IsDispatcherThread">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinDispatcher.ExecuteOnDispatcher(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinDispatcher.ExecuteOnDispatcher``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinDispatcher.ExecuteOnDispatcherAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinDispatcher.ExecuteOnDispatcherAsync``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.XamarinLocationProvider`4">
            <summary>
            Implementation for LocationProvider.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinLocationProvider`4.#ctor(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.XamarinPlatform">
            <summary>
            Xamarin platform specific implementations.
            </summary>
        </member>
        <member name="T:Speedy.Application.Xamarin.XamarinRuntimeInformation">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.#ctor(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetApplicationDataLocation">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetApplicationIsElevated">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetApplicationLocation">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetApplicationName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetApplicationVersion">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDeviceId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDeviceManufacturer">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDeviceModel">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDeviceName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDevicePlatform">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDevicePlatformVersion">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.XamarinRuntimeInformation.GetDeviceType">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Application.Xamarin.LocationProviderImplementation`4">
            <summary>
            Implementation for LocationProvider
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.LocationProviderImplementation`4.#ctor(Speedy.IDispatcher)">
            <summary>
            Constructor for Implementation
            </summary>
        </member>
        <member name="P:Speedy.Application.Xamarin.LocationProviderImplementation`4.HasPermission">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Application.Xamarin.LocationProviderImplementation`4.IsLocationAvailable">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Application.Xamarin.LocationProviderImplementation`4.IsLocationEnabled">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Application.Xamarin.LocationProviderImplementation`4.ProviderName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.LocationProviderImplementation`4.GetCurrentLocationAsync(System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets position async with specified parameters
            </summary>
            <param name="timeout"> Timeout to wait, Default Infinite </param>
            <param name="cancelToken"> Cancellation token </param>
            <returns> ProviderLocation </returns>
        </member>
        <member name="M:Speedy.Application.Xamarin.LocationProviderImplementation`4.StartMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Application.Xamarin.LocationProviderImplementation`4.StopMonitoringAsync">
            <summary>
            Stop listening
            </summary>
        </member>
        <member name="T:Speedy.Application.Xamarin.PlatformExtensions">
            <summary>
            Extension for the Windows platform.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.PlatformExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Boolean)">
            <summary>
            Converts an IAsyncOperation to a ConfigurableTaskAwaitable.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.PlatformExtensions.ToAltitudeReferenceSystem(Speedy.Data.Location.AltitudeReferenceType)">
            <summary>
            Convert altitude reference type to system.
            </summary>
        </member>
        <member name="M:Speedy.Application.Xamarin.PlatformExtensions.ToAltitudeReferenceType(Windows.Devices.Geolocation.AltitudeReferenceSystem)">
            <summary>
            Convert altitude reference system to type.
            </summary>
        </member>
    </members>
</doc>
