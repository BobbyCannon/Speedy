<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Speedy</name>
    </assembly>
    <members>
        <member name="T:Speedy.Bindable`1">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.Bindable`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.Bindable`1.ShouldUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable`1.TryUpdateWith(`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable`1.UpdateWith(`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Bindable">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.Bindable.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Bindable.HasChanges">
            <summary>
            Determines if the object has changes.
            </summary>
        </member>
        <member name="P:Speedy.Bindable.Dispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="P:Speedy.Bindable.RealType">
            <summary>
            Cached version of the "real" type, meaning not EF proxy but rather root type
            </summary>
        </member>
        <member name="M:Speedy.Bindable.GetDispatcher">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.IsChangeNotificationsPaused">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.OnPropertyChanged(System.String)">
            <summary>
            Indicates the property has changed on the bindable object.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="M:Speedy.Bindable.PausePropertyChangeNotifications(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.ResetChangeTracking(System.Boolean)">
            <summary>
            Reset the change tracking flag.
            </summary>
            <param name="hasChanges"> An optional value to indicate if this object has changes. Defaults to false. </param>
        </member>
        <member name="M:Speedy.Bindable.ShouldUpdate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.TryUpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.UpdateDispatcher(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.UpdateWith(System.Object,System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Indicates the property has changed on the bindable object.
            </summary>
            <param name="propertyChangedEvent"> The changed event value of the property that changed. </param>
        </member>
        <member name="M:Speedy.Bindable.OnPropertyChangedInDispatcher(System.String)">
            <summary>
            fires the OnPropertyChanged notice for the bindable object on the dispatcher thread.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="E:Speedy.Bindable.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.CloneableBindable`2">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.CloneableBindable`2.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.CloneableBindable`2.Speedy#ICloneable{T2}#DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.CloneableBindable`2.Speedy#ICloneable{T2}#ShallowClone">
            <inheritdoc />
        </member>
        <member name="T:Speedy.CloneableBindable`1">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.CloneableBindable`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.CloneableBindable`1.DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.CloneableBindable`1.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.CloneableBindable`1.Speedy#ICloneable#DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.CloneableBindable`1.Speedy#ICloneable#ShallowClone">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Collections.BaseObservableCollection`1">
            <summary>
            Represents an observable collection that supports notification on clear.
            </summary>
            <typeparam name="T"> The type of the item stored in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(`0[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(Speedy.IDispatcher,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(Speedy.IDispatcher,`0[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="P:Speedy.Collections.BaseObservableCollection`1.DistinctCheck">
            <summary>
            The distinct check for item values.
            </summary>
        </member>
        <member name="P:Speedy.Collections.BaseObservableCollection`1.Dispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.Reset(`0[])">
            <summary>
            Reset the collection to the provided values.
            </summary>
            <param name="values"> The values to be set to. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.ItemExists(`0)">
            <summary>
            Checks to see if an item exist in the collection.
            </summary>
            <param name="item"> The item to check for. </param>
            <returns> True if the item exists otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="E:Speedy.Collections.BaseObservableCollection`1.PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="T:Speedy.Collections.LittleEndianBuffer">
            <summary>
            A little endian specific buffer.
            </summary>
            <remarks>
            <see cref="T:Speedy.Collections.EndianBuffer" />
            </remarks>
        </member>
        <member name="M:Speedy.Collections.LittleEndianBuffer.#ctor(System.Int32)">
            <summary>
            Instantiates a little endian buffer.
            </summary>
            <param name="size"> The size of the buffer. </param>
        </member>
        <member name="M:Speedy.Collections.LittleEndianBuffer.Load(System.Byte[])">
            <summary>
            Load a buffer that contains data in a little endian order.
            </summary>
            <param name="buffer"> The buffer to load. </param>
            <returns> The little endian buffer. </returns>
        </member>
        <member name="T:Speedy.Collections.BigEndianBuffer">
            <summary>
            A big endian specific buffer.
            </summary>
            <remarks>
            <see cref="T:Speedy.Collections.EndianBuffer" />
            </remarks>
        </member>
        <member name="M:Speedy.Collections.BigEndianBuffer.#ctor(System.Int32)">
            <summary>
            Instantiates a big endian buffer.
            </summary>
            <param name="size"> The size of the buffer. </param>
        </member>
        <member name="M:Speedy.Collections.BigEndianBuffer.Load(System.Byte[])">
            <summary>
            Load a buffer that contains data in a big endian order.
            </summary>
            <param name="buffer"> The buffer to load. </param>
            <returns> The big endian buffer. </returns>
        </member>
        <member name="T:Speedy.Collections.EndianBuffer">
            <summary>
            A endian specific buffer.
            </summary>
            <remarks>
            Little-endian byte ordering places the least significant byte first. This method is used in Intel microprocessors, for example.
            Big-endian byte ordering places the most significant byte first. This method is used in IBM mainframes and Motorola microprocessors, for example.
            Network byte order is defined to always be big-endian.
            </remarks>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Instantiates a buffer order specifically for a specific endianness (byte-order). All writes and
            reads will conform to the selected endianness.
            </summary>
            <param name="size"> The size of the buffer. </param>
            <param name="isLittleEndian"> True to be little endian otherwise big endian. </param>
        </member>
        <member name="P:Speedy.Collections.EndianBuffer.IsLittleEndian">
            <summary>
            If true this buffer is in LittleEndian order else BigEndian order.
            </summary>
        </member>
        <member name="P:Speedy.Collections.EndianBuffer.Length">
            <summary>
            The length of the endian buffer.
            </summary>
        </member>
        <member name="P:Speedy.Collections.EndianBuffer.ReadIndex">
            <summary>
            The index of the read.
            </summary>
        </member>
        <member name="P:Speedy.Collections.EndianBuffer.WriteIndex">
            <summary>
            The index of the write.
            </summary>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadArray(System.Int32,System.Int32)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to start reading from. </param>
            <param name="length"> The amount of data to read. </param>
            <returns> The array of byte data. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadByte(System.Int32)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to start reading from. </param>
            <returns> The array of byte data. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadInt16">
            <summary>
            Read the value from the buffer.
            </summary>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadInt16(System.Int32)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to read from. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadInt32">
            <summary>
            Read the value from the buffer.
            </summary>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadInt32(System.Int32)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to read from. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadUInt16">
            <summary>
            Read the value from the buffer.
            </summary>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ReadUInt16(System.Int32)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to read from. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.ToArray">
            <summary>
            Converts the buffer to an array.
            </summary>
            <returns> The buffer as a byte array. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadInt16(System.Int16@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadInt16(System.Int32,System.Int16@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to read from. </param>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadInt32(System.Int32@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadInt32(System.Int32,System.Int32@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to read from. </param>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadInt64(System.Int64@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadUInt16(System.UInt16@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadUInt16(System.Int32,System.UInt16@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadUInt32(System.UInt32@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryReadUInt64(System.UInt64@)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteArray(System.Byte[])">
            <summary>
            Write an array af values into the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteArray(System.Int32,System.Byte[])">
            <summary>
            Write an array af values into the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteInt16(System.Int16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteInt16(System.Int32,System.Int16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteInt32(System.Int32)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteInt32(System.Int32,System.Int32)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteInt64(System.Int64)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteInt64(System.Int32,System.Int64)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteUInt16(System.UInt16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteUInt16(System.Int32,System.UInt16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteUInt32(System.UInt32)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWriteUInt64(System.UInt64)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteArray(System.Byte[])">
            <summary>
            Write an array af values into the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteArray(System.Int32,System.Byte[])">
            <summary>
            Write an array af values into the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteByte(System.Int32,System.Byte)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write the value to. </param>
            <param name="value"> The value to be written. </param>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteInt16(System.Int16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteInt16(System.Int32,System.Int16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteInt32(System.Int32)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteInt64(System.Int64)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteUInt16(System.UInt16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteUInt16(System.Int32,System.UInt16)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteUInt32(System.UInt32)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.WriteUInt64(System.UInt64)">
            <summary>
            Write the value to the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.LoadBuffer(System.Byte[])">
            <summary>
            Load full array into the buffer.
            </summary>
            <param name="buffer"> The buffer to load. </param>
            <exception cref="T:System.ArgumentException"> The buffer length is invalid. </exception>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWrite(System.Byte[],System.Boolean)">
            <summary>
            Write an array af values into the buffer.
            </summary>
            <param name="value"> The value to write. </param>
            <param name="valueIsLittleEndian"> The value being written is little endian. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryWrite(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Write an array af values into the buffer.
            </summary>
            <param name="index"> The index to write to. </param>
            <param name="value"> The value to write. </param>
            <param name="valueIsLittleEndian"> The value being written is little endian. </param>
            <returns> True if the write was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryRead(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="value"> The value that was read if successful. </param>
            <param name="length"> The amount of data to read. </param>
            <param name="wantsLittleEndian"> True to read the value as little endian otherwise big endian </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.EndianBuffer.TryRead(System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Read the value from the buffer.
            </summary>
            <param name="index"> The index to start reading from. </param>
            <param name="value"> The value that was read if successful. </param>
            <param name="length"> The amount of data to read. </param>
            <param name="wantsLittleEndian"> True to read the value as little endian otherwise big endian </param>
            <returns> True if the read was successful otherwise false. </returns>
        </member>
        <member name="T:Speedy.Collections.FilteredCollection`1">
            <summary>
            This collection representing a list of entities for a relationship.
            </summary>
            <typeparam name="T"> The type for the relationship. </typeparam>
        </member>
        <member name="M:Speedy.Collections.FilteredCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Func{`0,System.Boolean},Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of a filtered collection.
            </summary>
            <param name="originalCollection"> The collection to filter. </param>
            <param name="filter"> The filter expression. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="T:Speedy.Collections.GenericComparer`1">
            <summary>
            Exposes a method that compares two objects.
            </summary>
            <typeparam name="T"> The type of the object to compare. </typeparam>
        </member>
        <member name="M:Speedy.Collections.GenericComparer`1.#ctor(System.Func{`0,`0,System.Int32},System.Func{`0,System.Int32})">
            <summary>
            Create an instance of the comparer.
            </summary>
            <param name="compare"> The function to compare two objects. </param>
            <param name="getHashCode"> An optional override for GetHashCode. If not provided then use the T.GetHashCode. </param>
        </member>
        <member name="M:Speedy.Collections.GenericComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.GenericComparer`1.Compare(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.GenericComparer`1.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.GenericComparer`1.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Collections.LimitedCollection`1">
            <summary>
            Limited collection to a maximum number of items.
            </summary>
            <typeparam name="T"> The type this collection is for. </typeparam>
        </member>
        <member name="M:Speedy.Collections.LimitedCollection`1.#ctor">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.LimitedCollection`1.#ctor(System.Int32)">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="limit"> The maximum number of items for this collection. </param>
        </member>
        <member name="P:Speedy.Collections.LimitedCollection`1.Limit">
            <summary>
            The maximum limit for this collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.LimitedCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Collections.LimitedObservableCollection`1">
            <summary>
            Limited collection to a maximum number of items.
            </summary>
            <typeparam name="T"> The type this collection is for. </typeparam>
        </member>
        <member name="M:Speedy.Collections.LimitedObservableCollection`1.#ctor">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.LimitedObservableCollection`1.#ctor(Speedy.IDispatcher,`0[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.LimitedObservableCollection`1.#ctor(System.Int32,Speedy.IDispatcher,`0[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="limit"> The maximum number of items for this collection. </param>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="P:Speedy.Collections.LimitedObservableCollection`1.Limit">
            <summary>
            The maximum limit for this collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.LimitedObservableCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Collections.OrderBy`1">
            <summary>
            Represents an order by value.
            </summary>
            <typeparam name="T"> The type of the item to order. </typeparam>
        </member>
        <member name="M:Speedy.Collections.OrderBy`1.#ctor(System.Boolean)">
            <summary>
            Instantiate an instance of the order by value.
            </summary>
            <param name="descending"> True to order descending and otherwise sort ascending. Default value is false for ascending order. </param>
        </member>
        <member name="M:Speedy.Collections.OrderBy`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Instantiate an instance of the order by value.
            </summary>
            <param name="keySelector"> The </param>
            <param name="descending"> True to order descending and otherwise sort ascending. Default value is false for ascending order. </param>
        </member>
        <member name="P:Speedy.Collections.OrderBy`1.Descending">
            <summary>
            True for descending and false for ascending order.
            </summary>
        </member>
        <member name="P:Speedy.Collections.OrderBy`1.KeySelector">
            <summary>
            A function to extract a key from an element.
            </summary>
        </member>
        <member name="M:Speedy.Collections.OrderBy`1.Process(System.Linq.IQueryable{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Processes a query through the "order by" that will return the query ordered base on the value.
            </summary>
            <param name="query"> The query to order. </param>
            <param name="thenBys"> An optional set of subsequent orderings. </param>
            <returns> The ordered queryable for the provided query. </returns>
        </member>
        <member name="T:Speedy.Collections.SortedObservableCollection`1">
            <summary>
            Represents a sorted observable collection. The collection supports notification on clear and ability to be sorted.
            </summary>
            <typeparam name="T"> The type of the item stored in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.#ctor(Speedy.Collections.OrderBy{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.#ctor(Speedy.IDispatcher,Speedy.Collections.OrderBy{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.#ctor(`0[],Speedy.IDispatcher,Speedy.Collections.OrderBy{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="P:Speedy.Collections.SortedObservableCollection`1.DisableSorting">
            <summary>
            Allows disable sorting for faster loading.
            </summary>
        </member>
        <member name="P:Speedy.Collections.SortedObservableCollection`1.OrderBy">
            <summary>
            The expression to order this collection by.
            </summary>
        </member>
        <member name="P:Speedy.Collections.SortedObservableCollection`1.ThenBy">
            <summary>
            An optional set of expressions to further order this collection by.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.Sort">
            <summary>
            Sort the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Commands.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The default return value for the CanExecute method is 'true'.
            </summary>
        </member>
        <member name="M:Speedy.Commands.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute"> The execution logic. </param>
            <param name="canExecute"> The execution status logic. </param>
        </member>
        <member name="M:Speedy.Commands.RelayCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Commands.RelayCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Commands.RelayCommand.Refresh">
            <summary>
            Refresh the command state.
            </summary>
        </member>
        <member name="M:Speedy.Commands.RelayCommand.OnCanExecuteChanged">
            <summary>
            Overridable can execute event.
            </summary>
        </member>
        <member name="E:Speedy.Commands.RelayCommand.CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Commands.WeakEventHandler`1">
            <summary>
            Represents as a weak event handler.
            </summary>
            <typeparam name="T"> The type of the event args. </typeparam>
        </member>
        <member name="M:Speedy.Commands.WeakEventHandler`1.#ctor(System.EventHandler{`0})">
            <summary>
            Create an instance of the week event handler.
            </summary>
            <param name="callback"> The event handler callback. </param>
        </member>
        <member name="M:Speedy.Commands.WeakEventHandler`1.Handler(System.Object,`0)">
            <summary>
            The handler for the event.
            </summary>
            <param name="sender"> The sender. </param>
            <param name="args"> The event args. </param>
        </member>
        <member name="T:Speedy.Configuration.CommandLine.CommandLineArgument`1">
            <summary>
            Class managing the argument information
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument`1.DefaultValue">
            <summary>
            The default value for arguments if not provided.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Configuration.CommandLine.CommandLineArgument">
            <summary>
            Class managing the argument information
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.#ctor">
            <summary>
            Creates an instance of a command line argument.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.DefaultValue">
            <summary>
            The default value for arguments if not provided.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.HasDefaultValue">
            <summary>
            The argument has a default value.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.HasValue">
            <summary>
            True if the argument has a value.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.Help">
            <summary>
            The help description.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.IsFlag">
            <summary>
            The argument represents just an existing flag with no following value.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.IsRequired">
            <summary>
            True if the argument is required.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.IsValid">
            <summary>
            The argument was found and is flag or has value.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.Prefix">
            <summary>
            The prefix of the command line argument. Defaults to "-".
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.PropertyName">
            <summary>
            An optional property name for locating arguments.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.Value">
            <summary>
            The value parse from the command line.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineArgument.WasFound">
            <summary>
            True if the argument was found.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.GetHelpDescription">
            <summary>
            Gets the help description for argument.
            </summary>
            <returns> The description for the argument. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.GetIssueDescription">
            <summary>
            Gets the issue description for argument.
            </summary>
            <returns> The description of the issue for the argument. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.Process(System.String)">
            <summary>
            Try and parse the argument with out a value.
            </summary>
            <param name="argument"> The argument name with prefix. </param>
            <returns> True if processed otherwise false. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.Process(System.String,System.String)">
            <summary>
            Try and parse the argument with a value.
            </summary>
            <param name="argument"> The argument name with prefix. </param>
            <param name="value"> The argument value. </param>
            <returns> True if processed otherwise false. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.Reset">
            <summary>
            Resets the argument state.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineArgument.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Configuration.CommandLine.CommandLineParser">
            <summary>
            Represents a command line parser.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.#ctor">
            <summary>
            Instantiates an instance of the command line parser.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineParser.IsValid">
            <summary>
            All arguments are valid.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineParser.Item(System.String)">
            <summary>
            Gets a command line argument by name.
            </summary>
            <param name="index"> The name of the argument. </param>
            <returns> The argument of the name requested. </returns>
        </member>
        <member name="P:Speedy.Configuration.CommandLine.CommandLineParser.UnknownArguments">
            <summary>
            Arguments that are unknown by the loaded argument settings.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.Add(Speedy.Configuration.CommandLine.CommandLineArgument)">
            <summary>
            Adds an argument to the command line parser.
            </summary>
            <param name="argument"> The argument to be added. </param>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.BuildHelpInformation(System.Text.StringBuilder,System.Func{Speedy.Configuration.CommandLine.CommandLineArgument,System.Boolean})">
            <summary>
            Builds the help information that will be displayed with the -h command option is requested.
            </summary>
            <returns> The string to be displayed. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.BuildIssueInformation(System.Text.StringBuilder)">
            <summary>
            Builds the issue information that will be displayed with the -h command option is requested.
            </summary>
            <returns> The string to be displayed. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.Parse(System.String[])">
            <summary>
            Process a provided sets of arguments
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.Property(System.String)">
            <summary>
            Gets an argument by th. property name.
            </summary>
            <param name="name"> The name of the property. </param>
            <returns> The found command line argument otherwise null. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.PropertyValue``1(System.String,``0)">
            <summary>
            Gets an argument value the property name.
            </summary>
            <param name="name"> The name of the property. </param>
            <param name="defaultValue"> The default value if the argument was not found or the value was not provided. </param>
            <returns> The found command line value otherwise the default value provided. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.Reset">
            <summary>
            Resets the command line parser.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.ToString">
            <summary>
            Gets the command line.
            </summary>
            <returns> The command line. </returns>
        </member>
        <member name="M:Speedy.Configuration.CommandLine.CommandLineParser.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Configuration.IndexConfiguration">
            <summary>
            The configuration for an index property.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.#ctor(System.String)">
            <summary>
            Instantiates an instance of the index configuration.
            </summary>
            <param name="name"> The name of the index. </param>
        </member>
        <member name="P:Speedy.Configuration.IndexConfiguration.AllowNull">
            <summary>
            The index allows null. This would allow unique indexes to ignore null values.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.AddProperty(Speedy.Configuration.IPropertyConfiguration)">
            <summary>
            Add property to the index configuration.
            </summary>
            <param name="property"> The property configuration to be added. </param>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.IsMappingFor(System.Object)">
            <summary>
            Checks to see if this configuration is for the provided entity.
            </summary>
            <param name="entity"> The entity to test against. </param>
            <returns> True if this configuration is for the entity and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.IsUnique">
            <summary>
            Marks the index as a unique.
            </summary>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.Validate``2(System.Object,Speedy.IRepository{``0,``1})">
            <summary>
            Validates the entity using this configuration.
            </summary>
            <param name="entity"> The entity to validate. </param>
            <param name="entityRepository"> The repository of entities. </param>
        </member>
        <member name="T:Speedy.Configuration.IPropertyConfiguration">
            <summary>
            The interface for the property configuration.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.DeleteBehavior">
            <summary>
            The delete behavior for this property. Only applies to foreign keys.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.IsNullable">
            <summary>
            Indicates this property can be set to null.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.MemberName">
            <summary>
            Gets the member name of the property this configuration is for.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.TypeName">
            <summary>
            Gets the type name of the property this configuration is for.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.GetValue(System.Object)">
            <summary>
            Get the value for the property configuration.
            </summary>
            <param name="entity"> The entity to get the value of. </param>
            <returns> The value in string format. </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.HasMaximumLength(System.Int32)">
            <summary>
            Sets the max length for this property.
            </summary>
            <param name="maxLength"> The max length for the property. </param>
            <returns> The modified property configuration. </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.IsMappingFor(System.Object)">
            <summary>
            Checks to see if this configuration is for the provided entity.
            </summary>
            <param name="entity"> The entity to test against. </param>
            <returns> True if this configuration is for the entity and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.Matches(System.Object,System.Object)">
            <summary>
            Checks two objects to see if the properties match
            </summary>
            <param name="object1"> The first object. </param>
            <param name="object2"> The second object. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.OnDelete(Speedy.Configuration.RelationshipDeleteBehavior)">
            <summary>
            </summary>
            <param name="behavior"> The delete behavior for the foreign key relationship. </param>
        </member>
        <member name="T:Speedy.Configuration.PropertyConfiguration`2">
            <summary>
            The configuration for an entity property.
            </summary>
            <typeparam name="T"> The entity this configuration is for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Instantiates an instance of the property configuration.
            </summary>
            <param name="property"> The property expression this configuration is for. </param>
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.DeleteBehavior">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.IsNullable">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.MemberName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.TypeName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.HasMaximumLength(System.Int32)">
            <summary>
            Sets the maximum length of the member.
            </summary>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.HasMinimumLength(System.Int32)">
            <summary>
            Sets the minimum length of the member.
            </summary>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.IsMappingFor(System.Object)">
            <summary>
            Checks to see if this configuration is for the provided entity.
            </summary>
            <param name="entity"> The entity to test against. </param>
            <returns> True if this configuration is for the entity and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.IsRequired(System.Boolean)">
            <summary>
            Marks the property as a required member.
            </summary>
            <param name="required"> The value to determine if the property is required. </param>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.Matches(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.OnDelete(Speedy.Configuration.RelationshipDeleteBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.Validate(System.Object,Speedy.IRepository{`0,`1})">
            <summary>
            Validates the entity using this configuration.
            </summary>
            <param name="entity"> The entity to validate. </param>
            <param name="entityRepository"> The repository of entities. </param>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.Speedy#Configuration#IPropertyConfiguration#HasMaximumLength(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.Relationship.EntityIdPropertyInfo">
            <summary>
            The property information for the entity ID.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.Relationship.EntityPropertyInfo">
            <summary>
            The property information for the entity.
            </summary>
        </member>
        <member name="T:Speedy.Configuration.RelationshipDeleteBehavior">
            <summary>
            The delete behavior of relationships
            </summary>
        </member>
        <member name="F:Speedy.Configuration.RelationshipDeleteBehavior.Restrict">
            <summary>
            The values of foreign key properties in dependent entities are not changed.
            </summary>
        </member>
        <member name="F:Speedy.Configuration.RelationshipDeleteBehavior.Cascade">
            <summary>
            The dependent entities will also be deleted.
            </summary>
        </member>
        <member name="F:Speedy.Configuration.RelationshipDeleteBehavior.SetNull">
            <summary>
            The values of foreign key properties in dependent entities are set to null.
            </summary>
        </member>
        <member name="T:Speedy.Converters.ObjectConverter">
            <summary>
            Converts an object to different types
            </summary>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToByte(System.Object)">
            <summary>
            Converts the object to a byte value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a byte format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToChar(System.Object)">
            <summary>
            Converts the object to a char value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a char format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToDateTime(System.Object)">
            <summary>
            Converts the object to a DateTime value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a DateTime format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToDateTimeOffset(System.Object)">
            <summary>
            Converts the object to a DateTimeOffset value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a DateTimeOffset format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToDecimal(System.Object)">
            <summary>
            Converts the object to a decimal value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a decimal format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToDouble(System.Object)">
            <summary>
            Converts the object to a double value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a double format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToFloat(System.Object)">
            <summary>
            Converts the object to a float value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a float format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToInt16(System.Object)">
            <summary>
            Converts the object to a Int16 value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a Int16 format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToInt32(System.Object)">
            <summary>
            Converts the object to a Int32 value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a Int32 format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToInt64(System.Object)">
            <summary>
            Converts the object to a Int64 value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a Int64 format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToOscTimeTag(System.Object)">
            <summary>
            Converts the object to a DateTime value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a DateTime format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToSByte(System.Object)">
            <summary>
            Converts the object to a sbyte value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a sbyte format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToTimeSpan(System.Object)">
            <summary>
            Converts the object to a TimeSpan value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a TimeSpan format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToUInt16(System.Object)">
            <summary>
            Converts the object to a UInt16 value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a UInt16 format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToUInt32(System.Object)">
            <summary>
            Converts the object to a UInt32 value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a UInt32 format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.ObjectConverter.ToUInt64(System.Object)">
            <summary>
            Converts the object to a UInt64 value.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns> The value in a UInt64 format or returns the default value. </returns>
        </member>
        <member name="M:Speedy.Converters.Parsers.DateTimeConverterParser.SupportsType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.DateTimeConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.EnumConverterParser.SupportsType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.EnumConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.IsoDateTimeConverterParser.SupportsType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.IsoDateTimeConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Converters.Parsers.IStringConverterParser">
            <summary>
            Represents a string converter parser.
            </summary>
        </member>
        <member name="M:Speedy.Converters.Parsers.IStringConverterParser.SupportsType(System.Type)">
            <summary>
            Determines if the target type is supported by the parser.
            </summary>
            <param name="targetType"> The target type to parse to. </param>
            <returns> Returns true if the type is support otherwise false. </returns>
        </member>
        <member name="M:Speedy.Converters.Parsers.IStringConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <summary>
            Tries to parse the provided value into the target type.
            </summary>
            <param name="targetType"> The target type to parse to. </param>
            <param name="value"> The value to be parsed. </param>
            <param name="result"> The result of the parse. </param>
            <returns> Returns true if the type was parsed otherwise false. </returns>
        </member>
        <member name="M:Speedy.Converters.Parsers.ReflectionStringConverterParser.SupportsType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.ReflectionStringConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.StringConverterParser.SupportsType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.StringConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.UriStringConverterParser.SupportsType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Converters.Parsers.UriStringConverterParser.TryParse(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Converters.StringConverter">
            <summary>
            Represents a string version of a typed value.
            </summary>
        </member>
        <member name="M:Speedy.Converters.StringConverter.#ctor(System.String,System.Type)">
            <summary>
            Creates an instance of the string converter for the type.
            </summary>
            <param name="targetString"> The target in string format. </param>
            <param name="targetType"> The type of the target result. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            $"Unable to create type '{typeof(T).Name}' from value '{value}'."
            </exception>
        </member>
        <member name="P:Speedy.Converters.StringConverter.Parsers">
            <summary>
            The parsers for the String Converter to use for parsing.
            </summary>
        </member>
        <member name="P:Speedy.Converters.StringConverter.TargetString">
            <summary>
            The target in a string format.
            </summary>
        </member>
        <member name="P:Speedy.Converters.StringConverter.TargetType">
            <summary>
            The target in the typed format.
            </summary>
        </member>
        <member name="M:Speedy.Converters.StringConverter.Create(System.Type,System.String)">
            <summary>
            Creates an instance of the StringConverter.
            </summary>
            <param name="targetType"> The target type. </param>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.Parse">
            <summary>
            Parse the value from the initially constructed value.
            </summary>
            <returns> The object version of the string. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.Parse(System.String)">
            <summary>
            Parse the value from the provided value.
            </summary>
            <param name="value"> The type value in string format. </param>
            <returns> The object version of the string. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.Parse``1(System.String)">
            <summary>
            Parse the value from the provided value.
            </summary>
            <param name="value"> The type value in string format. </param>
            <returns> The object version of the string. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.Parse(System.Type,System.String)">
            <summary>
            Parse the value from the provided value.
            </summary>
            <param name="targetType"> The type of the object to parse. </param>
            <param name="value"> The type value in string format. </param>
            <returns> The object version of the string. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.TryParse(System.String,System.Object@)">
            <summary>
            Try to parse the value from the provided value.
            </summary>
            <param name="value"> The type value in string format. </param>
            <param name="result"> The object version of the string. </param>
            <returns> True if the parse succeeded otherwise false. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.TryParse``1(System.String,``0@)">
            <summary>
            Try to parse the value from the provided value.
            </summary>
            <param name="value"> The type value in string format. </param>
            <param name="result"> The object version of the string. </param>
            <returns> True if the parse succeeded otherwise false. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter.TryParse(System.Type,System.String,System.Object@)">
            <summary>
            Try to parse the value from the provided value.
            </summary>
            <param name="targetType"> The type of the object to parse. </param>
            <param name="value"> The type value in string format. </param>
            <param name="result"> The object version of the string. </param>
            <returns> True if the parse succeeded otherwise false. </returns>
        </member>
        <member name="T:Speedy.Converters.StringConverter`1">
            <summary>
            Represents a string version of a typed value.
            </summary>
        </member>
        <member name="M:Speedy.Converters.StringConverter`1.#ctor(System.String)">
            <summary>
            Creates an instance of the stringed type.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            $"Unable to create type '{typeof(T).Name}' from value '{value}'."
            </exception>
        </member>
        <member name="M:Speedy.Converters.StringConverter`1.op_Implicit(System.String)~Speedy.Converters.StringConverter{`0}">
            <summary>
            Cast the string value to the string converter for the type.
            </summary>
            <param name="value"> The type value in string format. </param>
            <returns> The string converter for the type provided. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter`1.op_Implicit(`0)~Speedy.Converters.StringConverter{`0}">
            <summary>
            Cast the typed value to the string converter.
            </summary>
            <param name="value"> The value in the typed format. </param>
            <returns> The string converter for the type provided. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter`1.op_Implicit(Speedy.Converters.StringConverter{`0})~`0">
            <summary>
            Cast the string converter to the target type.
            </summary>
            <param name="value"> The string converter for the provided type. </param>
            <returns> The value in the typed format. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter`1.op_Implicit(Speedy.Converters.StringConverter{`0})~System.String">
            <summary>
            Cast the string converter to the target string value.
            </summary>
            <param name="value"> The string converter for the provided string value. </param>
            <returns> The string converter in target string format. </returns>
        </member>
        <member name="M:Speedy.Converters.StringConverter`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.CreatedEntity`1">
            <summary>
            Represents a created entity.
            </summary>
            <typeparam name="T"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.CreatedEntity`1.CreatedOn">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Database">
            <summary>
            Represents a Speedy database.
            </summary>
        </member>
        <member name="M:Speedy.Database.#ctor(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Instantiates an instance of the database class.
            </summary>
            <param name="options"> The options for this database. </param>
            <param name="keyCache"> An optional key manager for caching entity IDs (primary and sync). </param>
        </member>
        <member name="P:Speedy.Database.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Database.KeyCache">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Database.Options">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.Add``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.DiscardChanges">
            <summary>
            Discard all changes made in this context to the underlying database.
            </summary>
        </member>
        <member name="M:Speedy.Database.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Database.GetMappingAssembly">
            <summary>
            Gets the assembly that contains the entity mappings. Base implementation defaults to the implemented types assembly.
            </summary>
        </member>
        <member name="M:Speedy.Database.GetReadOnlyRepository``2">
            <summary>
            Gets a read only repository for the provided type.
            </summary>
            <typeparam name="T"> The type of the item in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository for the type. </returns>
        </member>
        <member name="M:Speedy.Database.GetRepository``2">
            <summary>
            Gets a repository for the provided type.
            </summary>
            <typeparam name="T"> The type of the item in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository for the type. </returns>
        </member>
        <member name="M:Speedy.Database.GetSyncableRepositories(Speedy.Sync.SyncOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.GetSyncableRepository``2">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.GetSyncableRepository(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.HasIndex(System.Type,System.String)">
            <summary>
            Create a configuration that represents an Index.
            </summary>
            <param name="entityType"> The type of the entity. </param>
            <param name="name"> The name of the index. </param>
            <returns> The index configuration. </returns>
        </member>
        <member name="M:Speedy.Database.HasRequired``4(System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``2,System.Collections.Generic.ICollection{``0}}})">
            <summary>
            Creates a configuration that represent a required one to many relationship.
            </summary>
            <param name="required"> The value to determine if this property is required. </param>
            <param name="entity"> The entity to relate to. </param>
            <param name="collectionKey"> The collection on the entity that relates back to this entity. </param>
            <param name="foreignKey"> The ID for the entity to relate to. </param>
            <typeparam name="T1"> The entity that host the relationship. </typeparam>
            <typeparam name="T2"> The type of the entity key of the host. </typeparam>
            <typeparam name="T3"> The entity to build a relationship to. </typeparam>
            <typeparam name="T4"> The type of the entity key to build the relationship to. </typeparam>
        </member>
        <member name="M:Speedy.Database.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates a configuration for an entity property.
            </summary>
            <param name="expression"> The expression for the property. </param>
            <typeparam name="T"> The entity for the configuration. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The configuration for the entity property. </returns>
        </member>
        <member name="M:Speedy.Database.Remove``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.SaveChanges">
            <summary>
            Save the data to the data store.
            </summary>
            <returns> The number of items saved. </returns>
        </member>
        <member name="M:Speedy.Database.SaveChangesAsync">
            <summary>
            Save the data to the data store.
            </summary>
            <returns> The number of items saved. </returns>
        </member>
        <member name="M:Speedy.Database.EntityAdded(Speedy.IEntity)">
            <summary>
            Called when an entity is added. Note: this is before saving.
            See <see cref="E:Speedy.Database.ChangesSaved" /> for after save state.
            </summary>
            <param name="entity"> The entity added. </param>
        </member>
        <member name="M:Speedy.Database.EntityDeleted(Speedy.IEntity)">
            <summary>
            Called when an entity is deleted. Note: this is before saving.
            See <see cref="E:Speedy.Database.ChangesSaved" /> for after save state.
            </summary>
            <param name="entity"> The entity deleted. </param>
        </member>
        <member name="M:Speedy.Database.EntityModified(Speedy.IEntity)">
            <summary>
            Called when an entity is modified. Note: this is before saving.
            See <see cref="E:Speedy.Database.ChangesSaved" /> for after save state.
            </summary>
            <param name="entity"> The entity modified. </param>
        </member>
        <member name="M:Speedy.Database.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Database.OnChangesSaved(Speedy.Storage.CollectionChangeTracker)">
            <summary>
            Called when for when changes are saved. <see cref="E:Speedy.Database.ChangesSaved" />
            </summary>
        </member>
        <member name="M:Speedy.Database.OnDisposed">
            <summary>
            An invocator for the event when the database has been disposed.
            </summary>
        </member>
        <member name="M:Speedy.Database.BuildRelationship``4(``0,System.Collections.IEnumerable,System.String)">
            <summary>
            Builds relationship repository for the entity provided.
            </summary>
            <typeparam name="T1"> The type of the entity with the relationship. </typeparam>
            <typeparam name="T1K"> The type of the key for the entity. </typeparam>
            <typeparam name="T2"> The type of the related collection. </typeparam>
            <typeparam name="T2K"> The type of the key for the collection. </typeparam>
            <param name="entity"> The entity to process. </param>
            <param name="collection"> The entities to add or update to the repository. </param>
            <param name="key"> The key of the relationship </param>
            <returns> The repository for the relationship. </returns>
        </member>
        <member name="E:Speedy.Database.ChangesSaved">
            <summary>
            An event for when changes are saved. <see cref="M:Speedy.Database.SaveChanges" />
            </summary>
        </member>
        <member name="E:Speedy.Database.Disposed">
            <inheritdoc />
        </member>
        <member name="T:Speedy.DatabaseKeyCache">
            <summary>
            Cache for managing database keys. This allows for caching of entities ID and Sync IDs.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.#ctor">
            <summary>
            Instantiate an instance of the database key cache.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.#ctor(System.TimeSpan)">
            <summary>
            Instantiate an instance of the database key cache.
            </summary>
            <param name="cacheTimeout"> The timeout for removing an item from the cache. </param>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.Count">
            <summary>
            The total types tracked.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.Item(System.Type)">
            <summary>
            Return the cache for the type. If the type has not been cached then null will be returned.
            </summary>
            <param name="type"> The type for the key cache. </param>
            <returns> The memory cache for the type if found otherwise null if not. </returns>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.SyncEntitiesToCache">
            <summary>
            Gets or sets the list of entities to cache the keys (ID, Sync ID). If the collection is empty
            then cache all sync entities.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.TotalCachedItems">
            <summary>
            The total count for all items tracked.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.AddEntity(Speedy.Sync.ISyncEntity)">
            <summary>
            Cache an entity ID for the sync entity.
            </summary>
            <param name="entity"> The entity to be cached. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.AddEntityId(System.Type,System.Object,System.Object)">
            <summary>
            Cache an entity ID for the entity Sync ID.
            </summary>
            <param name="type"> The type of the entity. </param>
            <param name="syncId"> The sync ID of the entity. Will be converted to a string using "ToString". </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Cleanup">
            <summary>
            Cleanup the cache by removing old entries and empty collections.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Clear">
            <summary>
            Clear all caches from the manager
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.GetEntityId``1(``0)">
            <summary>
            Get the entity ID for the sync entity.
            </summary>
            <param name="entity"> The type of the entity. </param>
            <returns> The ID of the entity. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.GetEntityId(System.Type,System.Object)">
            <summary>
            Get the entity ID for the sync ID.
            </summary>
            <param name="type"> The type of the entity. </param>
            <param name="syncId"> The sync ID of the entity. </param>
            <returns> The ID of the entity. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.HasKeysBeenLoadedIntoCache(System.Type)">
            <summary>
            Returns true if they keys have been loaded.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Initialize(System.Type[])">
            <summary>
            Initializes the default key cache.
            </summary>
            <param name="syncEntitiesToCache"> An optional set of specific entity types to cache. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.InitializeAndLoad(Speedy.ISyncableDatabaseProvider,System.Type[])">
            <summary>
            Initializes the default key cache and load the keys.
            </summary>
            <param name="provider"> The syncable database provider. </param>
            <param name="syncEntitiesToCache"> An optional set of specific entity types to cache. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.InitializeAndLoad(Speedy.ISyncableDatabase,System.Type[])">
            <summary>
            Initializes the default key cache and load the keys.
            </summary>
            <param name="database"> The syncable database. </param>
            <param name="syncEntitiesToCache"> An optional set of specific entity types to cache. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.LoadKeysIntoCache(Speedy.ISyncableDatabase)">
            <summary>
            Loads all keys for the sync entities to be cached.
            </summary>
            <param name="database"> The database to use for loading. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.LoadKeysIntoCache(Speedy.ISyncableDatabase,System.Type[])">
            <summary>
            Allows for caching of individual sync types.
            </summary>
            <param name="database"> The database to use for loading. </param>
            <param name="types"> The types to be loaded. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.RemoveEntity(Speedy.Sync.ISyncEntity)">
            <summary>
            Remove an entity ID for the entity Sync ID.
            </summary>
            <param name="entity"> The entity to be un-cached. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.RemoveEntityId(System.Type,System.Object)">
            <summary>
            Remove an entity ID for the entity Sync ID.
            </summary>
            <param name="type"> The type of the entity. </param>
            <param name="syncId"> The sync ID of the entity. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.SupportsType(System.Type)">
            <summary>
            Does the key cache support the following type.
            </summary>
            <param name="type"> The type to test for. </param>
            <returns> True if the type is support or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.ToDetailedString">
            <summary>
            Get a detailed string of cached entities
            </summary>
            <returns> A detailed string. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.UpdateCache(Speedy.Storage.CollectionChangeTracker)">
            <summary>
            Update the cache with the provided tracker changes.
            </summary>
            <param name="tracker"> The tracker with the changes. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.AddEntityId(Speedy.Storage.MemoryCache,System.Object,System.Object)">
            <summary>
            Cache an entity ID for the entity Sync ID.
            </summary>
            <param name="cache"> The cache to add the keys to. </param>
            <param name="syncId"> The sync ID of the entity. </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="T:Speedy.DatabaseOptions">
            <summary>
            Represents options for a Speedy database.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseOptions.#ctor">
            <summary>
            Instantiates an instance of the database options class.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.DisableEntityValidations">
            <summary>
            Gets or sets the flag to disable entity validations.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.MaintainCreatedOn">
            <summary>
            Gets or sets the flag to manage the optional CreatedOn property.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.MaintainModifiedOn">
            <summary>
            Gets or sets the flag to manage the optional ModifiedOn properties.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.MaintainSyncId">
            <summary>
            Gets or sets the flag to manage the sync ID for sync entities.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.PermanentSyncEntityDeletions">
            <summary>
            If true the sync entities will actually delete entities marked for deletion. Defaults to false where IsDeleted will be marked "true".
            </summary>
            todo: update saving of modified entities to ignore changes to deleted sync entities?
        </member>
        <member name="P:Speedy.DatabaseOptions.SyncOrder">
            <summary>
            Gets or sets the sync order of the syncable repositories.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.Timeout">
            <summary>
            Gets or sets the timeout for blocking calls.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.UnmaintainedEntities">
            <summary>
            Gets or sets the list of entities to ignore during maintenance updates.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseOptions.UpdateWith(Speedy.DatabaseOptions,System.String[])">
            <summary>
            Update these database options.
            </summary>
            <param name="update"> </param>
            <param name="exclusions"> </param>
        </member>
        <member name="M:Speedy.DatabaseOptions.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.DatabaseProvider`1">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseProvider`1.#ctor(System.Func{Speedy.DatabaseOptions,`0},Speedy.DatabaseOptions)">
            <summary>
            Instantiate an instance of the database provider.
            </summary>
            <param name="provider"> The database provider function. </param>
            <param name="options"> The options for this provider. </param>
        </member>
        <member name="P:Speedy.DatabaseProvider`1.Options">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.BulkProcess(System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.GetDatabaseFromProvider(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database from the provider.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.DatabaseProvider`1.BulkProcess(System.Func{`0},System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <summary>
            Runs a bulk process where the database lifetime is based on the iteration size.
            A database will be instantiated and used for the iteration count. When the iteration
            count is reach the database will be saved and disposed. A new database will be created
            and processing will continue until the total count is reached. Finally the database
            will be saved and disposed.
            </summary>
            <param name="getDatabase"> Function to get the database. </param>
            <param name="total"> The total amount of items to process. </param>
            <param name="iterationSize"> The iteration size of each process. </param>
            <param name="process"> The action to the process. </param>
        </member>
        <member name="M:Speedy.DatabaseProvider`1.Speedy#IDatabaseProvider#GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.Speedy#IDatabaseProvider#GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.DatabaseType">
            <summary>
            Represents the type of database.
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Unknown">
            <summary>
            Unknown database type?
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Memory">
            <summary>
            An in memory database that behaves like EF SQL database.
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Sql">
            <summary>
            Sql Database
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Sqlite">
            <summary>
            Sqlite Database
            </summary>
        </member>
        <member name="T:Speedy.Data.DevicePlatform">
            <summary>
            Represents the platform of device
            </summary>
        </member>
        <member name="F:Speedy.Data.DevicePlatform.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Speedy.Data.DevicePlatform.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Speedy.Data.DevicePlatform.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:Speedy.Data.DevicePlatform.IOS">
            <summary>
            iOS
            </summary>
        </member>
        <member name="F:Speedy.Data.DevicePlatform.MacOS">
            <summary>
            Mac OS
            </summary>
        </member>
        <member name="F:Speedy.Data.DevicePlatform.Linux">
            <summary>
            Linux
            </summary>
        </member>
        <member name="T:Speedy.Data.DeviceType">
            <summary>
            Represents the type of device
            </summary>
        </member>
        <member name="F:Speedy.Data.DeviceType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Speedy.Data.DeviceType.Desktop">
            <summary>
            Desktop
            </summary>
        </member>
        <member name="F:Speedy.Data.DeviceType.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="F:Speedy.Data.DeviceType.Watch">
            <summary>
            Watch
            </summary>
        </member>
        <member name="F:Speedy.Data.DeviceType.Tablet">
            <summary>
            Tablet
            </summary>
        </member>
        <member name="F:Speedy.Data.DeviceType.TV">
            <summary>
            TV
            </summary>
        </member>
        <member name="T:Speedy.Data.IAccurateInformation">
            <summary>
            Represents information that also contain accuracy value.
            </summary>
        </member>
        <member name="P:Speedy.Data.IAccurateInformation.Accuracy">
            <summary>
            The accuracy of the information.
            </summary>
        </member>
        <member name="P:Speedy.Data.IAccurateInformation.AccuracyReference">
            <summary>
            The reference system for accuracy.
            </summary>
        </member>
        <member name="P:Speedy.Data.IAccurateInformation.HasAccuracy">
            <summary>
            Specifies if the Accuracy value is valid.
            </summary>
        </member>
        <member name="T:Speedy.Data.IInformation">
            <summary>
            Represents information returned by an <see cref="T:Speedy.Data.IInformationProvider" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformation.HasValue">
            <summary>
            Determines if the device information has a value.
            </summary>
            <remarks>
            Each device information could / will have different value members.
            Ex. VerticalLocation will have Altitude, where HorizontalLocation will have Latitude, Longitude.
            </remarks>
        </member>
        <member name="P:Speedy.Data.IInformation.InformationId">
            <summary>
            Represents a global unique ID to identify an information type.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformation.ProviderName">
            <summary>
            The name of the provider that is the source of this information.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformation.SourceName">
            <summary>
            The name of the source of the information. Ex. Hardware, Software, Simulated, Wifi, GPS, etc
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformation.StatusTime">
            <summary>
            The original time of the information was captured.
            </summary>
        </member>
        <member name="T:Speedy.Data.IInformationProvider`1">
            <summary>
            Represents a provider of information.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformationProvider`1.CurrentValue">
            <summary>
            Represents the current value.
            </summary>
        </member>
        <member name="T:Speedy.Data.IInformationProvider">
            <summary>
            Represents a provider of device information.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformationProvider.HasSubProviders">
            <summary>
            Returns true if there are source providers available.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformationProvider.IsEnabled">
            <summary>
            Determines if the provider is enabled.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformationProvider.IsMonitoring">
            <summary>
            Determines if the provider is listening.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformationProvider.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.IInformationProvider.SubProviders">
            <summary>
            An optional set of sources for the information provider.
            </summary>
        </member>
        <member name="M:Speedy.Data.IInformationProvider.StartMonitoringAsync">
            <summary>
            Start monitoring for device information changes.
            </summary>
        </member>
        <member name="M:Speedy.Data.IInformationProvider.StopMonitoringAsync">
            <summary>
            Stop monitoring for device information changes.
            </summary>
        </member>
        <member name="E:Speedy.Data.IInformationProvider.Updated">
            <summary>
            An event to notify when the device information was updated.
            </summary>
        </member>
        <member name="T:Speedy.Data.InformationManager`1">
            <summary>
            Manages a group of information providers and comparers to track a single state of information.
            </summary>
            <typeparam name="T"> The type of the value to track. </typeparam>
        </member>
        <member name="M:Speedy.Data.InformationManager`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Create an instance of the information manager.
            </summary>
        </member>
        <member name="P:Speedy.Data.InformationManager`1.BestValue">
            <summary>
            The best value based on each provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.InformationManager`1.CurrentValue">
            <summary>
            The current final state.
            </summary>
        </member>
        <member name="P:Speedy.Data.InformationManager`1.HasSubProviders">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationManager`1.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationManager`1.IsMonitoring">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationManager`1.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationManager`1.Providers">
            <summary>
            The providers for each type.
            </summary>
        </member>
        <member name="P:Speedy.Data.InformationManager`1.SubProviders">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.InformationManager`1.Add(Speedy.Data.IInformationProvider)">
            <summary>
            Add a provider of device information to the manager.
            </summary>
            <param name="provider"> The provider of device information for the type. </param>
        </member>
        <member name="M:Speedy.Data.InformationManager`1.StartMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.InformationManager`1.StopMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.InformationManager`1.OnUpdated(`0)">
            <summary>
            Triggers the <see cref="M:Speedy.Data.InformationManager`1.OnUpdated(`0)" /> event when the device information changes.
            </summary>
            <param name="e"> The new value. </param>
        </member>
        <member name="E:Speedy.Data.InformationManager`1.ProviderUpdated">
            <summary>
            Notification of specific provider updates.
            </summary>
        </member>
        <member name="E:Speedy.Data.InformationManager`1.Updated">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.InformationProvider`1">
            <summary>
            Represents a provider of device information.
            </summary>
        </member>
        <member name="M:Speedy.Data.InformationProvider`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Represents a provider of device information.
            </summary>
        </member>
        <member name="P:Speedy.Data.InformationProvider`1.CurrentValue">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationProvider`1.HasSubProviders">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationProvider`1.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationProvider`1.IsMonitoring">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationProvider`1.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.InformationProvider`1.SubProviders">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.InformationProvider`1.StartMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.InformationProvider`1.StopMonitoringAsync">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.InformationProvider`1.OnUpdated(`0)">
            <summary>
            Triggers the <see cref="M:Speedy.Data.InformationProvider`1.OnUpdated(`0)" /> event when the device information changes.
            </summary>
            <param name="e"> The new value. </param>
        </member>
        <member name="M:Speedy.Data.InformationProvider`1.UpdateCurrentValue(`0)">
            <summary>
            Update the providers CurrentValue then triggers OnUpdated.
            </summary>
            <param name="update"> The update. </param>
        </member>
        <member name="E:Speedy.Data.InformationProvider`1.Updated">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.AccuracyReferenceType">
            <summary>
            Accuracy Reference
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.AccuracyReferenceType.Unspecified">
            <summary>
            Unknown altitude value
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.AccuracyReferenceType.Meters">
            <summary>
            Altitude in meters
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.AltitudeReferenceType">
            <summary>
            Represents the reference point for the altitude.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.AltitudeReferenceType.Unspecified">
            <summary>
            Unknown / Unspecified
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.AltitudeReferenceType.Terrain">
            <summary>
            Distance above terrain or ground level.
            </summary>
            <remarks>
            Terrain is very volatile, be careful using the concept of terrain.
            </remarks>
        </member>
        <member name="F:Speedy.Data.Location.AltitudeReferenceType.Ellipsoid">
            <summary>
            Ellipsoid which is a mathematical approximation of the shape of the Earth.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.AltitudeReferenceType.Geoid">
            <summary>
            Distance above sea level.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.BasicLocation">
            <summary>
            Represents a minimal location (lat, long, alt, alt ref).
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.#ctor">
            <summary>
            This constructor is only for serialization, do not actually use.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.#ctor(Speedy.IDispatcher)">
            <summary>
            Initialize an instance of the BasicLocation.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.#ctor(Speedy.Data.Location.IBasicLocation,Speedy.IDispatcher)">
            <summary>
            Initialize an instance of the BasicLocation.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.#ctor(System.Double,System.Double,System.Double,Speedy.Data.Location.AltitudeReferenceType,Speedy.IDispatcher)">
            <summary>
            Initialize an instance of the BasicLocation.
            </summary>
            <param name="latitude"> The default value. </param>
            <param name="longitude"> The default value. </param>
            <param name="altitude"> The default value. </param>
            <param name="altitudeReference"> The default value. </param>
            <param name="dispatcher"> The default value. </param>
        </member>
        <member name="P:Speedy.Data.Location.BasicLocation.Altitude">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.BasicLocation.AltitudeReference">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.BasicLocation.HasAltitude">
            <summary>
            Check a location to determine if <see cref="P:Speedy.Data.Location.IMinimalVerticalLocation.Altitude" /> is available.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.BasicLocation.Latitude">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.BasicLocation.Longitude">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.CompareTo(Speedy.Data.Location.BasicLocation)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.Equals(Speedy.Data.Location.BasicLocation)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.op_Implicit(Speedy.Data.Location.Location)~Speedy.Data.Location.BasicLocation">
            <summary>
            Get a IBasicLocation from a Location.
            </summary>
            <param name="location"> The location. </param>
            <returns> The equivalent value as a basic location. </returns>
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.ShouldUpdate(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.TryUpdateWith(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation},System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.UpdateWith(Speedy.Data.Location.BasicLocation,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.UpdateWith(Speedy.Data.Location.IBasicLocation,System.String[])">
            <summary>
            Update the BasicLocation with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.BasicLocation.UpdateWith(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation},System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.IBasicLocation">
            <summary>
            Represents a minimal location (lat, long, alt, alt ref).
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.Converter">
            <summary>
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.Converter.ConvertHeight(System.Double,System.Double,System.Double,Speedy.Data.Location.ConvertFlag)">
            <summary>
            Convert a location from one type to another. Ex. Geoid > Ellipsoid
            </summary>
            <param name="latitude"> The latitude. </param>
            <param name="longitude"> The longitude. </param>
            <param name="height"> The height. </param>
            <param name="flag"> The type of conversion. </param>
            <returns> The converted height. </returns>
        </member>
        <member name="M:Speedy.Data.Location.Converter.GetHeight(System.Double,System.Double)">
            <summary>
            Get the geoid height
            </summary>
            <param name="lat"> latitude in degree </param>
            <param name="lng"> longitude in degree </param>
            <returns> geoid height </returns>
        </member>
        <member name="T:Speedy.Data.Location.ConvertFlag">
            <summary>
            Flags indicating conversions between heights above the geoid and heights above the ellipsoid.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.ConvertFlag.EllipsoidToGeoid">
            <summary>
            The multiplier for converting from heights above the geoid to heights above the ellipsoid.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.ConvertFlag.None">
            <summary>
            No conversion.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.ConvertFlag.GeoidToEllipsoid">
            <summary>
            The multiplier for converting from heights above the ellipsoid to heights above the geoid.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.GeoidGrid">
            <summary>
            Represents the EGM85 Geoid Grid.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.GeoidGrid.ReadGrid(System.Int32[])">
            <summary>
            Read the specified grid value.
            </summary>
            <param name="position"> The grid position. </param>
            <returns> The grid for the position. </returns>
        </member>
        <member name="T:Speedy.Data.Location.HorizontalLocation">
            <summary>
            Represents a horizontal location.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.HorizontalLocation.HorizontalLocationInformationId">
            <summary>
            The information ID for horizontal location.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.#ctor(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.HorizontalLocation.InformationId">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.HorizontalLocation.Latitude">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.HorizontalLocation.Longitude">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.ShouldUpdate(Speedy.Data.Location.IHorizontalLocation)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.TryUpdateWith(Speedy.Data.Location.IHorizontalLocation,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.UpdateWith(Speedy.Data.Location.IHorizontalLocation,System.String[])">
            <summary>
            Update the HorizontalLocation with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.HorizontalLocation.UpdateWith(Speedy.Data.Location.ILocationInformation,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.IHorizontalLocation">
            <summary>
            Represents a horizontal location (lat, long).
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.IMinimalHorizontalLocation">
            <summary>
            Represents a horizontal location (lat, long).
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.IMinimalHorizontalLocation.Latitude">
            <summary>
            Ranges between -90 to 90 from North to South
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.IMinimalHorizontalLocation.Longitude">
            <summary>
            Ranges between -180 to 180 from West to East
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.Location">
            <summary>
            Represents a full location from a LocationProvider. Contains horizontal and vertical location.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.Location.#ctor">
            <summary>
            Instantiates a location for a LocationProvider.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.Location.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a location for a LocationProvider.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.Location.HorizontalLocation">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.Location.VerticalLocation">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.Location.ShouldUpdate(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.Location.ShouldUpdate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.Location.TryUpdateWith(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation},System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.Location.UpdateWith(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation},System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.Location.UpdateWith(Speedy.Data.Location.Location,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.Location.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.ILocation`2">
            <summary>
            Represents a provider location.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocation`2.HorizontalLocation">
            <summary>
            The horizontal location.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocation`2.VerticalLocation">
            <summary>
            The vertical location.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.LocationComparer`3">
            <summary>
            The state comparer for the <see cref="T:Speedy.Data.Location.ILocationInformation" /> type.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.#ctor">
            <summary>
            Instantiate a state comparer.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiate a state comparer.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Data.Location.LocationComparer`3.AlwaysTrustSameSource">
            <summary>
            If true all updates from the existing source will always be accepted regardless of
            the quality of the data.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationComparer`3.SourceTimeout">
            <summary>
            The timeout before the current data will expire and allow data that is lower quality.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.ShouldUpdate(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.ShouldUpdate(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.ShouldUpdate(`0,`2)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.UpdateWith(`0@,`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.UpdateWith(`0@,`1,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.UpdateWith(`0@,`2,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationComparer`3.OnPropertyChangedInDispatcher(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.LocationFlags">
            <summary>
            Represents the flag state for a provider location.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationFlags.HasHeading">
            <summary>
            Location has heading.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationFlags.HasSpeed">
            <summary>
            Location has speed.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationFlags.HasLocation">
            <summary>
            Location has primary value (ex. alt or lat/long)
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationFlags.All">
            <summary>
            All flags
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.LocationInformation">
            <summary>
            Represents location information for a device.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformation.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates location information for a device.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.Accuracy">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.AccuracyReference">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.Flags">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.HasAccuracy">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.HasHeading">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.HasSpeed">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.HasValue">
            <inheritdoc cref="P:Speedy.Data.Location.ILocationInformation.HasValue" />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.Heading">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.InformationId">
            <summary>
            Represents a global unique ID to identify an information type.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.SourceName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.Speed">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationInformation.StatusTime">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationInformation.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationInformation.OnPropertyChangedInDispatcher(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.ILocationInformation">
            <summary>
            Represents location information for a device.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationInformation.Flags">
            <summary>
            Flags for the location of the provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationInformation.HasHeading">
            <summary>
            Specifies if the Heading value is valid.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationInformation.HasSpeed">
            <summary>
            Specifies if the Speed value is valid.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationInformation.HasValue">
            <inheritdoc cref="P:Speedy.Data.IInformation.HasValue" />
        </member>
        <member name="P:Speedy.Data.Location.ILocationInformation.Heading">
            <summary>
            The heading of a device.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationInformation.Speed">
            <summary>
            The speed of the device in meters per second.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.LocationInformationComparer`1">
            <summary>
            The state comparer for the <see cref="T:Speedy.Data.Location.ILocationInformation" /> type.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationComparer`1.#ctor">
            <summary>
            Instantiate a state comparer.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationComparer`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiate a state comparer.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Data.Location.LocationInformationComparer`1.AlwaysTrustSameSource">
            <summary>
            If true all updates from the existing source will always be accepted regardless of
            the quality of the data.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationInformationComparer`1.SourceTimeout">
            <summary>
            The timeout before the current data will expire and allow data that is lower quality.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationComparer`1.ShouldUpdate(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationComparer`1.UpdateWith(`0@,`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.LocationInformationProvider`1">
            <summary>
            Represents provider of location information for a device.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationProvider`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates the provider.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationProvider`1.GetCurrentLocation(System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the current location from the provider.
            </summary>
            <param name="timeout"> Timeout to wait. If null we use the default time from <see cref="T:Speedy.Data.Location.LocationProviderSettings" />. </param>
            <param name="cancelToken"> An optional cancellation token. </param>
            <returns> The current location or null if not available. </returns>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationProvider`1.GetCurrentLocationAsync(System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the current location from the provider.
            </summary>
            <param name="timeout"> Timeout to wait. If null we use the default time from <see cref="T:Speedy.Data.Location.LocationProviderSettings" />. </param>
            <param name="cancelToken"> An optional cancellation token. </param>
            <returns> The current location or null if not available. </returns>
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationProvider`1.ShouldUpdate(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationInformationProvider`1.UpdateWith(`0@,`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.LocationManager`1">
            <summary>
            The manager for location.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationManager`1.#ctor(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationManager`1.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.LocationManager`1.Settings">
            <summary>
            The settings for the location manager.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationManager`1.StartListeningCommand">
            <summary>
            Invokes the start listening method.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationManager`1.StopListeningCommand">
            <summary>
            Invokes the stop listening method.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.LocationProvider`4">
            <summary>
            Represents a location provider.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProvider`4.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of a location provider.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Data.Location.LocationProvider`4.IsLocationAvailable">
            <summary>
            Determines if location is available.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProvider`4.IsLocationEnabled">
            <summary>
            Determines if location is enabled.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProvider`4.LocationProviderSettings">
            <summary>
            The settings for the location provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProvider`4.Status">
            <summary>
            The status of the provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProvider`4.ComparerForHorizontal">
            <summary>
            Comparer for the horizontal location.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProvider`4.ComparerForVertical">
            <summary>
            Comparer for the vertical location.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProvider`4.GetCurrentLocationAsync(System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets position async with specified parameters
            </summary>
            <param name="timeout"> Timeout to wait, Default Infinite </param>
            <param name="cancelToken"> Cancellation token </param>
            <returns> ProviderLocation </returns>
        </member>
        <member name="M:Speedy.Data.Location.LocationProvider`4.ShouldUpdate(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationProvider`4.UpdateWith(`0@,`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationProvider`4.OnLocationProviderError(Speedy.Data.Location.LocationProviderError)">
            <summary>
            Triggers event handler.
            </summary>
            <param name="e"> The value for the event handler. </param>
        </member>
        <member name="M:Speedy.Data.Location.LocationProvider`4.OnLogEventWritten(Speedy.Logging.LogEventArgs)">
            <summary>
            Triggers event handler
            </summary>
            <param name="e"> The value for the event handler. </param>
        </member>
        <member name="E:Speedy.Data.Location.LocationProvider`4.ErrorReceived">
            <summary>
            ProviderLocation error event handler
            </summary>
        </member>
        <member name="E:Speedy.Data.Location.LocationProvider`4.LogEventWritten">
            <summary>
            Provider has written a log event.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.ILocationProvider`4">
            <summary>
            Represents a location provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationProvider`4.LocationProviderSettings">
            <summary>
            The settings for the location provider.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.ILocationProvider`4.GetCurrentLocationAsync(System.Nullable{System.TimeSpan},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets position async with specified parameters
            </summary>
            <param name="timeout"> Timeout to wait, Default Infinite </param>
            <param name="cancelToken"> Cancellation token </param>
            <returns> ProviderLocation </returns>
        </member>
        <member name="T:Speedy.Data.Location.LocationProviderError">
            <summary>
            Error for location provider.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationProviderError.Unknown">
            <summary>
            The provider ran into an unknown error.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationProviderError.LocationUnavailable">
            <summary>
            The provider was unable to retrieve any location data.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationProviderError.Unauthorized">
            <summary>
            The app is not, or no longer, authorized to receive location data.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.LocationProviderError.MissingDependency">
            <summary>
            The app is messing a required dependency.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.LocationProviderException">
            <summary>
            Location exception
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProviderException.#ctor">
            <summary>
            Instantiates an instance of the location provider exception.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProviderException.#ctor(Speedy.Data.Location.LocationProviderError,System.Exception)">
            <summary>
            Instantiates an instance of the location provider exception.
            </summary>
            <param name="error"> The error for the location provider. </param>
            <param name="innerException"> An inner exception. </param>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderException.Error">
            <summary>
            The error for the location provider.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.LocationProviderSettings">
            <summary>
            Settings for a location provider.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProviderSettings.#ctor">
            <summary>
            Instantiates an instance of the settings.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProviderSettings.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the settings.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DefaultDesiredAccuracy">
            <summary>
            Global default desired accuracy in meters
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DefaultMinimumDistance">
            <summary>
            The default minimum distance to travel for updates.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DefaultMinimumTime">
            <summary>
            The default requested time period between updates.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DefaultRequireLocationAlwaysPermission">
            <summary>
            Gets or set flag to require always permission. If true always require otherwise "only in use" permission.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DesiredAccuracy">
            <summary>
            Desired accuracy in meters
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DesiredAccuracyLowerLimit">
            <summary>
            The lower range limit for <see cref="P:Speedy.Data.Location.LocationProviderSettings.DesiredAccuracy" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.DesiredAccuracyUpperLimit">
            <summary>
            The upper range limit for <see cref="P:Speedy.Data.Location.LocationProviderSettings.DesiredAccuracy" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.MinimumDistance">
            <summary>
            The minimum distance to travel for updates.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.MinimumDistanceLowerLimit">
            <summary>
            The lower range limit for <see cref="P:Speedy.Data.Location.LocationProviderSettings.MinimumDistance" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.MinimumDistanceUpperLimit">
            <summary>
            The upper range limit for <see cref="P:Speedy.Data.Location.LocationProviderSettings.MinimumDistance" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.MinimumTime">
            <summary>
            The requested time period between updates.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.MinimumTimeLowerLimit">
            <summary>
            The lower range limit for <see cref="P:Speedy.Data.Location.LocationProviderSettings.MinimumTime" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.MinimumTimeUpperLimit">
            <summary>
            The upper range limit for <see cref="P:Speedy.Data.Location.LocationProviderSettings.MinimumTime" />.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.LocationProviderSettings.RequireLocationAlwaysPermission">
            <summary>
            Gets or set flag to require always permission. If true always require otherwise "only in use" permission.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.LocationProviderSettings.Cleanup">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.LocationProviderSettings.Reset">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.ILocationProviderSettings">
            <summary>
            Represents settings for a location provider.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationProviderSettings.DesiredAccuracy">
            <summary>
            Desired accuracy in meters
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationProviderSettings.MinimumDistance">
            <summary>
            The minimum distance to travel for updates.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationProviderSettings.MinimumTime">
            <summary>
            The requested time period between updates.
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.ILocationProviderSettings.RequireLocationAlwaysPermission">
            <summary>
            Gets or set flag to require always permission. If true always require otherwise "only in use" permission.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.ILocationProviderSettings.Cleanup">
            <summary>
            Cleanup the settings to be sure they are in range.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.ILocationProviderSettings.Reset">
            <summary>
            Reset the settings back to defaults.
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.VerticalLocation">
            <summary>
            Represents a vertical location.
            </summary>
        </member>
        <member name="F:Speedy.Data.Location.VerticalLocation.VerticalLocationInformationId">
            <summary>
            The information ID for vertical location.
            </summary>
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.#ctor(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.#ctor(Speedy.Data.Location.IMinimalVerticalLocation,Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.#ctor(System.Double,Speedy.Data.Location.AltitudeReferenceType,Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.VerticalLocation.Altitude">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.VerticalLocation.AltitudeReference">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Data.Location.VerticalLocation.InformationId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.ShouldUpdate(Speedy.Data.Location.IVerticalLocation)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.TryUpdateWith(Speedy.Data.Location.IVerticalLocation,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.UpdateWith(Speedy.Data.Location.IVerticalLocation,System.String[])">
            <summary>
            Update the VerticalLocation with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.Location.VerticalLocation.UpdateWith(Speedy.Data.Location.ILocationInformation,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Data.Location.IVerticalLocation">
            <summary>
            Represents a vertical location (alt, alt ref, acc, acc ref).
            </summary>
        </member>
        <member name="T:Speedy.Data.Location.IMinimalVerticalLocation">
            <summary>
            Represents a vertical location (alt, alt ref).
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.IMinimalVerticalLocation.Altitude">
            <summary>
            The altitude of the location
            </summary>
        </member>
        <member name="P:Speedy.Data.Location.IMinimalVerticalLocation.AltitudeReference">
            <summary>
            The reference type for the altitude value.
            </summary>
        </member>
        <member name="T:Speedy.Data.RuntimeInformation">
            <summary>
            Gets information about the current runtime.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.#ctor">
            <summary>
            Creates an instance of the runtime information.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of the runtime information.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.ApplicationName">
            <summary>
            The name of the application.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.ApplicationVersion">
            <summary>
            The version of the application.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.DeviceId">
            <summary>
            The ID of the device.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.DeviceManufacturer">
            <summary>
            The name of the device manufacturer.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.DeviceModel">
            <summary>
            The model of the device.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.DeviceName">
            <summary>
            The name of the device.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.DevicePlatform">
            <summary>
            The name of the platform.
            </summary>
        </member>
        <member name="P:Speedy.Data.RuntimeInformation.DeviceType">
            <summary>
            The type of the device.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.IsWindows">
            <summary>
            Determines if the platform is Windows.
            </summary>
            <returns> True if the platform is Windows otherwise false. </returns>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.Refresh">
            <summary>
            Loads all properties.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.ResetCache">
            <summary>
            Reset the cache.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetApplicationName">
            <summary>
            The name of the application.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetApplicationVersion">
            <summary>
            The version of the application.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetDeviceId">
            <summary>
            The ID of the device.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetDeviceManufacturer">
            <summary>
            The name of the device manufacturer.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetDeviceModel">
            <summary>
            The model of the device.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetDeviceName">
            <summary>
            The name of the device.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetDevicePlatform">
            <summary>
            The name of the platform.
            </summary>
        </member>
        <member name="M:Speedy.Data.RuntimeInformation.GetDeviceType">
            <summary>
            The type of the device.
            </summary>
        </member>
        <member name="T:Speedy.Data.SecureVault">
            <summary>
            The vault to store credential securely.
            </summary>
        </member>
        <member name="M:Speedy.Data.SecureVault.#ctor">
            <summary>
            Creates an instance of the vault.
            </summary>
        </member>
        <member name="M:Speedy.Data.SecureVault.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of the vault.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Data.SecureVault.Credential">
            <summary>
            The credential for the vault.
            </summary>
        </member>
        <member name="M:Speedy.Data.SecureVault.ClearCredential">
            <summary>
            Clears the credential from the vault.
            </summary>
        </member>
        <member name="M:Speedy.Data.SecureVault.ReadCredentialAsync">
            <summary>
            Gets the stored credential from the vault.
            </summary>
            <returns> Return true if the credential was read otherwise false. </returns>
        </member>
        <member name="M:Speedy.Data.SecureVault.WriteCredentialAsync">
            <summary>
            Writes a credential to the vault.
            </summary>
            <returns> Return true if the credential was written otherwise false. </returns>
        </member>
        <member name="T:Speedy.DefaultDispatcher">
            <summary>
            Represents a default dispatcher
            </summary>
        </member>
        <member name="P:Speedy.DefaultDispatcher.IsDispatcherThread">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DefaultDispatcher.Run(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DefaultDispatcher.Run``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DefaultDispatcher.RunAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DefaultDispatcher.RunAsync``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Entity`1">
            <summary>
            Represents a Speedy entity.
            </summary>
            <typeparam name="T"> The type of the entity primary ID. </typeparam>
        </member>
        <member name="P:Speedy.Entity`1.Id">
            <summary>
            Gets or sets the ID of the entity.
            </summary>
        </member>
        <member name="M:Speedy.Entity`1.IdIsSet">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.NewId(`0@)">
            <summary>
            Allows the entity to calculate the next key.
            </summary>
            <param name="currentKey"> The current version of the key. </param>
            <returns> The new key to be used in. </returns>
        </member>
        <member name="M:Speedy.Entity`1.ShouldUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.TrySetId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.TryUpdateWith(`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(System.Object,System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Entity">
            <summary>
            Represents a Speedy entity.
            </summary>
        </member>
        <member name="F:Speedy.Entity._realType">
            <summary>
            Cached version of the "real" type, meaning not EF proxy but rather root type
            </summary>
        </member>
        <member name="M:Speedy.Entity.#ctor">
            <summary>
            Instantiates an entity
            </summary>
        </member>
        <member name="P:Speedy.Entity.ChangedProperties">
            <summary>
            The properties that has changed since last <see cref="M:Speedy.Entity.ResetChangeTracking" /> event.
            </summary>
        </member>
        <member name="P:Speedy.Entity.RealType">
            <summary>
            Cached version of the "real" type, meaning not EF proxy but rather root type
            </summary>
        </member>
        <member name="M:Speedy.Entity.CanBeModified">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityAdded">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityAddedDeletedOrModified">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityDeleted">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityModified">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.HasChanges(System.String[])">
            <summary>
            Determines if the object has changes.
            </summary>
        </member>
        <member name="M:Speedy.Entity.IdIsSet">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.IsPropertyExcludedForChangeTracking(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.OnPropertyChanged(System.String)">
            <summary>
            Notify that a property has changed
            </summary>
            <param name="propertyName"> The name of the property that changed. </param>
        </member>
        <member name="M:Speedy.Entity.ResetChangeTracking">
            <summary>
            Reset the change tracking flag.
            </summary>
        </member>
        <member name="M:Speedy.Entity.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.ShouldUpdate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.TrySetId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.TryUpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.Unwrap">
            <summary>
            Unwrap the entity from the proxy. Will ignore virtual properties.
            </summary>
            <returns>
            The real entity unwrapped from the Entity Framework proxy.
            </returns>
        </member>
        <member name="M:Speedy.Entity.UpdateLocalSyncIds">
            <summary>
            Update all local sync IDs.
            </summary>
        </member>
        <member name="M:Speedy.Entity.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.UpdateWith(System.Object,System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.UpdateWith(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allows updating of one type to another based on member Name and Type. Virtual properties are ignore by default.
            </summary>
            <param name="update"> The source of the updates. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
        </member>
        <member name="M:Speedy.Entity.GetDefaultExclusionsForChangeTracking">
            <summary>
            Gets the default exclusions for change tracking. Warning: this is called during constructor, overrides need to be
            sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during change tracking. </returns>
        </member>
        <member name="E:Speedy.Entity.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.IEntity">
            <summary>
            Represents a Speedy entity.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.CanBeModified">
            <summary>
            Checks to see if an entity can be modified.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityAdded">
            <summary>
            Update an entity that has been added.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityAddedDeletedOrModified">
            <summary>
            Update an entity that has been added, deleted, or modified.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityDeleted">
            <summary>
            Update an entity that has been deleted.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityModified">
            <summary>
            Update an entity that has been modified.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.IdIsSet">
            <summary>
            Determine if the ID is set on the entity.
            </summary>
            <returns> True if the ID is set or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.IEntity.IsPropertyExcludedForChangeTracking(System.String)">
            <summary>
            Checks a property has been excluded for change tracking.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property is excluded or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.IEntity.TrySetId(System.String)">
            <summary>
            Try to set the ID from a serialized version.
            </summary>
            <returns> True if the ID is successfully set or false if otherwise. </returns>
        </member>
        <member name="T:Speedy.ICreatedEntity">
            <summary>
            Represents a Speedy entity that track the date and time it was created.
            </summary>
        </member>
        <member name="P:Speedy.ICreatedEntity.CreatedOn">
            <summary>
            Gets or sets the date and time the entity was created.
            </summary>
        </member>
        <member name="T:Speedy.IModifiableEntity">
            <summary>
            Represents a Speedy entity that track the date and time it was last modified.
            </summary>
        </member>
        <member name="P:Speedy.IModifiableEntity.ModifiedOn">
            <summary>
            Gets or sets the date and time the entity was modified.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.SpeedyException">
            <summary>
            The base exception for the Speedy framework.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.KeyNotFound">
            <summary>
            Represents message for key not found.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.RepositoryNotFound">
            <summary>
            Represents message for repository not found.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.SyncEntityIncorrectType">
            <summary>
            Represents message for invalid sync entity type.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.ClientNotSupported">
            <summary>
            Represents message for invalid sync clients.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.SyncIssueException">
            <summary>
            Represents a sync issue exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor(Speedy.Sync.SyncIssueType,System.String,Speedy.Sync.SyncIssue[])">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor(Speedy.Sync.SyncIssueType,System.String,System.Exception,Speedy.Sync.SyncIssue[])">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="P:Speedy.Exceptions.SyncIssueException.Issues">
            <summary>
            Gets the child sync issues for this exception.
            </summary>
        </member>
        <member name="P:Speedy.Exceptions.SyncIssueException.IssueType">
            <summary>
            Gets the type of the issue.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.UpdateException">
            <summary>
            Represents an update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.ValidationException">
            <summary>
            Represents an validation issue.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.GetErrorMessage(Speedy.Validation.ValidationExceptionType,System.String)">
            <summary>
            Get the error message for AreEqual validation.
            </summary>
            <param name="type"> The exception type. </param>
            <param name="name"> The property name. </param>
            <returns> The error message. </returns>
        </member>
        <member name="T:Speedy.Exceptions.WebClientException">
            <summary>
            Represents a web client exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="P:Speedy.Exceptions.WebClientException.Code">
            <summary>
            The HTTP status code for this exception.
            </summary>
        </member>
        <member name="T:Speedy.ExclusionKey">
            <summary>
            Represents a key for an exclusion combination
            </summary>
        </member>
        <member name="M:Speedy.ExclusionKey.#ctor(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Instantiates an exclusion key
            </summary>
            <param name="type"> The type being processed. </param>
            <param name="excludeIncomingSync"> Should exclude properties during incoming sync. </param>
            <param name="excludeOutgoingSync"> Should exclude properties during outgoing sync. </param>
            <param name="excludeSyncUpdate"> Should exclude properties during sync update. </param>
        </member>
        <member name="P:Speedy.ExclusionKey.ExcludeIncomingSync">
            <summary>
            Should exclude properties during incoming sync.
            </summary>
        </member>
        <member name="P:Speedy.ExclusionKey.ExcludeOutgoingSync">
            <summary>
            Should exclude properties during outgoing sync.
            </summary>
        </member>
        <member name="P:Speedy.ExclusionKey.ExcludeSyncUpdate">
            <summary>
            Should exclude properties during sync update.
            </summary>
        </member>
        <member name="P:Speedy.ExclusionKey.Type">
            <summary>
            The type of object this key is for.
            </summary>
        </member>
        <member name="M:Speedy.ExclusionKey.CompareTo(Speedy.ExclusionKey)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.Equals(Speedy.ExclusionKey)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Extensions.CollectionExtensions">
            <summary>
            Extensions for collections.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddOrReplace``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0},System.Func{``0,``0})">
            <summary>
            Add the item or replace the item with a new 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="lookup"></param>
            <param name="create"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddOrUpdate(System.Net.Http.Headers.HttpHeaders,System.String,System.String)">
            <summary>
            Add or update the value in the HTTP headers collection.
            </summary>
            <param name="headers"> The headers to be updated. </param>
            <param name="key"> The key of the value. </param>
            <param name="value"> The value of the entry. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add multiple items to a collection
            </summary>
            <param name="set"> The set to add items to. </param>
            <param name="items"> The items to add. </param>
            <typeparam name="T"> The type of the items in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Add multiple items to a collection
            </summary>
            <param name="set"> The set to add items to. </param>
            <param name="items"> The items to add. </param>
            <typeparam name="T"> The type of the items in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.HashSet{``0},``0[])">
            <summary>
            Appends new values to an existing HashSet.
            </summary>
            <typeparam name="T"> The type of value in the set. </typeparam>
            <param name="set"> The set to append to. </param>
            <param name="values"> The values to add. </param>
            <returns> A new HashSet containing the new values. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.HashSet{``0})">
            <summary>
            Appends new values to an existing HashSet.
            </summary>
            <typeparam name="T"> The type of value in the set. </typeparam>
            <param name="set"> The set to append to. </param>
            <param name="values"> The values to add. </param>
            <returns> A new HashSet containing the new values. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AppendExtraProperties``2(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Appends all properties that are on the first type (T1) but not on the second type (T2).
            </summary>
            <typeparam name="T1"> The type of the first item. </typeparam>
            <typeparam name="T2"> The type of the second item. </typeparam>
            <param name="collection"> The collection to be updated. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.CalculateCrc16(System.Byte[])">
            <summary>
            Calculate a CRC using CRC-16/KERMIT.
            </summary>
            <param name="data"> The data to calculate the CRC for. </param>
            <returns> The CRC for the data. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.CalculateCrc16(System.Byte[],System.Int32)">
            <summary>
            Calculate a CRC using CRC-16/KERMIT.
            </summary>
            <param name="data"> The data to calculate the CRC for. </param>
            <param name="length"> The length to calculate. </param>
            <returns> The CRC for the data. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ExcludeSequentialDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``0,System.Boolean})">
            <summary>
            Exclude duplicates that are sequential. Ex. 1,2,2,3,3,4 -> 1,2,3,4
            </summary>
            <typeparam name="T"> The type of the collection entries. </typeparam>
            <typeparam name="T2"> The type of the property to be validated. </typeparam>
            <param name="collection"> The collection to be processed. </param>
            <param name="propertyExpression"> The expression of the property to be tested. </param>
            <param name="additionalCheck"> An optional additional check for testing for duplicates. </param>
            <returns> The processed collections with sequential duplicates removed. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Execute the action on each entity in the collection.
            </summary>
            <param name="items"> The collection of items to process. </param>
            <param name="action"> The action to execute for each item. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute the action on each entity in the collection.
            </summary>
            <typeparam name="T"> The type of item in the collection. </typeparam>
            <param name="items"> The collection of items to process. </param>
            <param name="action"> The action to execute for each item. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.NaturalSort(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Natural sort a string collection.
            </summary>
            <param name="collection"> The collection to sort. </param>
            <returns> The sorted collection. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.NaturalSort(System.Collections.Generic.IEnumerable{System.String},System.Globalization.CultureInfo)">
            <summary>
            Natural sort a string collection.
            </summary>
            <param name="collection"> The collection to sort. </param>
            <param name="cultureInfo"> The culture information to use during sort. </param>
            <returns> The sorted collection. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Reconcile``3(Speedy.IRepository{``0,``1},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``2,System.Boolean},System.Func{``0,``2,System.Boolean},System.Func{``2,``0},System.Action{``0,``2},System.String[])">
            <summary>
            Reconcile one collection with another.
            </summary>
            <typeparam name="TLeft"> The type of the left collection. </typeparam>
            <typeparam name="TLeftKey"> The type of the left collection key. </typeparam>
            <typeparam name="TRight"> The type of the right collection. </typeparam>
            <param name="collection"> The left collection. </param>
            <param name="filter"> The filter for the collection. </param>
            <param name="updates"> The right collection. </param>
            <param name="compare"> The logic for comparison. </param>
            <param name="locate"> The logic to locate matching entity. </param>
            <param name="convert"> The function to convert from TLeft to TRight. </param>
            <param name="optionalUpdates"> A set of optional updates. </param>
            <param name="optionalExclusions"> A set of optional excluded properties </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Reconcile``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Func{``1,``0},System.Action{``0,``1},System.String[])">
            <summary>
            Reconcile one collection with another.
            </summary>
            <typeparam name="TLeft"> The type of the left collection. </typeparam>
            <typeparam name="TRight"> The type of the right collection. </typeparam>
            <param name="collection"> The left collection. </param>
            <param name="updates"> The right collection. </param>
            <param name="compare"> The logic for comparison. </param>
            <param name="convert"> The function to convert from TLeft to TRight. </param>
            <param name="optionalUpdates"> A set of optional updates. </param>
            <param name="optionalExclusions"> A set of optional excluded properties </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Reconcile``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reconcile one collection with another.
            </summary>
            <typeparam name="T"> The type of the collections. </typeparam>
            <param name="collection"> The left collection. </param>
            <param name="updates"> The right collection. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Reconcile``2(Speedy.IRepository{``0,``1},Speedy.IRepository{``0,``1})">
            <summary>
            Reconcile one collection with another.
            </summary>
            <typeparam name="T"> The type of the collections. </typeparam>
            <typeparam name="T2"> </typeparam>
            <param name="collection"> The left collection. </param>
            <param name="updates"> The right collection. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Reconcile``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reconcile one collection with another.
            </summary>
            <typeparam name="T"> The type of the collections. </typeparam>
            <param name="collection"> The left collection. </param>
            <param name="updates"> The right collection. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets a sub array from an existing array.
            </summary>
            <typeparam name="T"> The type of the array items. </typeparam>
            <param name="data"> The array to pull from. </param>
            <param name="index"> The index to start from. </param>
            <param name="length"> The amount of data to pull. </param>
            <returns> The sub array of data. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ToBase64(System.Byte[])">
            <summary>
            Gets the base 64 version of the byte array.
            </summary>
            <param name="data"> The data to process. </param>
            <returns> The base 64 string of the data. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends new values to an existing HashSet.
            </summary>
            <typeparam name="T"> The type of value in the set. </typeparam>
            <param name="set"> The set to append to. </param>
            <param name="values"> The values to add. </param>
            <returns> A new HashSet containing the new values. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ToListSafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Safely convert an enumeration to a list without worry about "InvalidOperationException" due to collection being modified.
            </summary>
            <typeparam name="T"> The type in the collection. </typeparam>
            <param name="values"> The enumeration to convert to a list. </param>
            <returns> The values in a list format. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ToListSafe``2(Speedy.IRepository{``0,``1})">
            <summary>
            Safely convert an enumeration to a list without worry about "InvalidOperationException" due to collection being modified.
            </summary>
            <typeparam name="T"> The type of the entity of the collection. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <param name="values"> The enumeration to convert to a list. </param>
            <returns> The values in a list format. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.TryFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Try to get the first item out of the provided values.
            </summary>
            <typeparam name="T"> The type of the items in values. </typeparam>
            <param name="values"> The values to enumerate. </param>
            <param name="predicate"> The predicate to validate the item. </param>
            <param name="value"> The value if found otherwise the "default" value of the type. </param>
            <returns> True if the item was found otherwise false. </returns>
        </member>
        <member name="T:Speedy.Extensions.CommandExtensions">
            <summary>
            Extensions for commands
            </summary>
        </member>
        <member name="M:Speedy.Extensions.CommandExtensions.Refresh(System.Windows.Input.ICommand)">
            <summary>
            Refresh the command state.
            </summary>
        </member>
        <member name="T:Speedy.Extensions.DateTimeExtensions">
            <summary>
            Extensions for date time
            </summary>
        </member>
        <member name="F:Speedy.Extensions.DateTimeExtensions.MaxDateTimeTicks">
            <summary>
            The amount of ticks in the Max Date / Time value.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.DateTimeExtensions.MinDateTimeTicks">
            <summary>
            The amount of ticks in the Min Date / Time value.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.DateTimeExtensions.Max(System.DateTime,System.DateTime)">
            <summary>
            Returns the larger of two specified date times.
            </summary>
            <param name="left"> The left date and time. </param>
            <param name="right"> The right date and time. </param>
            <returns> The larger of the two. </returns>
        </member>
        <member name="M:Speedy.Extensions.DateTimeExtensions.Min(System.DateTime,System.DateTime)">
            <summary>
            Returns the smaller of two specified date times.
            </summary>
            <param name="left"> The left date and time. </param>
            <param name="right"> The right date and time. </param>
            <returns> The smaller of the two. </returns>
        </member>
        <member name="M:Speedy.Extensions.DateTimeExtensions.ToOscTimeTag(System.DateTime)">
            <summary>
            Convert a DateTime to an OscTimeTag.
            </summary>
            <param name="time"> The time to be converted. </param>
            <returns> The DateTime in OscTimeTag format. </returns>
        </member>
        <member name="M:Speedy.Extensions.DateTimeExtensions.ToUtcDateTime(System.String)">
            <summary>
            Converts the string representation of a date and time to its <see cref="T:System.DateTime"> </see> equivalent.
            </summary>
            <param name="value"> The string value. </param>
            <returns> The date time value. </returns>
        </member>
        <member name="M:Speedy.Extensions.DateTimeExtensions.ToUtcString(System.DateTime)">
            <summary>
            Converts the date time into a ISO8601 format.
            </summary>
            <param name="dateTime"> </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Extensions.DictionaryExtensions">
            <summary>
            Extensions for dictionary
            </summary>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.AddIfMissing``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Add a dictionary entry if the key is not found.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="value"> The value of the value. </param>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Add or update a dictionary entry if the key is not found in the source.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="source"> The dictionary for source values. </param>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Add or update an entry in a dictionary.
            </summary>
            <typeparam name="T1"> The key value type. </typeparam>
            <typeparam name="T2"> The value value type. </typeparam>
            <param name="dictionary"> The dictionary to add or update. </param>
            <param name="value"> The value to add or update. </param>
            <returns> The dictionary that was update. </returns>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Add or update a dictionary entry.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="value"> The value of the value. </param>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},System.Func{``1,``1})">
            <summary>
            Add or update a dictionary entry.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="get"> The function to get the value. </param>
            <param name="update"> The function to update the value. </param>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.DeepClone``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Deep clone a dictionary of items. Will use the ICloneable interface if available.
            </summary>
            <typeparam name="T"> The key type. </typeparam>
            <typeparam name="T2"> The value type. </typeparam>
            <param name="dictionary"> The dictionary to clone. </param>
            <returns> The clone dictionary. </returns>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.DeepClone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Deep clone a dictionary of items. Will use the ICloneable interface if available.
            </summary>
            <typeparam name="T"> The key type. </typeparam>
            <typeparam name="T2"> The value type. </typeparam>
            <param name="dictionary"> The dictionary to clone. </param>
            <returns> The clone dictionary. </returns>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to get a value or returns the default value.
            </summary>
            <typeparam name="T"> The key type. </typeparam>
            <typeparam name="T2"> The value type. </typeparam>
            <param name="dictionary"> The dictionary to check. </param>
            <param name="key"> The key to check for. </param>
            <returns> The value that was found or default value </returns>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.Reconcile``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Reconcile one collection with another.
            </summary>
            <typeparam name="TKey"> The type of the key for the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the value for the dictionary. </typeparam>
            <param name="dictionary"> The left collection. </param>
            <param name="updates"> The right collection. </param>
        </member>
        <member name="M:Speedy.Extensions.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Tries to get a value or returns the default value.
            </summary>
            <typeparam name="T"> The key type. </typeparam>
            <typeparam name="T2"> The value type. </typeparam>
            <param name="dictionary"> The dictionary to check. </param>
            <param name="key"> The key to check for. </param>
            <param name="value"> The value that was found or default value. </param>
            <returns> True if the value exist otherwise false. </returns>
        </member>
        <member name="T:Speedy.Extensions.DirectoryInfoExtensions">
            <summary>
            Extensions for directory info
            </summary>
        </member>
        <member name="M:Speedy.Extensions.DirectoryInfoExtensions.Empty(System.IO.DirectoryInfo)">
            <summary>
            Empties a directory of all the files and the directories.
            </summary>
            <param name="directory"> The directory to empty. </param>
        </member>
        <member name="M:Speedy.Extensions.DirectoryInfoExtensions.SafeCreate(System.IO.DirectoryInfo)">
            <summary>
            Safely create a directory.
            </summary>
            <param name="info"> The information on the directory to create. </param>
        </member>
        <member name="M:Speedy.Extensions.DirectoryInfoExtensions.SafeDelete(System.IO.DirectoryInfo)">
            <summary>
            Safely delete a directory.
            </summary>
            <param name="info"> The information of the directory to delete. </param>
        </member>
        <member name="T:Speedy.Extensions.DoubleExtensions">
            <summary>
            Extensions for double
            </summary>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.Decrement(System.Double,System.Double)">
            <summary>
            Decrement an double by a value or double.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be decremented. </param>
            <param name="decrease"> An optional value to decrement. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.Increment(System.Double,System.Double)">
            <summary>
            Increment an double by a value or double.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be incremented. </param>
            <param name="increase"> An optional increase. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.ToCelsius(System.Decimal)">
            <summary>
            Convert Fahrenheit to Celsius.
            </summary>
            <param name="fahrenheit"> The temperature in Fahrenheit. </param>
            <returns> The temperature in Celsius. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.ToFahrenheit(System.Single)">
            <summary>
            Convert Celsius to Fahrenheit.
            </summary>
            <param name="celsius"> The temperature in Celsius. </param>
            <returns> The temperature in Fahrenheit. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.ToFahrenheit(System.Decimal)">
            <summary>
            Convert Celsius to Fahrenheit.
            </summary>
            <param name="celsius"> The temperature in Celsius. </param>
            <returns> The temperature in Fahrenheit. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.ToMilesPerHour(System.Single)">
            <summary>
            Convert kilometers to miles per hour.
            </summary>
            <param name="kilometersPerHour"> The speed in kilometers per hour. </param>
            <returns> The speed in miles per hour. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.ToMilesPerHour(System.Double)">
            <summary>
            Convert kilometers to miles per hour.
            </summary>
            <param name="kilometersPerHour"> The speed in kilometers per hour. </param>
            <returns> The speed in miles per hour. </returns>
        </member>
        <member name="M:Speedy.Extensions.DoubleExtensions.ToMilesPerHour(System.Decimal)">
            <summary>
            Convert kilometers to miles per hour.
            </summary>
            <param name="kilometersPerHour"> The speed in kilometers per hour. </param>
            <returns> The speed in miles per hour. </returns>
        </member>
        <member name="T:Speedy.Extensions.EnumExtensions">
            <summary>
            Extensions for enumerations
            </summary>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.ClearFlag``1(``0,``0)">
            <summary>
            Clear the "flagged" enum value.
            </summary>
            <typeparam name="T"> The type of the enum value. </typeparam>
            <param name="value"> The value to update. </param>
            <param name="flag"> The flag to be cleared. </param>
            <returns> The value with the flagged cleared. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.Count``1">
            <summary>
            Returns the number of values for the provided enum.
            </summary>
            <returns> The number of values in the enum. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.Count(System.Enum)">
            <summary>
            Returns the number of values for the provided enum.
            </summary>
            <param name="value"> The enum value to count. </param>
            <returns> The number of values in the enum. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetAllEnumDetails``1">
            <summary>
            Gets the all details for an enum value.
            </summary>
            <returns> The all details for the enum value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetAllEnumDetails(System.Type)">
            <summary>
            Gets the all details for an enum value.
            </summary>
            <param name="type"> The type to process. </param>
            <returns> The all details for the enum value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetAllEnumDetailsExcept``1(``0[])">
            <summary>
            Gets the all details for an enum value except the excluded.
            </summary>
            <param name="exclusions"> The types to be excluded. </param>
            <returns> The all details for the enum value except the exclusions. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the description.
            </summary>
            <param name="value"> The enum value to get the description for. </param>
            <returns> The description of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDescription``1(``0)">
            <summary>
            Gets the description.
            </summary>
            <param name="value"> The enum value to get the description for. </param>
            <returns> The description of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDisplayName(System.Enum)">
            <summary>
            Gets the name.
            </summary>
            <param name="value"> The enum value to get the name for. </param>
            <returns> The name of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDisplayName``1(``0)">
            <summary>
            Gets the name.
            </summary>
            <param name="value"> The enum value to get the name for. </param>
            <returns> The name of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDisplayNames``1">
            <summary>
            Gets the display names.
            </summary>
            <returns> The display names of the enum type. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDisplayNamesExcept``1(``0[])">
            <summary>
            Gets the display names excluding the provided values.
            </summary>
            <param name="exclusions"> An optional set of enums to exclude. </param>
            <returns> The display names of the enum type. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDisplayShortName(System.Enum)">
            <summary>
            Gets the display short name.
            </summary>
            <param name="value"> The enum value to get the short name for. </param>
            <returns> The name of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetDisplayShortName``1(``0)">
            <summary>
            Gets the short name.
            </summary>
            <param name="value"> The enum value to get the short name for. </param>
            <returns> The short name of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetEnumDetails(System.Enum)">
            <summary>
            Gets the details for an enum value.
            </summary>
            <param name="value"> The value to process. </param>
            <returns> The details for the enum value. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetEnumValues``1(``0[])">
            <summary>
            Get all enum values with an optional set of exclusions.
            </summary>
            <returns> The enum value except the exclusions. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetFlaggedValues``1(``0)">
            <summary>
            Gets the type array of the values flagged (set) in the enum.
            </summary>
            <typeparam name="T"> The enum type. </typeparam>
            <param name="value"> The enum value to get the flagged values for. </param>
            <returns> The individual values for the enum. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetFlagValues``1">
            <summary>
            Gets the type array of the values in the enum.
            </summary>
            <typeparam name="T"> The enum type. </typeparam>
            <returns> The individual values for the enum. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.GetValues``1">
            <summary>
            Gets the type array of the values in the enum.
            </summary>
            <typeparam name="T"> The enum type. </typeparam>
            <returns> The individual values for the enum. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.SetFlag``1(``0,``0)">
            <summary>
            Set the "flagged" enum value.
            </summary>
            <typeparam name="T"> The type of the enum value. </typeparam>
            <param name="value"> The value to update. </param>
            <param name="flag"> The flag to be set. </param>
            <returns> The value with the flagged set. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.UpdateFlag``1(``0,``0,``0)">
            <summary>
            Set the "flagged" enum value based on the provided update value state.
            </summary>
            <typeparam name="T"> The type of the enum value. </typeparam>
            <param name="value"> The value to update. </param>
            <param name="update"> The source of update. </param>
            <param name="flags"> The flags to be read then set. </param>
            <returns> The value with the flagged set or cleared based on the update value. </returns>
        </member>
        <member name="T:Speedy.Extensions.EnumExtensions.EnumDetails">
            <summary>
            Represents the details for an enum value.
            </summary>
        </member>
        <member name="P:Speedy.Extensions.EnumExtensions.EnumDetails.Description">
            <summary>
            The description of the enum value.
            </summary>
            <remarks>
            Priority is [DisplayAttribute].Description, [DescriptionAttribute].Description, enum.ToString()
            </remarks>
        </member>
        <member name="P:Speedy.Extensions.EnumExtensions.EnumDetails.Name">
            <summary>
            The name of the enum value.
            </summary>
            <remarks>
            Priority is [DisplayAttribute].Name, enum.ToString()
            </remarks>
        </member>
        <member name="P:Speedy.Extensions.EnumExtensions.EnumDetails.ShortName">
            <summary>
            The short name of the enum value.
            </summary>
            <remarks>
            Priority is [DisplayAttribute].Short, enum.ToString()
            </remarks>
        </member>
        <member name="P:Speedy.Extensions.EnumExtensions.EnumDetails.Value">
            <summary>
            The enum value.
            </summary>
        </member>
        <member name="T:Speedy.Extensions.ExceptionExtensions">
            <summary>
            Extensions for enumerations
            </summary>
        </member>
        <member name="M:Speedy.Extensions.ExceptionExtensions.CleanMessage(System.Exception)">
            <summary>
            Clean the exception of the Parameter meta data.
            </summary>
            <param name="ex"> The exception to clean. </param>
            <returns> The cleaned message. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExceptionExtensions.GetMessage(System.Exception)">
            <summary>
            Gets the message value of the exception. Skips all AggregateException messages.
            </summary>
            <param name="exception"> The exception to process. </param>
            <returns> The message value of the exception. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExceptionExtensions.ToDetailedString(System.Exception,System.Boolean)">
            <summary>
            Gets the details of the exception.
            </summary>
            <param name="ex"> The exception to be processed. </param>
            <param name="includeStackTrace"> Optionally include the stack trace. Defaults to true. </param>
            <returns> The detailed string for the exception. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExceptionExtensions.AddExceptionToBuilder(System.Text.StringBuilder,System.Exception,System.Boolean)">
            <summary>
            Add the exception details to the string builder.
            </summary>
            <param name="builder"> The builder to be appended to. </param>
            <param name="ex"> The exception to be processed. </param>
            <param name="includeStackTrace"> Optionally include the stack trace. Defaults to true. </param>
        </member>
        <member name="T:Speedy.Extensions.ExpressionExtensions">
            <summary>
            Extensions for expressions
            </summary>
        </member>
        <member name="M:Speedy.Extensions.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a expression that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.
            </summary>
            <typeparam name="T"> The type used in the expression. </typeparam>
            <param name="left"> A Expression to set the Left property equal to. </param>
            <param name="right"> A Expression to set the Right property equal to. </param>
            <returns> The updated expression. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a expression that represents a conditional OR operation.
            </summary>
            <typeparam name="T"> The type used in the expression. </typeparam>
            <param name="left"> A Expression to set the Left property equal to. </param>
            <param name="right"> A Expression to set the Right property equal to. </param>
            <returns> The updated expression. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExpressionExtensions.ThenInclude``3(Speedy.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <typeparam name="T"> The type of entity being queried. </typeparam>
            <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="include"> A lambda expression representing the navigation property to be included (<c> t =&gt; t.Property1 </c>). </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="T:Speedy.Extensions.FileExtensions">
            <summary>
            File system extensions (file / directories)
            </summary>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeCreate(System.IO.FileInfo)">
            <summary>
            Safely create a file.
            </summary>
            <param name="file"> The information of the file to create. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeDelete(System.IO.FileInfo)">
            <summary>
            Safely delete a file.
            </summary>
            <param name="info"> The information of the file to delete. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeMove(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Safely move a file.
            </summary>
            <param name="fileLocation"> The information of the file to move. </param>
            <param name="newLocation"> The location to move the file to. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.OpenFile(System.IO.FileInfo)">
            <summary>
            Open the file with read/write permission with file read share.
            </summary>
            <param name="info"> The information for the file. </param>
            <returns> The stream for the file. </returns>
        </member>
        <member name="T:Speedy.Extensions.FloatExtensions">
            <summary>
            Extensions for float
            </summary>
        </member>
        <member name="M:Speedy.Extensions.FloatExtensions.Decrement(System.Single,System.Single)">
            <summary>
            Decrement an float by a value or float.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be decremented. </param>
            <param name="decrease"> An optional value to decrement. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.Extensions.FloatExtensions.Increment(System.Single,System.Single)">
            <summary>
            Increment an float by a value or float.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be incremented. </param>
            <param name="increase"> An optional increase. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="T:Speedy.Extensions.GuidExtensions">
            <summary>
            Extensions for Guids.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToGuid(System.Int32)">
            <summary>
            Converts an integer to a Guid. Ex. 1 == 00000000-0000-0000-0000-000000000001
            </summary>
            <param name="value"> The value to be converted to a Guid. </param>
            <returns> The guid. </returns>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToGuid(System.Int64)">
            <summary>
            Converts a long to a Guid. Ex. 1 == 00000000-0000-0000-0000-000000000001
            </summary>
            <param name="value"> The value to be converted to a Guid. </param>
            <returns> The guid. </returns>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToGuid(System.UInt64)">
            <summary>
            Converts a ulong to a Guid. Ex. 1 == 00000000-0000-0000-0000-000000000001
            </summary>
            <param name="value"> The value to be converted to a Guid. </param>
            <returns> The guid. </returns>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToShortGuid(System.Guid)">
            <summary>
            Converts a Guid to a Short Guid.
            </summary>
            <param name="guid"> The Guid to convert. </param>
            <returns> The Guid in a Short Guid format. </returns>
        </member>
        <member name="T:Speedy.Extensions.HttpExtensions">
            <summary>
            Extensions for HTTP (ish)
            </summary>
        </member>
        <member name="M:Speedy.Extensions.HttpExtensions.GetResponseString(System.Net.HttpWebResponse)">
            <summary>
            Returns the string from a HttpWebResponse.
            </summary>
            <param name="response"> The response to read from. </param>
            <returns>
            The string from the response.
            </returns>
        </member>
        <member name="M:Speedy.Extensions.HttpExtensions.IsSuccessStatusCode(System.Net.HttpWebResponse)">
            <summary>
            A value that indicates whether the HTTP response was successful.
            </summary>
            <param name="response"> The response to validate. </param>
            <returns>
            True if HttpStatusCode is in the successful range (200-299) otherwise false;
            </returns>
        </member>
        <member name="T:Speedy.Extensions.LocationExtensions">
            <summary>
            Extensions for location related code.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.LocationExtensions.EarthRadius">
            <summary>
            Radius of the earth.
            </summary>
        </member>
        <member name="P:Speedy.Extensions.LocationExtensions.SupportedAccuracyReferenceTypes">
            <summary>
            Globally supported Accuracy Reference types. Changing this affects extension methods like HasAccuracy.
            </summary>
        </member>
        <member name="P:Speedy.Extensions.LocationExtensions.SupportedAccuracyReferenceTypesForHorizontal">
            <summary>
            Globally supported Accuracy Reference types for horizontal locations. Changing this affects extension methods like HasAccuracy.
            </summary>
        </member>
        <member name="P:Speedy.Extensions.LocationExtensions.SupportedAccuracyReferenceTypesForVertical">
            <summary>
            Globally supported Accuracy Reference types for vertical locations. Changing this affects extension methods like HasAccuracy.
            </summary>
        </member>
        <member name="P:Speedy.Extensions.LocationExtensions.SupportedAltitudeReferenceTypes">
            <summary>
            Globally supported Altitude Reference types. Changing this affects extension methods like HasAltitude.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateDegreesPerMeter(System.Double)">
            <summary>
            Calculate the degrees per meter.
            </summary>
            <param name="latitude"> The latitude to calculate for. </param>
            <returns> Returns degrees per latitude and per longitude. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateDegreesPerMeter(Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Calculate the degrees per meter.
            </summary>
            <param name="location"> The latitude to calculate for. </param>
            <returns> Returns degrees per latitude and per longitude. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateHeading(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the heading from one location to another.
            </summary>
            <param name="latitudeStart"> Latitude start. </param>
            <param name="longitudeStart"> Longitude start. </param>
            <param name="latitudeEnd"> Latitude end. </param>
            <param name="longitudeEnd"> Longitude end. </param>
            <returns> The heading. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateHeading(Speedy.Data.Location.IMinimalHorizontalLocation,Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Calculate the heading from one location to another.
            </summary>
            <param name="start"> The starting location. </param>
            <param name="end"> The ending location. </param>
            <returns> The heading. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateKey(Speedy.Data.IAccurateInformation)">
            <summary>
            Calculate a key that consist of {ProviderName}-{SourceName}-{InformationId}.
            </summary>
            <param name="information"> The information to create the key for. </param>
            <returns> The key for the information. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateMetersPerDegrees(System.Double)">
            <summary>
            Calculate the meters per degree.
            </summary>
            <param name="latitude"> The location to calculate for. </param>
            <returns> Returns meters for both latitude and longitude. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CalculateMetersPerDegrees(Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Calculate the meters per degree.
            </summary>
            <param name="location"> The location to calculate for. </param>
            <returns> Returns meters for both latitude and longitude. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.CreateCircle(Speedy.Data.Location.IMinimalHorizontalLocation,System.Double,System.Byte)">
            <summary>
            Calculate the corners of a circle
            </summary>
            <param name="center"> The center of the circle. </param>
            <param name="radius"> The radius of the circle. </param>
            <param name="circlePoints"> The amount of points for the circle. </param>
            <returns> The points for the circle. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.DistanceBetween(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between two locations in meters.
            </summary>
            <param name="latitudeStart"> Latitude start. </param>
            <param name="longitudeStart"> Longitude start. </param>
            <param name="latitudeEnd"> Latitude end. </param>
            <param name="longitudeEnd"> Longitude end. </param>
            <returns> The distance in meters. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.DistanceBetween(Speedy.Data.Location.Location,Speedy.Data.Location.Location)">
            <summary>
            Calculates the distance between two locations in meters.
            </summary>
            <param name="start"> Start. </param>
            <param name="end"> End. </param>
            <returns> The distance in meters. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.DistanceBetween(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between two locations in meters.
            </summary>
            <param name="latitudeStart"> Latitude start. </param>
            <param name="longitudeStart"> Longitude start. </param>
            <param name="altitudeStart"> Altitude start. </param>
            <param name="latitudeEnd"> Latitude end. </param>
            <param name="longitudeEnd"> Longitude end. </param>
            <param name="altitudeEnd"> Altitude end. </param>
            <returns> The distance in meters. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.DistanceBetween(Speedy.Data.Location.IMinimalHorizontalLocation,Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Calculates the distance between two locations in meters.
            </summary>
            <param name="locationStart"> The starting location. </param>
            <param name="locationEnd"> The ending location. </param>
            <returns> The distance in meters. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.GetCenter(System.Collections.Generic.IEnumerable{Speedy.Data.Location.IMinimalHorizontalLocation})">
            <summary>
            Gets the center of a set of locations.
            </summary>
            <param name="locations"> The locations to get the center for. </param>
            <returns> The center of the locations. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.GetEllipsoidAltitude(Speedy.Data.Location.IMinimalVerticalLocation,Speedy.Data.Location.IMinimalVerticalLocation)">
            <summary>
            Tries to get an ellipsoid altitude for the vertical location.
            </summary>
            <param name="location"> The location to process. </param>
            <param name="relativeTo"> A relative location to base non-ellipsoid vertical locations to. </param>
            <returns> The final ellipsoid altitude or best guess. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.GetRadius(System.Collections.Generic.IEnumerable{Speedy.Data.Location.IMinimalHorizontalLocation})">
            <summary>
            Gets the radius of a set of locations.
            </summary>
            <param name="locations"> The locations to get the center for. </param>
            <returns> The radius of the locations. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.HandleFlagsChanged(Speedy.Data.Location.ILocationInformation,System.String)">
            <summary>
            Handles triggering dependent properties for <see cref="P:Speedy.Data.Location.ILocationInformation.Flags" />.
            </summary>
            <param name="information"> The location information for a device. </param>
            <param name="propertyName"> The name of the property that changed. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.HasAccuracy(Speedy.Data.IAccurateInformation)">
            <summary>
            Check a information to determine if <see cref="P:Speedy.Data.IAccurateInformation.Accuracy" /> is available.
            </summary>
            <param name="information"> The information to validate. </param>
            <returns> True if the value is available. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.HasHeading(Speedy.Data.Location.ILocationInformation)">
            <summary>
            Check a information to determine if a location device information has a heading.
            </summary>
            <param name="information"> The information to validate. </param>
            <returns> True if the heading is available otherwise false. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.HasLocation(Speedy.Data.Location.ILocationInformation)">
            <summary>
            Check a information to determine if a location device information has a location.
            </summary>
            <param name="information"> The information to validate. </param>
            <returns> True if the value is available. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.HasSpeed(Speedy.Data.Location.ILocationInformation)">
            <summary>
            Check a information to determine if a location device information has a speed.
            </summary>
            <param name="information"> The information to validate. </param>
            <returns> True if the speed is available otherwise false. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.HasSupportedAltitude(Speedy.Data.Location.IMinimalVerticalLocation)">
            <summary>
            Check a location to determine if <see cref="P:Speedy.Data.Location.IMinimalVerticalLocation.Altitude" /> is available.
            </summary>
            <param name="location"> The location to validate. </param>
            <returns> True if the value is available. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsGreaterThan(Speedy.Data.Location.IMinimalVerticalLocation,Speedy.Data.Location.IMinimalVerticalLocation)">
            <summary>
            Is the left location greater than the right.
            </summary>
            <param name="left"> The left location. </param>
            <param name="right"> The right location. </param>
            <returns> True if the location is greater than the provided location. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsGreaterThanOrEqualTo(Speedy.Data.Location.IMinimalVerticalLocation,Speedy.Data.Location.IMinimalVerticalLocation)">
            <summary>
            Is the left location greater than or equal to the right.
            </summary>
            <param name="left"> The left location. </param>
            <param name="right"> The right location. </param>
            <returns> True if the location is greater than or equal to the provided location. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsLessThan(Speedy.Data.Location.IMinimalVerticalLocation,Speedy.Data.Location.IMinimalVerticalLocation)">
            <summary>
            Is the left location less than the right.
            </summary>
            <param name="left"> The left location. </param>
            <param name="right"> The right location. </param>
            <returns> True if the location is less than the provided location. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsLessThanOrEqualTo(Speedy.Data.Location.IMinimalVerticalLocation,Speedy.Data.Location.IMinimalVerticalLocation)">
            <summary>
            Is the left location less than or equal to the right.
            </summary>
            <param name="left"> The left location. </param>
            <param name="right"> The right location. </param>
            <returns> True if the location is less than or equal to the provided location. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsLocationInside(System.Collections.Generic.IList{Speedy.Data.Location.IBasicLocation},Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Determine if the location is inside a set of locations.
            </summary>
            <param name="locations"> The locations to get the center for. </param>
            <param name="location"> The location to check for. </param>
            <returns> True if the location is inside the set. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsLocationInside(System.Collections.Generic.IList{Speedy.Data.Location.IMinimalHorizontalLocation},Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Determine if the location is inside a set of locations.
            </summary>
            <param name="locations"> The locations to get the center for. </param>
            <param name="location"> The location to check for. </param>
            <returns> True if the location is inside the set. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsLocationInside(System.Collections.Generic.IList{Speedy.Data.Location.IMinimalHorizontalLocation},System.Double,System.Double)">
            <summary>
            Determine if the location is inside a set of locations.
            </summary>
            <param name="locations"> The locations to get the center for. </param>
            <param name="latitude"> The latitude to check for. </param>
            <param name="longitude"> The longitude to check for. </param>
            <returns> True if the location is inside the set. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.IsValidLocation(Speedy.Data.Location.IMinimalHorizontalLocation)">
            <summary>
            Return true if the location is valid.
            Note: we consider invalid a location with both Latitude 0 and Longitude 0.
            </summary>
            <param name="location"> The location to validate </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.KilometersToMiles(System.Double)">
            <summary>
            Convert Kilometers to Miles
            </summary>
            <param name="kilometers"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.MetersPerSecond(System.Double,System.TimeSpan)">
            <summary>
            Calculate the meters per second.
            </summary>
            <param name="distanceInMeters"> The distances in meters. </param>
            <param name="span"> The span of time. </param>
            <returns> The speed in meters per second. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.MilesToKilometers(System.Double)">
            <summary>
            Convert Miles to Kilometers
            </summary>
            <param name="miles"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.ToBasicLocation(Speedy.Data.Location.IBasicLocation)">
            <summary>
            Extension method to convert a basic location to another instance.
            </summary>
            <param name="location"> The location to convert to just a basic location. </param>
            <returns> A new instance of the basic location. </returns>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.Update(Speedy.Data.Location.IBasicLocation,Speedy.Data.Location.IBasicLocation,System.String[])">
            <summary>
            Updates a location with a new location.
            </summary>
            <param name="location"> The location to be updated. </param>
            <param name="update"> The new location. </param>
            <param name="exclusions"> An optional set of exclusions. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateHasHeading(Speedy.Data.Location.ILocationInformation,System.Boolean)">
            <summary>
            Update the location's HasHeading location flag.
            </summary>
            <param name="location"> The location to validate. </param>
            <param name="value"> True to set HasHeading flag otherwise clear the flag. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateHasLocation(Speedy.Data.Location.ILocationInformation,System.Boolean)">
            <summary>
            Update the location's HasLocation flag.
            </summary>
            <param name="location"> The location to validate. </param>
            <param name="value"> True to set HasLocation flag otherwise clear the flag. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateHasSpeed(Speedy.Data.Location.ILocationInformation,System.Boolean)">
            <summary>
            Update the location's HasSpeed location flag.
            </summary>
            <param name="location"> The location to validate. </param>
            <param name="value"> True to set HasSpeedy flag otherwise clear the flag. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateLocation(Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IHorizontalLocation)">
            <summary>
            Update the horizontal location (lat, long).
            </summary>
            <param name="location"> The location to update. </param>
            <param name="update"> The update with new values. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateWith(Speedy.Data.Location.IBasicLocation,Speedy.Data.Location.IBasicLocation,System.String[])">
            <summary>
            Update the BasicLocation with an update.
            </summary>
            <param name="location"> The location to update. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateWith(Speedy.Data.Location.IBasicLocation,Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation},System.String[])">
            <summary>
            Update the BasicLocation with an update.
            </summary>
            <param name="location"> The location to update. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateWith(Speedy.Data.Location.IBasicLocation,Speedy.Data.Location.IMinimalHorizontalLocation,System.String[])">
            <summary>
            Update the BasicLocation with an update.
            </summary>
            <param name="location"> The location to update. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Extensions.LocationExtensions.UpdateWith(Speedy.Data.Location.IBasicLocation,Speedy.Data.Location.IMinimalVerticalLocation,System.String[])">
            <summary>
            Update the BasicLocation with an update.
            </summary>
            <param name="location"> The location to update. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="T:Speedy.Extensions.LoggingExtensions">
            <summary>
            Extensions for logging.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.LoggingExtensions.GetDetailedMessage(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <summary>
            Convert the event written event argument to its payload string
            </summary>
            <param name="args"> The item to process. </param>
            <returns> The formatted message. </returns>
        </member>
        <member name="M:Speedy.Extensions.LoggingExtensions.GetMessage(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <summary>
            Convert the event written event argument to its payload string
            </summary>
            <param name="args"> The item to process. </param>
            <returns> The formatted message. </returns>
        </member>
        <member name="T:Speedy.Extensions.NameValueCollectionExtensions">
            <summary>
            Extensions for the NameCollectionValue type.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.NameValueCollectionExtensions.TryGet(System.Collections.Specialized.NameValueCollection,System.String,System.String@)">
            <summary>
            Tries to get the values associated with the specified key from the <see cref='T:System.Collections.Specialized.NameValueCollection' />
            combined into one comma-separated list.
            </summary>
            <param name="collection"> The collection to use. </param>
            <param name="name"> The name of the values to read. </param>
            <param name="value"> The value read. Will be null if the value don't exist. </param>
            <returns> True if the value was read otherwise false. </returns>
        </member>
        <member name="T:Speedy.Extensions.NewtonsoftExtensions">
            <summary>
            Extensions for Newtonsoft JSON.net
            </summary>
        </member>
        <member name="M:Speedy.Extensions.NewtonsoftExtensions.GetConverter``1(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Locates the first item of the provided type.
            </summary>
            <typeparam name="T"> The type of the JsonConverter. </typeparam>
            <param name="settings"> The JSON serializer settings. </param>
            <returns> The converter of provided type or otherwise default type. </returns>
        </member>
        <member name="T:Speedy.Extensions.ObjectExtensions">
            <summary>
            Extensions for the object.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.ObjectExtensions.IfThenElse(System.Func{System.Boolean},System.Action,System.Action)">
            <summary>
            Executes a provided action if the test is successful.
            </summary>
            <param name="test"> The test to determine action to take. </param>
            <param name="action1"> The action to perform if the test is true. </param>
            <param name="action2"> The action to perform if the test is false. </param>
        </member>
        <member name="M:Speedy.Extensions.ObjectExtensions.RemoveEventHandlers(System.Object)">
            <summary>
            Remove all event handlers from the provided value.
            </summary>
            <param name="value"> The value to remove all event handlers. </param>
        </member>
        <member name="M:Speedy.Extensions.ObjectExtensions.ShallowClone``1(``0)">
            <summary>
            Global shallow clone. If the object is ICloneable then the interface implementation will be used.
            </summary>
            <typeparam name="T"> The type of the object </typeparam>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Extensions.ObjectExtensions.ShallowClone(System.Object)">
            <summary>
            Global shallow clone. If the object is ICloneable then the interface implementation will be used.
            </summary>
            <param name="value"> </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Extensions.QueryableExtensions">
            <summary>
            Extensions for queryable
            </summary>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``1(System.Linq.IQueryable{``0},Speedy.PagedRequest)">
            <summary>
            Gets paged results.
            </summary>
            <typeparam name="T"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets paged results. Transform is executed as part of the query.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="tranform"> The function to transform the results. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets paged results. Transform is executed as part of the query.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="tranform"> The function to transfer the results. </param>
            <param name="order"> An optional order of the collection. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Linq.Expressions.Expression{System.Func{``0,``1}},Speedy.Collections.OrderBy{``0},Speedy.Collections.OrderBy{``0}[])">
            <summary>
            Gets paged results. Transform is executed as part of the query.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <param name="order"> The order of the collection. </param>
            <param name="thenBys"> An optional then bys to order the collection. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResultsClientTransform``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Func{``0,``1})">
            <summary>
            Gets paged results. Transform is executed on the client after the results are queried.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResultsClientTransform``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets paged results. Transform is executed on the client after the results are queried.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <param name="order"> An optional order of the collection. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResultsClientTransform``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Func{``0,``1},Speedy.Collections.OrderBy{``0},Speedy.Collections.OrderBy{``0}[])">
            <summary>
            Gets paged results. Transform is executed on the client after the results are queried.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <param name="order"> The order of the collection. </param>
            <param name="thenBys"> An optional then bys to order the collection. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="T:Speedy.Extensions.RandomExtensions">
            <summary>
            Extensions for the Random type.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.RandomExtensions.NextDecimal(System.Random,System.Decimal,System.Decimal,System.Byte)">
            <summary>
            Returns a random decimal floating point that is within a specified range.
            </summary>
            <param name="random"> The random object to use. </param>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive maximum bound of the random number returned. </param>
            <param name="scale"> The scale of the decimal. How precise? 1 = 0.1, 2 = 0.01 </param>
            <returns>
            A decimal number greater than or equal to minValue and less than maxValue; that is, the
            range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Speedy.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double,System.Byte)">
            <summary>
            Returns a random double floating point that is within a specified range.
            </summary>
            <param name="random"> The random object to use. </param>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive maximum bound of the random number returned. </param>
            <param name="scale"> The scale of the double. How precise? 1 = 0.1, 2 = 0.01 </param>
            <returns>
            A double floating point number greater than or equal to minValue and less than maxValue; that is, the
            range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="T:Speedy.Extensions.ReflectionExtensions">
            <summary>
            Extensions for all the things.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.ReflectionExtensions.DefaultEventFlags">
            <summary>
            Default event flags for cached access.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.ReflectionExtensions.DefaultFlags">
            <summary>
            Default flags for cached access.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.CachedMakeGenericMethod(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a
            MethodInfo object representing the resulting constructed method. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The property information to get the generic arguments for. </param>
            <param name="arguments"> An array of types to be substituted for the type parameters of the current generic method definition. </param>
            <returns> The method information with generics. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Create an instance for a given Type.
            </summary>
            <param name="type"> The Type for which to get an instance of. </param>
            <param name="arguments"> The value of the arguments. </param>
            <returns> The new instances of the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.CreateInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            Quickly create a new type of a generic.
            </summary>
            <param name="type"> The base type that requires generics. </param>
            <param name="genericTypes"> The types for the generic. </param>
            <param name="arguments"> The value of the arguments. </param>
            <returns> The new instances of the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedAccessors(System.Reflection.PropertyInfo)">
            <summary>
            Gets a list of generic arguments for the provided property information. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The property information to get the generic arguments for. </param>
            <returns> The list of generic arguments for the property information of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedEventFields(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of event information for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the events for. </param>
            <param name="flags"> The flags to find events by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of field info of the events for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedEventFields(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of event information for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the events for. </param>
            <param name="flags"> The flags to find events by. Defaults to Public, Non Public, Instance, Flatten Hierarchy </param>
            <returns> The list of field info of the events for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedField(System.Object,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a field by name for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="item"> The item to get the field for. </param>
            <param name="name"> The type field name to locate. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The field information for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedField(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a field by name for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the fields for. </param>
            <param name="name"> The type field name to locate. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The field information for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedFields(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of fields for the provided item. The results are cached so the next query is much faster.
            </summary>
            <param name="item"> The item to get the fields for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of field infos for the item. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedFields(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of fields for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the fields for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of field infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedGenericArguments(System.Reflection.MethodInfo)">
            <summary>
            Gets a list of generic arguments for the provided method information. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The method information to get the generic arguments for. </param>
            <returns> The list of generic arguments for the method information of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedGenericArguments(System.Type)">
            <summary>
            Gets a list of generic arguments for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the generic arguments for. </param>
            <returns> The list of generic arguments for the type of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethod(System.Type,System.String,System.Type[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the method for. </param>
            <param name="name"> The string containing the name of the public method to get. </param>
            <param name="types"> An array of type objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of type objects (as provided by the EmptyTypes field) to get a method that takes no parameters. </param>
            <returns> An object representing the public method whose parameters match the specified argument types, if found; otherwise null. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethod(System.Object,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets the method info from the provided type by the name provided.
            The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the methods for. </param>
            <param name="name"> The name of the method to be queried. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of method infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethods(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of methods for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the methods for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of method infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethods(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of methods for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the methods for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of method infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedParameters(System.Reflection.MethodInfo)">
            <summary>
            Gets a list of parameter infos for the provided method info. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The method info to get the parameters for. </param>
            <returns> The list of parameter infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedProperties(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of property types for the provided object type. The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedProperties(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of property information for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedProperty(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets the information for the provided type and property name. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the property for. </param>
            <param name="name"> The name of the property to be queried. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedPropertyDictionary(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of property information for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedVirtualProperties(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of virtual property types for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetDefaultValue(System.Type)">
            <summary>
            Retrieves the default value for a given Type.
            </summary>
            <param name="type"> The Type for which to get the default value </param>
            <returns> The default value for <paramref name="type" /> </returns>
            <remarks>
            If a null Type, a reference Type, or a System.Void Type is supplied, this method always returns null.  If a value type
            is supplied which is not publicly visible or which contains generic parameters, this method will fail with an
            exception.
            </remarks>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetDefaultValue(System.Reflection.PropertyInfo,System.Func{System.Reflection.PropertyInfo,System.Object})">
            <summary>
            Get a default value for a property.
            </summary>
            <param name="propertyInfo"> The property info. </param>
            <param name="nonSupportedType"> An optional non supported type. </param>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetExclusions``1(``0)">
            <summary>
            Get exclusions for the provided type. Currently this returns all sync exclusions.
            todo: add an "exclusion" interface so we can exclude on any model.
            </summary>
            <typeparam name="T"> The type of the model. </typeparam>
            <param name="model"> The model to get exclusions for. </param>
            <returns> The exclusions. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetExpressionName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Get the name of the expression.
            </summary>
            <param name="expression"> The expression to process. </param>
            <returns> The name of the expression. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetGenericTypes(System.Object)">
            <summary>
            Get the types for the generic.
            </summary>
            <param name="value"> The value to get the types for. </param>
            <returns> The type values for the generic object. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetMemberValue(System.Object,System.String)">
            <summary>
            Gets the public or private member using reflection.
            </summary>
            <param name="value"> The value that contains the member. </param>
            <param name="memberName"> The name of the field or property to get the value of. </param>
            <returns> The value of member. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member value of an object using the provider info.
            </summary>
            <param name="memberInfo"> The info for the member. </param>
            <param name="value"> </param>
            <returns> The value of the value member. </returns>
            <exception cref="T:System.NotImplementedException"> The member info is not a field or property. </exception>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetNonDefaultValue(System.Reflection.PropertyInfo,System.Func{System.Reflection.PropertyInfo,System.Object})">
            <summary>
            Get a non default value for a property.
            </summary>
            <param name="propertyInfo"> The property info. </param>
            <param name="nonSupportedType"> An optional non supported type. </param>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetRealType(System.Object)">
            <summary>
            Gets the real type of the entity. For use with proxy entities.
            </summary>
            <param name="item"> The object to process. </param>
            <returns> The real base type for the proxy or just the initial type if it is not a proxy. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetRealType(System.Type)">
            <summary>
            Gets the real type of the entity. For use with proxy entities.
            </summary>
            <param name="type"> The type to process. </param>
            <returns> The real base type for the proxy or just the initial type if it is not a proxy. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetVirtualPropertyNames(System.Type)">
            <summary>
            Gets a list of virtual property names. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The value to get the property names for. </param>
            <returns> The list of virtual property names for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.IsVirtual(System.Reflection.PropertyInfo)">
            <summary>
            Determine if the property is a virtual method.
            </summary>
            <param name="info"> The info to process. </param>
            <returns> True if the accessor is virtual. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.SetMemberValue(System.Object,System.String,System.Object)">
            <summary>
            Gets the public or private member using reflection.
            </summary>
            <param name="obj"> The target object. </param>
            <param name="memberName"> Name of the field or property. </param>
            <param name="newValue"> The new value to be set. </param>
            <returns> Old Value </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.ToAssemblyName(System.Type)">
            <summary>
            Converts the type to an assembly name. Does not include version. Ex. System.String,mscorlib
            </summary>
            <param name="type"> The type to get the assembly name for. </param>
            <returns> The assembly name for the provided type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.UpdateWithNonDefaultValues``1(``0,System.String[])">
            <summary>
            Update the provided object with non default values.
            </summary>
            <typeparam name="T"> The type of the value. </typeparam>
            <param name="value"> The value to update all properties for. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
            <returns> The type updated with non default values. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.UpdateWithNonDefaultValues``1(``0,System.Func{System.Reflection.PropertyInfo,System.Object},System.String[])">
            <summary>
            Update the provided object with non default values.
            </summary>
            <typeparam name="T"> The type of the value. </typeparam>
            <param name="value"> The value to update all properties for. </param>
            <param name="nonSupportedType"> An optional function to update non supported property value types. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
            <returns> The type updated with non default values. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.ValidateAllValuesAreNotDefault``1(``0,System.String[])">
            <summary>
            Validates that all values are not default value.
            </summary>
            <typeparam name="T"> The type of the model. </typeparam>
            <param name="model"> The model to be validated. </param>
            <param name="exclusions"> An optional set of exclusions. </param>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.NextInt32(System.Random)">
            <summary>
            Returns an Int32 with a random value across the entire range of
            possible values.
            </summary>
        </member>
        <member name="T:Speedy.Extensions.StreamExtensions">
            <summary>
            Extensions for stream
            </summary>
        </member>
        <member name="M:Speedy.Extensions.StreamExtensions.ReadString(System.IO.Stream,System.Int32)">
            <summary>
            Read a string from a stream.
            </summary>
            <param name="stream"> The stream to read from. </param>
            <param name="bufferLength"> The buffer length for individual reads. Defaults to 1024. </param>
            <returns> The string to read. </returns>
        </member>
        <member name="M:Speedy.Extensions.StreamExtensions.ReadStringAndCleanup(System.IO.Stream,System.Int32)">
            <summary>
            Read a string from a stream then disposes of the stream
            </summary>
            <param name="stream"> The stream to read from. </param>
            <param name="bufferLength"> The buffer length for individual reads. Defaults to 1024. </param>
            <returns> The string to read. </returns>
        </member>
        <member name="T:Speedy.Extensions.StringExtensions">
            <summary>
            Extensions for the string type.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ConvertHexStringToByteArray(System.String)">
            <summary>
            Convert a hex string to a byte array.
            </summary>
            <param name="hexString"> A string with hex data (2 bytes per character). </param>
            <returns> The byte array value of the hex string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.Escape(System.String)">
            <summary>
            To literal version of the string.
            </summary>
            <param name="input"> The string input. </param>
            <returns> The literal version of the string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.Escape(System.Byte[])">
            <summary>
            Turn a byte array into a readable, escaped string
            </summary>
            <param name="bytes"> bytes </param>
            <returns> a string </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.FromBase64(System.String)">
            <summary>
            Convert string from a base 64 string.
            </summary>
            <param name="data"> The data to be converted. </param>
            <returns> The unencoded string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.FromBase64ToByteArray(System.String)">
            <summary>
            Convert string from a base 64 string.
            </summary>
            <param name="data"> The data to be converted. </param>
            <returns> The unencoded byte array. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.FromHexString(System.String)">
            <summary>
            Convert a HEX string to a regular text string.
            </summary>
            <param name="value"> A string with hex data (2 bytes per character). </param>
            <returns> The string value. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.FromHexStringToArray(System.String)">
            <summary>
            Convert the hex string back to byte array.
            </summary>
            <param name="value"> The hex string to be converter. </param>
            <returns> The byte array. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.GetStableHashCode(System.String)">
            <summary>
            Gets a stable hash code for a string value.
            </summary>
            <param name="value"> The string value. </param>
            <returns> The hash code for the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.MaxLength(System.String,System.Int32,System.Boolean)">
            <summary>
            Trims string to a maximum length.
            </summary>
            <param name="value"> The value to process. </param>
            <param name="max"> The maximum length of the string. </param>
            <param name="addEllipses"> The option to add ellipses to shorted strings. Defaults to false. </param>
            <returns> The value limited to the maximum length. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ReverseString(System.String)">
            <summary>
            Reverse the string order. Ex. "ABC" -> "CBA"
            </summary>
            <param name="value"> The value to reverse. </param>
            <returns> The string in a reversed order. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToBase64(System.String)">
            <summary>
            Convert string to a base 64 string.
            </summary>
            <param name="data"> The data to be converted. </param>
            <returns> The base 64 encoded string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToHexString(System.String,System.String,System.String)">
            <summary>
            Converts a string to hex string value. Ex. "A" -> "41"
            </summary>
            <param name="value"> The string value to convert. </param>
            <param name="delimiter"> An optional delimited to put between bytes of the data. </param>
            <param name="prefix"> An optional prefix to put before each byte of the data. </param>
            <returns> The string in a hex string format. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToHexString(System.Guid)">
            <summary>
            Converts a byte array to a hex string format. Ex. [41],[42] = "4142"
            </summary>
            <param name="data"> The byte array to convert. </param>
            <returns> The byte array in a hex string format. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToHexString(System.Byte[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Converts a byte array to a hex string format. Ex. [41],[42] = "4142"
            </summary>
            <param name="data"> The byte array to convert. </param>
            <param name="startIndex"> The starting position within value. </param>
            <param name="length"> The number of array elements in value to convert. </param>
            <param name="delimiter"> An optional delimited to put between bytes of the data. </param>
            <param name="prefix"> An optional prefix to put before each byte of the data. </param>
            <returns> The byte array in a hex string format. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToSecureString(System.String,System.Boolean)">
            <summary>
            Convert a string into a secure string.
            </summary>
            <param name="input"> The string. </param>
            <param name="makeReadOnly"> Option to make the SecureString read only. </param>
            <returns> The secure string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToUnsecureString(System.Security.SecureString)">
            <summary>
            Converts a SecureString to an unsecure string.
            </summary>
            <param name="value"> The value to be converted. </param>
            <returns> The unsecure string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.Unescape(System.String)">
            <summary>
            Turn a readable string into a byte array
            </summary>
            <param name="value"> a string, optionally with escape sequences in it </param>
            <returns> The unescape version of the provided value. </returns>
        </member>
        <member name="T:Speedy.Extensions.SyncDeviceExtensions">
            <summary>
            Extensions for Sync Device
            </summary>
        </member>
        <member name="F:Speedy.Extensions.SyncDeviceExtensions.ApplicationNameValueKey">
            <summary>
            The key for the ApplicationName value for Sync Client Details.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.SyncDeviceExtensions.ApplicationVersionValueKey">
            <summary>
            The key for the ApplicationVersion value for Sync Client Details.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.SyncDeviceExtensions.DeviceIdValueKey">
            <summary>
            The key for the DeviceId value for Sync Client Details.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.SyncDeviceExtensions.DevicePlatformValueKey">
            <summary>
            The key for the DevicePlatform value for Sync Client Details.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.SyncDeviceExtensions.DeviceTypeValueKey">
            <summary>
            The key for the DeviceType value for Sync Client Details.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.AddOrUpdateSyncClientDetails(System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Primitives.StringValues},Speedy.Sync.ISyncClientDetails)">
            <summary>
            Update the sync options with the provided sync client details.
            </summary>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="clientDetails"> The client details to use. </param>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.AddOrUpdateSyncClientDetails(System.Collections.Generic.IDictionary{System.String,System.String},Speedy.Sync.ISyncClientDetails)">
            <summary>
            Update the sync options with the provided sync client details.
            </summary>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="clientDetails"> The client details to use. </param>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.AddOrUpdateSyncClientDetails(Speedy.Sync.SyncOptions,Speedy.Sync.ISyncClientDetails)">
            <summary>
            Update the sync options with the provided sync client details.
            </summary>
            <param name="syncOptions"> The options to update. </param>
            <param name="clientDetails"> The client details to use. </param>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.Load(Speedy.Sync.ISyncClientDetails,Speedy.Sync.SyncOptions)">
            <summary>
            Load the sync client details into the provided sync options.
            </summary>
            <param name="device"> The device to load options into. </param>
            <param name="syncOptions"> The options to load. </param>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.Load(Speedy.Sync.ISyncClientDetails,System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
            Load the sync client details into the provided sync options.
            </summary>
            <param name="device"> The device to load options into. </param>
            <param name="values"> The values to load. </param>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.Load(Speedy.Sync.ISyncClientDetails,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Load the sync client details from the provided dictionary.
            </summary>
            <param name="device"> The device to load options into. </param>
            <param name="values"> The values to load. </param>
        </member>
        <member name="M:Speedy.Extensions.SyncDeviceExtensions.Validate(Speedy.Sync.ISyncClientDetails)">
            <summary>
            Validate that all the sync client details are available.
            </summary>
            <param name="device"> The device to load options into. </param>
        </member>
        <member name="T:Speedy.Extensions.SyncObjectExtensions">
            <summary>
            Extensions for sync object.
            </summary>
        </member>
        <member name="P:Speedy.Extensions.SyncObjectExtensions.Empty">
            <summary>
            Represents an empty sync object.
            </summary>
        </member>
        <member name="T:Speedy.Extensions.TaskExtensions">
            <summary>
            Extensions for Task
            </summary>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.AwaitResults(System.Threading.Tasks.Task)">
            <summary>
            Synchronously await the results of an asynchronous operation without deadlocking.
            </summary>
            <param name="task"> The <see cref="T:System.Threading.Tasks.Task" /> representing the pending operation. </param>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.AwaitResults``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Synchronously await the results of an asynchronous operation without deadlocking.
            </summary>
            <typeparam name="T"> The result type of the operation. </typeparam>
            <param name="task"> The <see cref="T:System.Threading.Tasks.Task" /> representing the pending operation. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.AwaitResults``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Synchronously await the results of an asynchronous operation without deadlocking.
            </summary>
            <typeparam name="T"> The result type of the operation. </typeparam>
            <param name="task"> The <see cref="T:System.Threading.Tasks.Task" /> representing the pending operation. </param>
            <param name="timeout"> The timeout if the task does not complete. </param>
            <returns> The result of the operation. </returns>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.IsCompleted(System.Threading.Tasks.Task)">
            <summary>
            Determine if a task has started and is completed.
            </summary>
            <param name="task"> The task to check. </param>
            <returns> True if the task is Cancelled, Faulted, or RanToCompletion otherwise false. </returns>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Timeout after some amount time.
            </summary>
            <typeparam name="TResult"> The type for the result. </typeparam>
            <param name="task"> The task to wait for. </param>
            <param name="timeout"> The maximum about of time to wait for. </param>
            <returns> The task with the result after waiting. </returns>
            <exception cref="T:System.TimeoutException"> </exception>
        </member>
        <member name="T:Speedy.Extensions.TrackerExtensions">
            <summary>
            Extensions for tracker profiler
            </summary>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.AddOrUpdate(System.Collections.Generic.ICollection{Speedy.Profiling.TrackerPathValue},System.String,System.Object)">
            <summary>
            Add or update the collection with the event value.
            </summary>
            <param name="collection"> The collection to update. </param>
            <param name="name"> The event name to add or update. </param>
            <param name="value"> The event value to add or update. </param>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.AddOrUpdate(System.Collections.Generic.ICollection{Speedy.Profiling.TrackerPathValue},Speedy.Profiling.TrackerPathValue)">
            <summary>
            Add or update the collection with the event value.
            </summary>
            <param name="collection"> The collection to update. </param>
            <param name="pathValue"> The event value to add or update. </param>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.AddOrUpdate(System.Collections.Generic.ICollection{Speedy.Profiling.TrackerPathValue},Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds or updates the item in the collection.
            </summary>
            <param name="collection"> The collection to be updated. </param>
            <param name="items"> The items to be added or updated. </param>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.OpenRepository(Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath},Speedy.Profiling.TrackerPath)">
            <summary>
            Creates a repository and writes the first session event.
            </summary>
            <param name="provider"> The provider to start a new repository on. </param>
            <param name="session"> The session event to start the repository with. </param>
            <returns> The repository containing the session event. </returns>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.WriteAndSave(Speedy.Storage.KeyValue.IKeyValueRepository{Speedy.Profiling.TrackerPath},Speedy.Profiling.TrackerPath)">
            <summary>
            Write the event to the repository and save it.
            </summary>
            <param name="repository"> The repository to write to. </param>
            <param name="value"> The event to be written to the repository. </param>
        </member>
        <member name="T:Speedy.Extensions.TypeExtensions">
            <summary>
            Extensions for the Type object.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determine if the provided type is an IEnumerable type.
            </summary>
            <param name="type"> The type to be checked. </param>
            <returns> Returns true if the type is an IEnumerable false otherwise. </returns>
            <remarks> Ignores the following types "string". </remarks>
        </member>
        <member name="M:Speedy.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines if a type is nullable.
            </summary>
            <param name="type"> The type to be tested. </param>
            <returns> True if the type is nullable otherwise false. </returns>
        </member>
        <member name="M:Speedy.Extensions.TypeExtensions.IsSubClassOfGeneric(System.Type,System.Type)">
            <summary>
            Determines if the child is a subclass of the parent.
            </summary>
            <param name="child"> The type to be tested. </param>
            <param name="parent"> The type of the parent. </param>
            <returns> True if the child implements the parent otherwise false. </returns>
        </member>
        <member name="T:Speedy.Extensions.UpdatableExtensions">
            <summary>
            Extensions for the IUpdatable interface
            </summary>
        </member>
        <member name="M:Speedy.Extensions.UpdatableExtensions.TryUpdateWith``1(Speedy.IUpdatable{``0},``0,System.String[])">
            <summary>
            Try to apply an update to the provided value.
            </summary>
            <typeparam name="T"> The type of the update. </typeparam>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional list of members to exclude during updating. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.Extensions.UpdatableExtensions.TryUpdateWith(Speedy.IUpdatable,System.Object,System.String[])">
            <summary>
            Try to apply an update to the provided value.
            </summary>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional list of members to exclude during updating. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.Extensions.UpdatableExtensions.UpdateWithUsingReflection``2(``0,``1,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <typeparam name="T"> The type to be updated. </typeparam>
            <typeparam name="T2"> The source type of the provided update. </typeparam>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The source of the updates. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="T:Speedy.Extensions.UtilityExtensions">
            <summary>
            General utility extensions
            </summary>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.IfThen``1(``0,System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Runs action if the test is true.
            </summary>
            <param name="item"> The item to process. (does nothing) </param>
            <param name="test"> The test to validate. </param>
            <param name="action"> The action to run if test is true. </param>
            <typeparam name="T"> The type the function returns </typeparam>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.IfThenElse``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0})">
            <summary>
            Runs action1 if the test is true or action2 if false.
            </summary>
            <param name="item"> The item to process. (does nothing) </param>
            <param name="test"> The test to validate. </param>
            <param name="action1"> The action to run if test is true. </param>
            <param name="action2"> The action to run if test is false. </param>
            <typeparam name="T"> The type the function returns </typeparam>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Retry``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            Continues to run the action until we hit the timeout. If an exception occurs then delay for the
            provided delay time.
            </summary>
            <typeparam name="T"> The type for this retry. </typeparam>
            <param name="action"> The action to attempt to retry. </param>
            <param name="timeout"> The timeout to stop retrying. </param>
            <param name="delay"> The delay between retries. </param>
            <returns> The response from the action. </returns>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Retry(System.Action,System.Int32,System.Int32)">
            <summary>
            Continues to run the action until we hit the timeout. If an exception occurs then delay for the
            provided delay time.
            </summary>
            <param name="action"> The action to attempt to retry. </param>
            <param name="timeout"> The timeout to stop retrying. </param>
            <param name="delay"> The delay between retries. </param>
            <returns> The response from the action. </returns>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Wait(System.Func{System.Boolean},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Runs the action until the action returns true or the timeout is reached. Will delay in between actions of the provided
            time.
            </summary>
            <param name="action"> The action to call. </param>
            <param name="timeout"> The timeout to attempt the action. This value is in milliseconds. </param>
            <param name="delay"> The delay in between actions. This value is in milliseconds. </param>
            <param name="useTimeService"> An optional flag to use the TimeService instead of DateTime. Defaults to false to use DateTime. </param>
            <returns> Returns true of the call completed successfully or false if it timed out. </returns>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Wait(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Wait for a cancellation or for the value to time out.
            </summary>
            <param name="cancellationPending"> A check for cancellation. </param>
            <param name="value"> The value of time to wait for. </param>
            <param name="delay"> The delay between checks. </param>
            <param name="minimum"> The minimal time to wait. </param>
            <param name="maximum"> The maximum time to wait. </param>
            <param name="useTimeService"> An optional flag to use the TimeService instead of DateTime. Defaults to false to use DateTime. </param>
            <returns> True if the wait was completed, false if the wait was cancelled. </returns>
        </member>
        <member name="T:Speedy.Extensions.VersionExtensions">
            <summary>
            Extensions for Version
            </summary>
        </member>
        <member name="M:Speedy.Extensions.VersionExtensions.IsDefault(System.Version)">
            <summary>
            Checks to see if version is default (not set). Ex. 0.0.0.0
            </summary>
            <param name="version"> The version to check. </param>
            <returns> True if the version is the default value of 0.0.0.0. </returns>
        </member>
        <member name="T:Speedy.IBindable`1">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="T:Speedy.IBindable">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.IBindable.GetDispatcher">
            <summary>
            Get the current dispatcher in use.
            </summary>
            <returns>
            The dispatcher that is currently being used. Null if no dispatcher is assigned.
            </returns>
        </member>
        <member name="M:Speedy.IBindable.IsChangeNotificationsPaused">
            <summary>
            Return true if the change notifications are paused or otherwise false.
            </summary>
        </member>
        <member name="M:Speedy.IBindable.OnPropertyChanged(System.String)">
            <summary>
            Indicates the property has changed on the bindable object.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="M:Speedy.IBindable.PausePropertyChangeNotifications(System.Boolean)">
            <summary>
            Pause / Un-pause the property change notifications
            </summary>
        </member>
        <member name="M:Speedy.IBindable.UpdateDispatcher(Speedy.IDispatcher)">
            <summary>
            Updates the entity for this entity.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="T:Speedy.ICloneable`1">
            <summary>
            Represents a cloneable item.
            </summary>
        </member>
        <member name="M:Speedy.ICloneable`1.DeepClone(System.Nullable{System.Int32})">
            <summary>
            Deep clone the item with child relationships. Default level is -1 which means clone full hierarchy of children.
            </summary>
            <param name="maxDepth"> The max depth to clone. Defaults to null. </param>
            <returns> The cloned objects. </returns>
        </member>
        <member name="M:Speedy.ICloneable`1.ShallowClone">
            <summary>
            Shallow clone the item. No child items are cloned.
            </summary>
            <returns> The cloned objects. </returns>
        </member>
        <member name="T:Speedy.ICloneable">
            <summary>
            Represents a cloneable item.
            </summary>
        </member>
        <member name="M:Speedy.ICloneable.DeepClone(System.Nullable{System.Int32})">
            <summary>
            Deep clone the item with child relationships. Default level is -1 which means clone full hierarchy of children.
            </summary>
            <param name="maxDepth"> The max depth to clone. Defaults to null. </param>
            <returns> The cloned objects. </returns>
        </member>
        <member name="M:Speedy.ICloneable.ShallowClone">
            <summary>
            Shallow clone the item. No child items are cloned.
            </summary>
            <returns> The cloned objects. </returns>
        </member>
        <member name="T:Speedy.Comparer`1">
            <summary>
            Represents a comparer for a type.
            </summary>
            <typeparam name="T"> The type to be compared. </typeparam>
        </member>
        <member name="M:Speedy.Comparer`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of a comparer.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Comparer`1.ShouldUpdate(`0,`0)">
            <inheritdoc cref="M:Speedy.IComparer`3.ShouldUpdate(`0,`1)" />
        </member>
        <member name="M:Speedy.Comparer`1.ShouldUpdate(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Comparer`1.UpdateWith(`0@,`0,System.String[])">
            <inheritdoc cref="M:Speedy.IComparer`3.UpdateWith(`0@,`2,System.String[])" />
        </member>
        <member name="M:Speedy.Comparer`1.UpdateWith(System.Object@,System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Comparer`2">
            <summary>
            Represents a comparer for a type.
            </summary>
            <typeparam name="T"> The type to be compared. </typeparam>
            <typeparam name="T2"> The type of the update. </typeparam>
        </member>
        <member name="M:Speedy.Comparer`2.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of a comparer.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Comparer`2.ShouldUpdate(`0,`1)">
            <inheritdoc cref="M:Speedy.IComparer.ShouldUpdate(System.Object,System.Object)" />
        </member>
        <member name="M:Speedy.Comparer`2.ShouldUpdate(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Comparer`2.UpdateWith(`0@,`1,System.String[])">
            <inheritdoc cref="M:Speedy.IComparer.UpdateWith(System.Object@,System.Object,System.String[])" />
        </member>
        <member name="M:Speedy.Comparer`2.UpdateWith(System.Object@,System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.IComparer`1">
            <summary>
            Represents an interface to compare two instances of a type.
            </summary>
        </member>
        <member name="T:Speedy.IComparer`2">
            <summary>
            Represents an interface to compare two instances of a type.
            </summary>
        </member>
        <member name="T:Speedy.IComparer`3">
            <summary>
            Represents an interface to compare two instances of a type.
            </summary>
        </member>
        <member name="M:Speedy.IComparer`3.ShouldUpdate(`0,`1)">
            <summary>
            Determine if the update should be applied.
            </summary>
            <param name="value"> The value to compare with. </param>
            <param name="update"> The update to be tested. </param>
            <returns> True if the update should be applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IComparer`3.ShouldUpdate(`0,`2)">
            <summary>
            Determine if the update should be applied.
            </summary>
            <param name="value"> The value to compare with. </param>
            <param name="update"> The update to be tested. </param>
            <returns> True if the update should be applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IComparer`3.UpdateWith(`0@,`1,System.String[])">
            <summary>
            Apply the update to the provided value.
            </summary>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IComparer`3.UpdateWith(`0@,`2,System.String[])">
            <summary>
            Apply the update to the provided value.
            </summary>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="T:Speedy.IComparer">
            <summary>
            Represents an interface to compare two instances of a type.
            </summary>
        </member>
        <member name="M:Speedy.IComparer.ShouldUpdate(System.Object,System.Object)">
            <summary>
            Determine if the update should be applied.
            </summary>
            <param name="value"> The value to compare with. </param>
            <param name="update"> The update to be tested. </param>
            <returns> True if the update should be applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IComparer.UpdateWith(System.Object@,System.Object,System.String[])">
            <summary>
            Apply the update to the provided value.
            </summary>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="T:Speedy.IDatabase">
            <summary>
            The interfaces for a Speedy database.
            </summary>
        </member>
        <member name="P:Speedy.IDatabase.IsDisposed">
            <summary>
            Gets a value indicating whether the database has been disposed of.
            </summary>
        </member>
        <member name="P:Speedy.IDatabase.Options">
            <summary>
            Gets the options for this database.
            </summary>
        </member>
        <member name="M:Speedy.IDatabase.Add``2(``0)">
            <summary>
            Adds an entity to the database
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <param name="item"> The item to be added. </param>
            <returns> The entity that was added. </returns>
        </member>
        <member name="M:Speedy.IDatabase.DiscardChanges">
            <summary>
            Discard all changes made in this context to the underlying database.
            </summary>
        </member>
        <member name="M:Speedy.IDatabase.GetMappingAssembly">
            <summary>
            Gets the assembly that contains the entity mappings. Base implementation defaults to the implemented types assembly.
            </summary>
        </member>
        <member name="M:Speedy.IDatabase.GetReadOnlyRepository``2">
            <summary>
            Gets a read only repository of the requested entity.
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="M:Speedy.IDatabase.GetRepository``2">
            <summary>
            Gets a repository of the requested entity.
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="M:Speedy.IDatabase.Remove``2(``0)">
            <summary>
            Removes an entity from the database
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <param name="item"> The item to be removed. </param>
            <returns> The entity that was removed. </returns>
        </member>
        <member name="M:Speedy.IDatabase.SaveChanges">
            <summary>
            Saves all changes made in this context to the underlying database.
            </summary>
            <returns>
            The number of objects written to the underlying database.
            </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if the context has been disposed. </exception>
        </member>
        <member name="E:Speedy.IDatabase.ChangesSaved">
            <summary>
            An event for when changes are saved. <see cref="M:Speedy.IDatabase.SaveChanges" />
            </summary>
        </member>
        <member name="E:Speedy.IDatabase.Disposed">
            <summary>
            An event for when the database has been disposed.
            </summary>
        </member>
        <member name="T:Speedy.IDatabaseProvider`1">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="M:Speedy.IDatabaseProvider`1.BulkProcess(System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <summary>
            Runs a bulk process where the database lifetime is based on the iteration size.
            A database will be instantiated and used for the iteration count. When the iteration
            count is reach the database will be saved and disposed. A new database will be created
            and processing will continue until the total count is reached. Finally the database
            will be saved and disposed.
            </summary>
            <param name="total"> The total amount of items to process. </param>
            <param name="iterationSize"> The iteration size of each process. </param>
            <param name="process"> The action to the process. </param>
        </member>
        <member name="M:Speedy.IDatabaseProvider`1.GetDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.IDatabaseProvider`1.GetDatabase(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.IDatabaseProvider">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="P:Speedy.IDatabaseProvider.Options">
            <summary>
            Gets or sets the options for the database provider.
            </summary>
        </member>
        <member name="M:Speedy.IDatabaseProvider.GetDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.IDatabaseProvider.GetDatabase(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.Dispatcher">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Dispatcher.IsDispatcherThread">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Dispatcher.Run(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Dispatcher.Run``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Dispatcher.RunAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Dispatcher.RunAsync``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Dispatcher.ExecuteOnDispatcher(System.Action)">
            <summary>
            Execute the action on the dispatcher.
            </summary>
            <param name="action"> The action to execute. </param>
        </member>
        <member name="M:Speedy.Dispatcher.ExecuteOnDispatcher``1(System.Func{``0})">
            <summary>
            Execute the action on the dispatcher.
            </summary>
            <param name="action"> The action to execute. </param>
        </member>
        <member name="M:Speedy.Dispatcher.ExecuteOnDispatcherAsync(System.Action)">
            <summary>
            Execute the action on the dispatcher.
            </summary>
            <param name="action"> The action to execute. </param>
        </member>
        <member name="M:Speedy.Dispatcher.ExecuteOnDispatcherAsync``1(System.Func{``0})">
            <summary>
            Execute the action on the dispatcher.
            </summary>
            <param name="action"> The action to execute. </param>
        </member>
        <member name="T:Speedy.IDispatcher">
            <summary>
            Represents a dispatcher to help with handling dispatcher thread access.
            </summary>
        </member>
        <member name="P:Speedy.IDispatcher.IsDispatcherThread">
            <summary>
            Returns true if currently executing on the dispatcher thread.
            </summary>
        </member>
        <member name="M:Speedy.IDispatcher.Run(System.Action)">
            <summary>
            Run an action on the dispatching thread.
            </summary>
            <param name="action"> The action to be executed. </param>
        </member>
        <member name="M:Speedy.IDispatcher.Run``1(System.Func{``0})">
            <summary>
            Run an action on the dispatching thread.
            </summary>
            <param name="action"> The action to be executed. </param>
        </member>
        <member name="M:Speedy.IDispatcher.RunAsync(System.Action)">
            <summary>
            Run an asynchronous action on the dispatching thread.
            </summary>
            <param name="action"> The action to be executed. </param>
            <returns> The task. </returns>
        </member>
        <member name="M:Speedy.IDispatcher.RunAsync``1(System.Func{``0})">
            <summary>
            Run an asynchronous action on the dispatching thread.
            </summary>
            <param name="action"> The action to be executed. </param>
            <returns> The task. </returns>
        </member>
        <member name="T:Speedy.IIncludableQueryable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="T"> The entity type. </typeparam>
            <typeparam name="T2"> The type of the related entity to be included. </typeparam>
        </member>
        <member name="M:Speedy.IIncludableQueryable`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the query to include related entities in the results.
            </summary>
            <param name="include"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IIncludableQueryable`2.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Process the ThenInclude on an entity collection.
            </summary>
            <typeparam name="TPreviousProperty"> The previous property type of the related entity to be included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="include"> A lambda expression representing the navigation property to be included (<c> t =&gt; t.Property1 </c>). </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="M:Speedy.IIncludableQueryable`2.ThenInclude``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="include"> A lambda expression representing the navigation property to be included (<c> t =&gt; t.Property1 </c>). </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="T:Speedy.IncludableQueryable`2">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            Instantiate an instance of the IncludableQueryable
            </summary>
            <param name="query"> </param>
        </member>
        <member name="P:Speedy.IncludableQueryable`2.ElementType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.IncludableQueryable`2.Expression">
            <inheritdoc />
        </member>
        <member name="P:Speedy.IncludableQueryable`2.Provider">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.ThenInclude``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Speedy.IRepository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type of the entity of the collection. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.IRepository`2.Add(`0)">
            <summary>
            Add an entity to the repository. The ID of the entity must be the default value.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.IRepository`2.AddOrUpdate(`0)">
            <summary>
            Adds or updates an entity in the repository. The ID of the entity must be the default value to add and a value to
            update.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAdd(`0[])">
            <summary>
            Bulk add to do more performant additions.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAdd(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk add to do more performant additions.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAddOrUpdate(`0[])">
            <summary>
            Bulk command to do more performant additions and / or updates.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk command to do more performant additions and / or updates.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkRemove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Bulk remove based on provided filter. Only simple expressions are supported.
            </summary>
            <param name="filter"> The filter for the items to be removed. </param>
            <remarks>
            Please let me know if you find an expression that does not work.
            </remarks>
        </member>
        <member name="M:Speedy.IRepository`2.BulkUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Bulk update base on provided query and update expression. Only simple expressions are supported.
            </summary>
            <param name="filter"> The filter for the items to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <remarks>
            Please let me know if you find an expression that does not work.
            </remarks>
        </member>
        <member name="M:Speedy.IRepository`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the query to include related entities in the results.
            </summary>
            <param name="include"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IRepository`2.Including(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Configures the query to include multiple related entities in the results.
            </summary>
            <param name="includes"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IRepository`2.Including``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
            Configures the query to include multiple related entities in the results.
            </summary>
            <param name="includes"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IRepository`2.Remove(`1)">
            <summary>
            Removes an entity from the repository.
            </summary>
            <param name="id"> The ID of the entity to remove. </param>
        </member>
        <member name="M:Speedy.IRepository`2.Remove(`0)">
            <summary>
            Removes an entity from the repository.
            </summary>
            <param name="entity"> The entity to remove. </param>
        </member>
        <member name="M:Speedy.IRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Removes a set of entities from the repository.
            </summary>
            <param name="filter"> The filter of the entities to remove. </param>
        </member>
        <member name="T:Speedy.IsoDateTime">
            <summary>
            Represents a full ISO-8601 date time with duration support.
            </summary>
        </member>
        <member name="P:Speedy.IsoDateTime.DateTime">
            <summary>
            The date and time.
            </summary>
        </member>
        <member name="P:Speedy.IsoDateTime.Duration">
            <summary>
            The duration of this date time.
            </summary>
            <remarks>
            https://www.w3.org/TR/xmlschema-2/#duration
            </remarks>
        </member>
        <member name="P:Speedy.IsoDateTime.ExpiresOn">
            <summary>
            When this date time expires on.
            </summary>
        </member>
        <member name="P:Speedy.IsoDateTime.IsExpired">
            <summary>
            True if the date time has expired.
            </summary>
        </member>
        <member name="M:Speedy.IsoDateTime.CompareTo(Speedy.IsoDateTime)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IsoDateTime.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IsoDateTime.Equals(Speedy.IsoDateTime)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IsoDateTime.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IsoDateTime.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IsoDateTime.op_Equality(Speedy.IsoDateTime,Speedy.IsoDateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:Speedy.IsoDateTime"> </see> are equal.
            </summary>
            <param name="d1"> The first object to compare. </param>
            <param name="d2"> The second object to compare. </param>
            <returns> True if they are equal otherwise false. </returns>
        </member>
        <member name="M:Speedy.IsoDateTime.op_Implicit(Speedy.IsoDateTime)~System.DateTime">
            <summary>
            Converts an IsoDateTime to a DateTime format only using the DateTime value.
            </summary>
            <param name="isoDateTime"> The ISO date time to convert. </param>
        </member>
        <member name="M:Speedy.IsoDateTime.op_Implicit(Speedy.IsoDateTime)~System.TimeSpan">
            <summary>
            Converts an IsoDateTime to a TimeSpan format only using the Duration value.
            </summary>
            <param name="isoDateTime"> The ISO date time to convert. </param>
        </member>
        <member name="M:Speedy.IsoDateTime.op_Implicit(System.DateTime)~Speedy.IsoDateTime">
            <summary>
            Implicit operator from DateTime to IsoDateTime with Zero duration.
            </summary>
            <param name="value"> The DateTime value to cast. </param>
        </member>
        <member name="M:Speedy.IsoDateTime.op_Inequality(Speedy.IsoDateTime,Speedy.IsoDateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:Speedy.IsoDateTime"> </see> are not equal.
            </summary>
            <param name="d1"> The first object to compare. </param>
            <param name="d2"> The second object to compare. </param>
            <returns> True if they are not equal otherwise false. </returns>
        </member>
        <member name="M:Speedy.IsoDateTime.Parse(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Parse a string into an IsoDateTime value.
            </summary>
            <param name="data"> The data to parse. </param>
            <param name="style"> The style to return the date time value in. Defaults to AdjustToUniversal, AssumeUniversal. </param>
            <returns> The data in a IsoDateTime format. </returns>
            <exception cref="T:System.ArgumentNullException"> Throws if the data value is null. </exception>
        </member>
        <member name="M:Speedy.IsoDateTime.ParseDuration(System.DateTime,System.String)">
            <summary>
            Parse the duration string (ex. P1Y2M3DT1H2M3.245S) into a TimeSpan value.
            </summary>
            <param name="start"> The date and time the duration starts. </param>
            <param name="duration"> The duration string. </param>
            <returns> The timespan that represents the duration. </returns>
        </member>
        <member name="M:Speedy.IsoDateTime.ToDuration(System.DateTime,System.TimeSpan)">
            <summary>
            Calculate the ISO-8601 duration.
            </summary>
            <param name="startDate"> The date to start from. </param>
            <param name="duration"> The timespan for the duration. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.IsoDateTime.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.ISyncableDatabase">
            <summary>
            The interfaces for a Speedy syncable database.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableDatabase.KeyCache">
            <summary>
            An optional key manager for caching entity IDs (primary and sync).
            </summary>
        </member>
        <member name="M:Speedy.ISyncableDatabase.GetSyncableRepositories(Speedy.Sync.SyncOptions)">
            <summary>
            Gets a list of syncable repositories.
            </summary>
            <returns> The list of syncable repositories. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabase.GetSyncableRepository``2">
            <summary>
            Gets a syncable repository of the requested entity.
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabase.GetSyncableRepository(System.Type)">
            <summary>
            Gets a syncable repository of the requested entity.
            </summary>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="T:Speedy.ISyncableDatabaseProvider`1">
            <summary>
            Represents a database provider for syncable databases that is also a normal database provider.
            </summary>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider`1.GetSyncableDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider`1.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.ISyncableDatabaseProvider">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableDatabaseProvider.KeyCache">
            <summary>
            An optional key manager for tracking entity IDs (primary and sync).
            </summary>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider.GetSyncableDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.ISyncableRepository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type of the entity of the collection. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.ISyncableRepository`2.ReadByPrimaryId(`1)">
            <summary>
            Gets the sync entity by the primary ID.
            </summary>
            <param name="primaryId"> The primary ID of the sync entity. </param>
            <returns> The sync entity or null. </returns>
        </member>
        <member name="T:Speedy.ISyncableRepository">
            <summary>
            Represents a syncable repository.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableRepository.RealType">
            <summary>
            The type this repository is for.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableRepository.TypeName">
            <summary>
            The type name this repository is for. Will be in assembly name format.
            </summary>
        </member>
        <member name="M:Speedy.ISyncableRepository.Add(Speedy.Sync.ISyncEntity)">
            <summary>
            Adds a sync entity to the repository.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.ISyncableRepository.GetChangeCount(System.DateTime,System.DateTime,Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Gets the count of changes from the repository.
            </summary>
            <param name="since"> The start date and time get changes for. </param>
            <param name="until"> The end date and time get changes for. </param>
            <param name="filter"> The optional filter expression to filter changes. </param>
            <returns> The count of changes from the repository. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.GetChanges(System.DateTime,System.DateTime,System.Int32,System.Int32,Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Gets the changes from the repository. The results are read only and will not have tracking enabled.
            </summary>
            <param name="since"> The start date and time get changes for. </param>
            <param name="until"> The end date and time get changes for. </param>
            <param name="skip"> The number of items to skip. </param>
            <param name="take"> The number of items to take. </param>
            <param name="filter"> The optional filter expression to filter changes. </param>
            <returns> The list of changes from the repository. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.Read(System.Guid)">
            <summary>
            Gets the sync entity by the ID.
            </summary>
            <param name="syncId"> The ID of the sync entity. </param>
            <returns> The sync entity or null. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.Read(Speedy.Sync.ISyncEntity,Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Gets the sync entity by the ID.
            </summary>
            <param name="entity"> The entity to use with the filter. </param>
            <param name="filter"> An optional sync filter to locate the entity. </param>
            <returns> The sync entity or null. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.ReadAllKeys">
            <summary>
            Read all keys for the repository.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.ReadByPrimaryId(System.Object)">
            <summary>
            Gets the sync entity by the primary ID.
            </summary>
            <param name="primaryId"> The primary ID of the sync entity. </param>
            <returns> The sync entity or null. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.Remove(Speedy.Sync.ISyncEntity)">
            <summary>
            Removes a sync entity to the repository.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="T:Speedy.IUnwrappable">
            <summary>
            Represents an unwrappable entity
            </summary>
        </member>
        <member name="M:Speedy.IUnwrappable.Unwrap">
            <summary>
            Unwraps an object from the object proxy.
            </summary>
            <returns> The unwrapped entity. </returns>
        </member>
        <member name="T:Speedy.IUpdatable`1">
            <summary>
            Represents an updatable item
            </summary>
            <typeparam name="T"> The type that is update is for. </typeparam>
        </member>
        <member name="M:Speedy.IUpdatable`1.ShouldUpdate(`0)">
            <summary>
            Determine if the update should be applied.
            </summary>
            <param name="update"> The update to be tested. </param>
            <returns> True if the update should be applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IUpdatable`1.TryUpdateWith(`0,System.String[])">
            <summary>
            Determine if the update should be applied then applies it if so else do nothing.
            </summary>
            <param name="update"> The update to be tested. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IUpdatable`1.UpdateWith(`0,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="T:Speedy.IUpdatable">
            <summary>
            Represents an updatable item
            </summary>
        </member>
        <member name="M:Speedy.IUpdatable.ShouldUpdate(System.Object)">
            <summary>
            Determine if the update should be applied.
            </summary>
            <param name="update"> The update to be tested. </param>
            <returns> True if the update should be applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IUpdatable.TryUpdateWith(System.Object,System.String[])">
            <summary>
            Determine if the update should be applied then applies it if so else do nothing.
            </summary>
            <param name="update"> The update to be tested. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
            <returns> True if the update was applied otherwise false. </returns>
        </member>
        <member name="M:Speedy.IUpdatable.UpdateWith(System.Object,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="M:Speedy.IUpdatable.UpdateWith(System.Object,System.Boolean,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="excludeVirtuals"> An optional value to exclude virtual members. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="T:Speedy.Logging.LogEventArgs">
            <summary>
            Represents a log event argument.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogEventArgs.#ctor">
            <summary>
            Instantiates a log event argument.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogEventArgs.#ctor(System.String)">
            <summary>
            Instantiates a log event argument.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogEventArgs.#ctor(System.Diagnostics.Tracing.EventLevel,System.String)">
            <summary>
            Instantiates a log event argument.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogEventArgs.#ctor(System.DateTime,System.Diagnostics.Tracing.EventLevel,System.String)">
            <summary>
            Instantiates a log event argument.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogEventArgs.DateTime">
            <summary>
            The date time of the event args.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogEventArgs.Level">
            <summary>
            The level of the event.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogEventArgs.Message">
            <summary>
            The message for the event.
            </summary>
        </member>
        <member name="T:Speedy.Logging.Logger">
            <summary>
            Represents a logger for Speedy.
            </summary>
        </member>
        <member name="F:Speedy.Logging.Logger.LoggerGuid">
            <summary>
            The GUID for the logger.
            </summary>
        </member>
        <member name="F:Speedy.Logging.Logger.LoggerName">
            <summary>
            The Name for the logger.
            </summary>
        </member>
        <member name="P:Speedy.Logging.Logger.Instance">
            <summary>
            Gets the global instance of the logger.
            </summary>
        </member>
        <member name="M:Speedy.Logging.Logger.Write(System.Guid,System.String,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="sessionId"> The ID of the session this message is for. </param>
            <param name="message"> The message to be written. </param>
            <param name="level"> The level of this message. </param>
        </member>
        <member name="T:Speedy.Logging.LogListener">
            <summary>
            Represents an example on how to listen to the logger.
            </summary>
            <remarks>
            LogListener must be in the same process as the logger. See other ETW examples on how
            to capture logger from outside the process.
            </remarks>
        </member>
        <member name="M:Speedy.Logging.LogListener.#ctor(System.Guid,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Instantiates an instance of the log listener.
            </summary>
            <param name="sessionId"> The session of the log to monitor. </param>
            <param name="level"> The level in which to log. </param>
        </member>
        <member name="P:Speedy.Logging.LogListener.IsListening">
            <summary>
            The log listener is listening.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.Level">
            <summary>
            The level in which to log.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.OnlyEventsWithMessages">
            <summary>
            Flag to capture only events with messages
            </summary>
            <remarks>
            Defaults to true so only events with a message will be captured.
            </remarks>
        </member>
        <member name="P:Speedy.Logging.LogListener.OutputToConsole">
            <summary>
            Flag to write incoming events to the console.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.SessionId">
            <summary>
            The ID of the session.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogListener.CreateSession(System.Guid,System.Diagnostics.Tracing.EventLevel,System.Action{Speedy.Logging.LogListener})">
            <summary>
            Create an instance of the log listener and start listening.
            </summary>
            <param name="sessionId"> The session of the log to monitor. </param>
            <param name="level"> The level in which to log. </param>
            <param name="initialize"> An optional initialize action. </param>
        </member>
        <member name="M:Speedy.Logging.LogListener.Start">
            <summary>
            Start listening for log events.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogListener.Stop">
            <summary>
            Start listening for log events.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogListener.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> True if disposing and false if otherwise. </param>
        </member>
        <member name="M:Speedy.Logging.LogListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Logging.LogListener.OnPropertyChanged(System.String)">
            <summary>
            Notified when a property changed.
            </summary>
            <param name="propertyName"> The name of the property that has changed. </param>
        </member>
        <member name="E:Speedy.Logging.LogListener.EventWritten">
            <summary>
            Occurs when an event is written.
            </summary>
        </member>
        <member name="E:Speedy.Logging.LogListener.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Logging.MemoryLogListener">
            <summary>
            Log listener that will keep a history of events.
            </summary>
        </member>
        <member name="P:Speedy.Logging.MemoryLogListener.Events">
            <summary>
            The events that have been captured from the event source (logger).
            </summary>
        </member>
        <member name="M:Speedy.Logging.MemoryLogListener.CreateSession(System.Guid,System.Diagnostics.Tracing.EventLevel,System.Action{Speedy.Logging.LogListener})">
            <summary>
            Create an instance of the log listener and start listening.
            </summary>
            <param name="sessionId"> The session of the log to monitor. </param>
            <param name="level"> The level in which to log. </param>
            <param name="initialize"> An optional initialize action. </param>
        </member>
        <member name="M:Speedy.Logging.MemoryLogListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.ModifiableEntity`1">
            <summary>
            Represents a modifiable entity.
            </summary>
            <typeparam name="T"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.ModifiableEntity`1.ModifiedOn">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.Credential">
            <summary>
            Represents a credential for a client.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.#ctor">
            <summary>
            Creates an instance of the credential.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of the credential.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Net.Credential.#ctor(System.String,System.String,Speedy.IDispatcher)">
            <summary>
            Creates an instance of the credential.
            </summary>
            <param name="username"> The username of the credential. </param>
            <param name="password"> The password of the credential. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Net.Credential.Password">
            <summary>
            Represents the password for the credential.
            </summary>
        </member>
        <member name="P:Speedy.Net.Credential.SecurePassword">
            <summary>
            Represents the secure password for the credential.
            </summary>
        </member>
        <member name="P:Speedy.Net.Credential.UserName">
            <summary>
            Represents the user name for the credential.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.FromAuthenticationHeaderValue(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Gets the credential from an authentication header value.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.GetAuthenticationHeaderValue">
            <summary>
            Gets the credential as an authentication header value.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.HasCredentials">
            <summary>
            Determines if the credentials have been provided.
            </summary>
            <returns> Returns true if both UserName and Password both is not null or whitespace. </returns>
        </member>
        <member name="M:Speedy.Net.Credential.Load(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Load the credential from an authentication header value.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.Reset">
            <summary>
            Reset the credential.
            </summary>
        </member>
        <member name="M:Speedy.Net.Credential.ShouldUpdate(Speedy.Net.Credential)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.Credential.TryUpdateWith(Speedy.Net.Credential,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.Credential.UpdateWith(Speedy.Net.Credential,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.Credential.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.FileDownloader">
            <summary>
            Used to download files from web servers.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.BytesReceived">
            <summary>
            The amount of data received.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.CurrentSpeed">
            <summary>
            The calculated current speed.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.ExistingLength">
            <summary>
            Existing length in the case of resuming download.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.IsBusy">
            <summary>
            Determines if a download is in progress.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.ProgressPercentage">
            <summary>
            The percent of progress.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.TimeLeft">
            <summary>
            The calculated time left.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloader.TotalBytesToReceive">
            <summary>
            The total bytes to receive.
            </summary>
        </member>
        <member name="M:Speedy.Net.FileDownloader.Cancel">
            <summary>
            Cancels the download.
            </summary>
        </member>
        <member name="M:Speedy.Net.FileDownloader.Download(System.String,System.String,System.Boolean,System.Action,System.Func{System.Boolean})">
            <summary>
            </summary>
            <param name="remoteUri"> The remote URI of the file. </param>
            <param name="localFilePath"> The local file path. </param>
            <param name="force"> The option to force to overwrite local file. </param>
            <param name="progressChanged"> Called when the file download progress changes. </param>
            <param name="cancellationCheck"> Called to check to see if download should be cancelled. </param>
            <returns> The file downloaded completed details. </returns>
        </member>
        <member name="M:Speedy.Net.FileDownloader.StartDownload(System.String,System.String,System.Boolean)">
            <summary>
            Start a file download.
            </summary>
            <param name="remoteUri"> The remote URI of the file. </param>
            <param name="localFilePath"> The local file path. </param>
            <param name="force"> Optional force to overwrite local file. </param>
        </member>
        <member name="M:Speedy.Net.FileDownloader.OnCompleted(Speedy.Net.FileDownloaderCompletedEventArgs)">
            <summary>
            Called when the file download is completed.
            </summary>
            <param name="args"> The file downloaded completed details. </param>
        </member>
        <member name="M:Speedy.Net.FileDownloader.OnProgressChanged">
            <summary>
            Called when the file download progress changes.
            </summary>
        </member>
        <member name="E:Speedy.Net.FileDownloader.Completed">
            <summary>
            Event for when the file download is completed.
            </summary>
        </member>
        <member name="E:Speedy.Net.FileDownloader.ProgressChanged">
            <summary>
            Event for when the file download progress changes.
            </summary>
        </member>
        <member name="T:Speedy.Net.FileDownloaderCompletedEventArgs">
            <summary>
            Represents the state of a downloaded file.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloaderCompletedEventArgs.Cancelled">
            <summary>
            True if the download was cancelled.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloaderCompletedEventArgs.ErrorMessage">
            <summary>
            An optional error message if there was an error.
            </summary>
        </member>
        <member name="P:Speedy.Net.FileDownloaderCompletedEventArgs.HasError">
            <summary>
            True if the file was incomplete due to an error.
            </summary>
        </member>
        <member name="T:Speedy.Net.HttpClientFactory">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.HttpClientFactory.CreateClient(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.IWebClient">
            <summary>
            Represents a web client contract.
            </summary>
        </member>
        <member name="P:Speedy.Net.IWebClient.BaseUri">
            <summary>
            Gets the base URI for connecting.
            </summary>
        </member>
        <member name="P:Speedy.Net.IWebClient.Credential">
            <summary>
            The credentials for the connection.
            </summary>
        </member>
        <member name="P:Speedy.Net.IWebClient.Headers">
            <summary>
            Headers for this client.
            </summary>
        </member>
        <member name="P:Speedy.Net.IWebClient.Proxy">
            <summary>
            Gets or sets an optional proxy for the connection.
            </summary>
        </member>
        <member name="P:Speedy.Net.IWebClient.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before the request times out. The default value is 100 seconds.
            </summary>
        </member>
        <member name="P:Speedy.Net.IWebClient.UseRawJson">
            <summary>
            Use raw json with out tracking references.
            </summary>
        </member>
        <member name="M:Speedy.Net.IWebClient.Delete(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Delete request
            </summary>
            <param name="uri"> The URI to use. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Deserialize``1(System.Net.Http.HttpResponseMessage,System.Nullable{System.TimeSpan})">
            <summary>
            Deserialize the response.
            </summary>
            <typeparam name="T"> The type to deserialize into. </typeparam>
            <param name="result"> The result to deserialize. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The deserialized type. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Get``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Gets a response and deserialize it.
            </summary>
            <typeparam name="T"> The type to deserialize into. </typeparam>
            <param name="uri"> The URI of the content to deserialize. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The deserialized type. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Get(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Gets a response and deserialize it.
            </summary>
            <param name="uri"> The URI of the content to deserialize. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Initialize">
            <summary>
            Initialize the web client.
            </summary>
        </member>
        <member name="M:Speedy.Net.IWebClient.Patch``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Patch an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to patch to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Post``2(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <typeparam name="TResult"> The type to respond with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The server result. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Post``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Post(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Put``2(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Put an item on the server with the provide content.
            </summary>
            <param name="uri"> The URI to put to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Put``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Put (update) an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.IWebClient.Reset">
            <summary>
            Reset the web client.
            </summary>
        </member>
        <member name="T:Speedy.Net.ServiceRequest`1">
            <summary>
            Represents a service request containing a collection.
            </summary>
            <typeparam name="T"> The type of the item collection. </typeparam>
        </member>
        <member name="M:Speedy.Net.ServiceRequest`1.#ctor">
            <summary>
            Instantiates an instance of a service request.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceRequest`1.#ctor(`0[])">
            <summary>
            Instantiates an instance of a service request.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceRequest`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of a service request.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest`1.Collection">
            <summary>
            The collection of items to include in the request.
            </summary>
        </member>
        <member name="T:Speedy.Net.ServiceRequest">
            <summary>
            Represents a service request.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Filters">
            <summary>
            The optional collection of filter values.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Including">
            <summary>
            The values to be include in the results. Defaults to an empty collection.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Options">
            <summary>
            The optional collection of request options.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Skip">
            <summary>
            The number of items to skip.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Take">
            <summary>
            The number of items requested.
            </summary>
        </member>
        <member name="T:Speedy.Net.ServiceResult`1">
            <summary>
            Represents the results for a service request.
            </summary>
            <typeparam name="T"> The type of the items in the results collection. </typeparam>
        </member>
        <member name="M:Speedy.Net.ServiceResult`1.#ctor">
            <summary>
            Instantiates an instance of a request result.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceResult`1.#ctor(`0[])">
            <summary>
            Instantiates an instance of a request result.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of a request result.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.Collection">
            <summary>
            The results for a service request.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.HasMore">
            <summary>
            The value to determine if the request has more pages.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.Skipped">
            <summary>
            The number of items that was skipped to start this result.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.TotalCount">
            <summary>
            The total count of items for the request.
            </summary>
        </member>
        <member name="T:Speedy.Net.TokenCredential">
            <summary>
            Represents a bearer credential for a client.
            </summary>
        </member>
        <member name="M:Speedy.Net.TokenCredential.#ctor">
            <summary>
            Creates an instance of the credential.
            </summary>
        </member>
        <member name="M:Speedy.Net.TokenCredential.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of the credential.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Net.TokenCredential.#ctor(System.String,Speedy.IDispatcher)">
            <summary>
            Creates an instance of the credential.
            </summary>
            <param name="password"> The token of the credential. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Net.TokenCredential.FromAuthenticationHeaderValue(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Gets the credential from an authentication header value.
            </summary>
        </member>
        <member name="M:Speedy.Net.TokenCredential.GetAuthenticationHeaderValue">
            <summary>
            Gets the credential as an authentication header value.
            </summary>
        </member>
        <member name="M:Speedy.Net.TokenCredential.HasCredentials">
            <summary>
            Determines if the credentials have been provided. Token credential only requires a password (aka token).
            </summary>
            <returns> Returns true if the Password is not null or whitespace. </returns>
        </member>
        <member name="M:Speedy.Net.TokenCredential.Load(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.TokenCredential.ShouldUpdate(Speedy.Net.TokenCredential)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.TokenCredential.TryUpdateWith(Speedy.Net.TokenCredential,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.TokenCredential.UpdateWith(Speedy.Net.TokenCredential,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.TokenCredential.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.WebClient">
            <summary>
            This class is used for making GET and POST calls to an HTTP endpoint.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebClient.#ctor(System.String,System.Int32,Speedy.Net.Credential,System.Net.IWebProxy,Speedy.IDispatcher)">
            <summary>
            Initializes a new HTTP helper to point at a specific URI, and with the specified session identifier.
            </summary>
            <param name="baseUri"> The base URI. </param>
            <param name="timeout"> The timeout in milliseconds. </param>
            <param name="credential"> The optional credential to authenticate with. </param>
            <param name="proxy"> The optional proxy to use. </param>
            <param name="dispatcher"> The optional dispatcher to use. </param>
        </member>
        <member name="M:Speedy.Net.WebClient.#ctor(System.Uri,System.TimeSpan,Speedy.Net.Credential,System.Net.IWebProxy,Speedy.IDispatcher)">
            <summary>
            Initializes a new HTTP helper to point at a specific URI, and with the specified session identifier.
            </summary>
            <param name="baseUri"> The base URI. </param>
            <param name="timeout"> The timeout in milliseconds. </param>
            <param name="credential"> The optional credential to authenticate with. </param>
            <param name="proxy"> The optional proxy to use. </param>
            <param name="dispatcher"> The optional dispatcher to use. </param>
        </member>
        <member name="P:Speedy.Net.WebClient.BaseUri">
            <summary>
            Gets the base URI for connecting.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Credential">
            <summary>
            The credentials for the connection.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Headers">
            <summary>
            Headers for this client.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Proxy">
            <summary>
            Gets or sets an optional proxy for the connection.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before the request times out. The default value is 100 seconds.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.UseRawJson">
            <summary>
            Use raw json with out tracking references.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebClient.DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebClient.Delete(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Delete request
            </summary>
            <param name="uri"> The URI to use. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Deserialize``1(System.Net.Http.HttpResponseMessage,System.Nullable{System.TimeSpan})">
            <summary>
            Deserialize the response.
            </summary>
            <typeparam name="T"> The type to deserialize into. </typeparam>
            <param name="result"> The result to deserialize. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The deserialized type. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebClient.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Net.WebClient.Get``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Gets a response and deserialize it.
            </summary>
            <typeparam name="T"> The type to deserialize into. </typeparam>
            <param name="uri"> The URI of the content to deserialize. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The deserialized type. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Get(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Gets a response and deserialize it.
            </summary>
            <param name="uri"> The URI of the content to deserialize. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebClient.OnPropertyChangedInDispatcher(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebClient.Patch``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Patch an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to patch to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Post``2(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <typeparam name="TResult"> The type to respond with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The server result. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Post``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Post(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Put``2(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Put an item on the server with the provide content.
            </summary>
            <param name="uri"> The URI to put to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Put``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Put (update) an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <param name="timeout"> An optional timeout to override the default Timeout value. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Reset">
            <summary>
            Reset the web client.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebClient.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebClient.GetJson(System.Object)">
            <summary>
            Get JSON for the provided object.
            </summary>
            <param name="content"> The content to be converted to JSON format. </param>
            <returns> The JSON formatted content. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.OnServerCertificateCustomValidationCallback(System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validates a server certificate. Defaults to
            </summary>
            <param name="message"> </param>
            <param name="certificate2"> </param>
            <param name="arg3"> </param>
            <param name="arg4"> </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Net.WebClientProvider">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebClientProvider.CreateClient(System.String,System.Func{Speedy.Net.Credential})">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.IWebClientProvider">
            <summary>
            A provider for IWebClients.
            </summary>
        </member>
        <member name="M:Speedy.Net.IWebClientProvider.CreateClient(System.String,System.Func{Speedy.Net.Credential})">
            <summary>
            Get or create a client for a base URi.
            </summary>
            <param name="baseUri"> The URI the client is for. </param>
            <param name="credential"> An optional method to get credential for authorization. </param>
            <returns> The web client. </returns>
        </member>
        <member name="T:Speedy.Net.WebCredential">
            <summary>
            Represents a credential for a web client.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebCredential.#ctor">
            <summary>
            Creates an instance of the web credential.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebCredential.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of the web credential.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Net.WebCredential.#ctor(System.String,System.String,Speedy.IDispatcher)">
            <summary>
            Creates an instance of the web credential.
            </summary>
            <param name="username"> The username of the credential. </param>
            <param name="password"> The password of the credential. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.Net.WebCredential.#ctor(System.String,System.Security.SecureString,Speedy.IDispatcher)">
            <summary>
            Creates an instance of the web credential.
            </summary>
            <param name="username"> The username of the credential. </param>
            <param name="password"> The password of the credential. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Net.WebCredential.RememberMe">
            <summary>
            Gets or sets a flag indicating to remember the user.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebCredential.Reset">
            <summary>
            Reset the web credential.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebCredential.ShouldUpdate(Speedy.Net.WebCredential)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebCredential.TryUpdateWith(Speedy.Net.WebCredential,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebCredential.UpdateWith(Speedy.Net.WebCredential,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebCredential.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.WebHttpHeaders">
            <summary>
            Just a way to create your own headers collection.
            </summary>
        </member>
        <member name="T:Speedy.Net.WebSyncClient">
            <summary>
            Web client for a sync server implemented over Web API.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebSyncClient.#ctor(System.String,Speedy.ISyncableDatabaseProvider,Speedy.Net.IWebClient,System.String)">
            <summary>
            Instantiates an instance of the class.
            </summary>
            <param name="provider"> The database provider for the client </param>
            <param name="name"> The name of the client. </param>
            <param name="webClient"> The client to access the web. </param>
            <param name="syncUri"> The sync URI. Defaults to "api/Sync". </param>
        </member>
        <member name="P:Speedy.Net.WebSyncClient.DatabaseProvider">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.IncomingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Name">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Options">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.OutgoingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Profiler">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Statistics">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.SyncOptions">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.WebClient">
            <summary>
            The web client to use to connect to the server.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebSyncClient.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.EndSync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetDatabase``1">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.WebSyncClientProvider">
            <summary>
            Provides sync provider and some web interfaces.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebSyncClientProvider.#ctor(Speedy.Net.IWebClient,Speedy.ISyncableDatabaseProvider)">
            <summary>
            Create an instance of a provider for a web sync client.
            </summary>
            <param name="client"> The web client to use. </param>
            <param name="provider"> The syncable database provider. </param>
        </member>
        <member name="P:Speedy.Net.WebSyncClientProvider.Client">
            <summary>
            The client for web access.
            </summary>
        </member>
        <member name="T:Speedy.PagedRequest">
            <summary>
            Represents a paged request to a service.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.#ctor">
            <summary>
            Instantiates a paged request to a service.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a paged request to a service.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.PagedRequest.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Instantiates a paged request to a service.
            </summary>
            <param name="values"> A set of values to set. </param>
        </member>
        <member name="M:Speedy.PagedRequest.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},Speedy.IDispatcher)">
            <summary>
            Instantiates a paged request to a service.
            </summary>
            <param name="values"> A set of values to set. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.PagedRequest.Filter">
            <summary>
            An optional filter value.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.Order">
            <inheritdoc />
        </member>
        <member name="P:Speedy.PagedRequest.Page">
            <summary>
            The page to start the request on.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.PerPage">
            <summary>
            The number of items per page.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.PageDefault">
            <summary>
            Default value for Page.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.PerPageDefault">
            <summary>
            Default value for PerPage.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.PerPageMaxDefault">
            <summary>
            Default value for PerPage maximum value.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.Cleanup">
            <summary>
            Cleanup the request. Set default values.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.UpdateWith(Speedy.PagedRequest,System.String[])">
            <summary>
            Update the PagedRequest with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.PagedRequest.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedRequest.RefreshUpdates">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedRequest.Cleanup``1(``0,System.Func{``0,System.Boolean},System.Action)">
            <summary>
            Cleanup a single item based on the test.
            </summary>
            <typeparam name="T"> The item type to be cleaned up. </typeparam>
            <param name="item"> The item to test and clean up. </param>
            <param name="test"> The test for the time. </param>
            <param name="action"> The action to cleanup the item. </param>
        </member>
        <member name="T:Speedy.IPagedRequest">
            <summary>
            Represents a request for paged results from a service.
            </summary>
        </member>
        <member name="P:Speedy.IPagedRequest.Filter">
            <summary>
            The filter to limit the request to. Defaults to an empty filter.
            </summary>
        </member>
        <member name="P:Speedy.IPagedRequest.Order">
            <summary>
            The value to order the request by.
            </summary>
        </member>
        <member name="P:Speedy.IPagedRequest.Page">
            <summary>
            The page to start the request on.
            </summary>
        </member>
        <member name="P:Speedy.IPagedRequest.PerPage">
            <summary>
            The number of items per page.
            </summary>
        </member>
        <member name="T:Speedy.PagedResults`1">
            <summary>
            Represents a page of results for a paged request to a service.
            </summary>
            <typeparam name="T"> The type of the items in the results collection. </typeparam>
        </member>
        <member name="M:Speedy.PagedResults`1.#ctor">
            <summary>
            Instantiate an instance of the paged results.
            </summary>
        </member>
        <member name="M:Speedy.PagedResults`1.#ctor(Speedy.PagedRequest,System.Int32,`0[])">
            <summary>
            Instantiate an instance of the paged results.
            </summary>
            <param name="request"> The request for the results. </param>
            <param name="totalCount"> The total amount of items for the request. </param>
            <param name="results"> The items in this set of results. </param>
        </member>
        <member name="P:Speedy.PagedResults`1.Filter">
            <summary>
            An optional filter value.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults`1.HasMore">
            <inheritdoc />
        </member>
        <member name="P:Speedy.PagedResults`1.Order">
            <inheritdoc />
        </member>
        <member name="P:Speedy.PagedResults`1.Page">
            <summary>
            The page to start the request on.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults`1.PerPage">
            <summary>
            The number of items per page.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults`1.Results">
            <summary>
            The results for a paged request.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults`1.TotalCount">
            <inheritdoc />
        </member>
        <member name="P:Speedy.PagedResults`1.TotalPages">
            <inheritdoc />
        </member>
        <member name="P:Speedy.PagedResults`1.PageDefault">
            <summary>
            Default value for Page.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults`1.PerPageDefault">
            <summary>
            Default value for PerPage.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults`1.PerPageMaxDefault">
            <summary>
            Default value for PerPage maximum value.
            </summary>
        </member>
        <member name="M:Speedy.PagedResults`1.CalculatePaginationValues">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedResults`1.ConvertResults``1(System.Func{`0,``0})">
            <summary>
            Convert the results of to a different type.
            </summary>
            <typeparam name="T2"> The type to convert into. </typeparam>
            <param name="convert"> The function to convert from the current type into the requested type. </param>
            <returns> The new paged results for the provided type. </returns>
        </member>
        <member name="M:Speedy.PagedResults`1.ShouldUpdate(Speedy.PagedResults{`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedResults`1.TryUpdateWith(Speedy.PagedResults{`0},System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedResults`1.UpdateWith(Speedy.PagedResults{`0},System.String[])">
            <summary>
            Update the PagedResults`1 with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.PagedResults`1.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedResults`1.GetExpandoObject">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedResults`1.RefreshUpdates">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PagedResults`1.Initialize(Speedy.PagedRequest)">
            <summary>
            Update the PagedRequest with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
        </member>
        <member name="T:Speedy.IPagedResults">
            <summary>
            Represents a page of results for a paged request to a service.
            </summary>
        </member>
        <member name="P:Speedy.IPagedResults.HasMore">
            <summary>
            The value to determine if the request has more pages.
            </summary>
        </member>
        <member name="P:Speedy.IPagedResults.TotalCount">
            <summary>
            The total count of items for the request.
            </summary>
        </member>
        <member name="P:Speedy.IPagedResults.TotalPages">
            <summary>
            The total count of pages for the request.
            </summary>
        </member>
        <member name="M:Speedy.IPagedResults.CalculatePaginationValues">
            <summary>
            Calculate the start and end pagination values.
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Speedy.PartialUpdate`1">
            <summary>
            This class contains updates for another object. JSON is deserialized into the
            provided type. Meaning, if you create an "AccountUpdate" that inherits
            "PartialUpdate[Account]" the updates are for the "Account" itself.
            </summary>
            <typeparam name="T"> The type of object to be updated. </typeparam>
        </member>
        <member name="M:Speedy.PartialUpdate`1.#ctor">
            <summary>
            Instantiates a partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate`1.#ctor(Speedy.PartialUpdateOptions)">
            <summary>
            Instantiates a partial update.
            </summary>
            <param name="options"> An optional set of options for the update. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a partial update.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.#ctor(Speedy.PartialUpdateOptions,Speedy.IDispatcher)">
            <summary>
            Instantiates a partial update.
            </summary>
            <param name="options"> An optional set of options for the update. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Apply(`0)">
            <summary>
            Applies the updates to the entity.
            </summary>
            <param name="entity"> Entity to be updated. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.ApplyValidationGroup(`0)">
            <summary>
            Applies the updates to the entity including only properties from the default validation group.
            </summary>
            <param name="entity"> Entity to be updated. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.ApplyValidationGroup(`0,System.String)">
            <summary>
            Applies the updates to the entity including only properties from a validation group.
            </summary>
            <param name="entity"> Entity to be updated. </param>
            <param name="groupName"> The name of the validation group to apply. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Get``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get the property value.
            </summary>
            <typeparam name="TProperty"> The type to cast the value to. </typeparam>
            <param name="expression"> The expression of the member to set. </param>
            <returns> The value if it was found otherwise default(T). </returns>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Get``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Get the property value.
            </summary>
            <typeparam name="TProperty"> The type to cast the value to. </typeparam>
            <param name="expression"> The expression of the member to set. </param>
            <param name="defaultValue"> A default value if update not available. </param>
            <returns> The value if it was found otherwise default(T). </returns>
        </member>
        <member name="M:Speedy.PartialUpdate`1.GetInstance">
            <summary>
            Creates an instance of the type and applies the partial update.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Remove a property from the update.
            </summary>
            <param name="expression"> The expression of the member to set. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Set(System.String,System.Object)">
            <summary>
            Set a property for the update. The name must be available of the target value.
            </summary>
            <param name="name"> The name of the member to set. </param>
            <param name="value"> The value of the member. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Set(`0)">
            <summary>
            Set a full set of updates.
            </summary>
            <param name="value"> The value that contains a full set of updates. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Set a property for the update.
            </summary>
            <param name="expression"> The expression of the member to set. </param>
            <param name="value"> The value of the member. </param>
        </member>
        <member name="M:Speedy.PartialUpdate`1.TryValidate(System.Collections.Generic.IList{Speedy.Validation.IValidation}@)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate`1.TryValidate(System.String,System.Collections.Generic.IList{Speedy.Validation.IValidation}@)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Validate">
            <summary>
            Runs the validator to check the partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate`1.Validate(System.String)">
            <summary>
            Runs the validator to check the partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate`1.ValidateProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configure a validation for an update value.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate`1.GetTargetProperties">
            <summary>
            Gets a list of property information for provided type.
            The results are cached so the next query is much faster.
            </summary>
            <returns> The list of properties for the provided type. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate`1.GetTargetReadableWritableProperties">
            <summary>
            Gets a list of property information for provided type that are readable and writable.
            The results are cached so the next query is much faster.
            </summary>
            <returns> The list of properties for the provided type. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate`1.InternalValidateProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])">
            <summary>
            Configure a validation for an update value.
            </summary>
        </member>
        <member name="T:Speedy.PartialUpdate">
            <summary>
            This class contains updates for itself. JSON is deserialized into the declaring type.
            Meaning, if you create an "AccountUpdate" that inherits from "PartialUpdate" then the
            updates are for the "AccountUpdate" itself.
            </summary>
        </member>
        <member name="F:Speedy.PartialUpdate.DefaultGroupName">
            <summary>
            The default name for updates if a group name is not provided.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.#ctor">
            <summary>
            Instantiates a partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.#ctor(Speedy.PartialUpdateOptions)">
            <summary>
            Instantiates a partial update.
            </summary>
            <param name="options"> The options for the partial update. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a partial update.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.#ctor(Speedy.PartialUpdateOptions,Speedy.IDispatcher)">
            <summary>
            Instantiates a partial update.
            </summary>
            <param name="options"> The options for the partial update. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.PartialUpdate.Options">
            <summary>
            The options for the partial update.
            </summary>
        </member>
        <member name="P:Speedy.PartialUpdate.Updates">
            <summary>
            A list of updates for this partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.AddOrUpdate(System.String,System.Object)">
            <summary>
            Add or update the value with the type.
            </summary>
            <param name="name"> The name of the update to add. </param>
            <param name="value"> The value of the update. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.AddOrUpdate(System.String,System.Type,System.Object)">
            <summary>
            Add or update the value with the type.
            </summary>
            <param name="name"> The name of the update to add. </param>
            <param name="type"> The type of the value. </param>
            <param name="value"> The value of the update. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.Apply(System.Object)">
            <summary>
            Applies the updates to the entity.
            </summary>
            <param name="entity"> Entity to be updated. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.Apply(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Applies the updates to the entity.
            </summary>
            <param name="entity"> Entity to be updated. </param>
            <param name="including"> Properties to be included. </param>
            <param name="excluding"> Properties to be excluded. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.Apply(System.Object,Speedy.PartialUpdateOptions)">
            <summary>
            Applies the updates to the entity.
            </summary>
            <param name="entity"> Entity to be updated. </param>
            <param name="options"> Options for the partial update. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.ApplyToSyncEntity(Speedy.Sync.ISyncEntity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies the updates to the sync entity.
            </summary>
            <param name="entity"> Sync entity to be updated. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.ApplyValidationGroup(System.Object)">
            <summary>
            Applies the updates to the entity including only properties from the default validation group.
            </summary>
            <param name="entity"> Entity to be updated. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.ApplyValidationGroup(System.Object,System.String)">
            <summary>
            Applies the updates to the entity including only properties from a validation group.
            </summary>
            <param name="entity"> Entity to be updated. </param>
            <param name="groupName"> The name of the validation group to apply. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.FromJson(System.String,Speedy.PartialUpdateOptions)">
            <summary>
            Gets a partial update from a JSON string.
            </summary>
            <param name="json"> The JSON containing the partial update. </param>
            <param name="options"> The options for the partial update. </param>
            <returns> The partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.FromJson``1(System.String,Speedy.PartialUpdateOptions)">
            <summary>
            Gets a partial update from a JSON string.
            </summary>
            <typeparam name="T"> The type the partial update is for. </typeparam>
            <param name="json"> The JSON containing the partial update. </param>
            <param name="options"> The options for the partial update. </param>
            <returns> The partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.FromJson(System.Type,System.String,Speedy.PartialUpdateOptions)">
            <summary>
            Gets a partial update from a JSON string.
            </summary>
            <param name="type"> The type the partial update is for. </param>
            <param name="json"> The JSON containing the partial update. </param>
            <param name="options"> The options for the partial update. </param>
            <returns> The partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.FromJson(System.Type,Newtonsoft.Json.JsonReader,Speedy.PartialUpdateOptions)">
            <summary>
            Gets a partial update from a JSON string.
            </summary>
            <param name="type"> The type the partial update is for. </param>
            <param name="reader"> The JSON containing the partial update. </param>
            <param name="options"> The options for the partial update. </param>
            <returns> The partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.Get(System.String)">
            <summary>
            Get the update for the provided name.
            </summary>
            <param name="name"> The name of the update. </param>
            <returns> The value if it was found otherwise null. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.Get``1(System.String)">
            <summary>
            Get the update for the provided name.
            </summary>
            <typeparam name="T"> The type to cast the value to. </typeparam>
            <param name="name"> The name of the update. </param>
            <returns> The value if it was found otherwise default(T). </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.Get(System.String,System.Type)">
            <summary>
            Get the update for the provided name.
            </summary>
            <param name="name"> The name of the update. </param>
            <param name="type"> The type to cast the value to. </param>
            <returns> The value if it was found otherwise default(T). </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.Get``1(System.String,``0)">
            <summary>
            Get the update for the provided name with a fallback default value if not found.
            </summary>
            <typeparam name="T"> The type to cast the value to. </typeparam>
            <param name="name"> The name of the update. </param>
            <param name="defaultValue"> A default value if update not available. </param>
            <returns> The value if it was found otherwise default(T). </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.GetGroupNames(System.String)">
            <summary>
            Calculate the group names to for validations.
            </summary>
            <param name="propertyName"> The name of the property. </param>
            <returns> The names of the groups for the property. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.GetInstance``1">
            <summary>
            Creates an instance of the type and applies the partial update.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.GetInstance(System.Type)">
            <summary>
            Creates an instance of the type and applies the partial update.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.op_Explicit(System.String)~Speedy.PartialUpdate">
            <summary>
            Explicit converter from string to PartialUpdate.
            </summary>
            <param name="value"> The string value to parse. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.ParseQueryString(System.String)">
            <summary>
            Parse the paged request values from the query string.
            </summary>
            <param name="queryString"> The query string to process. </param>
            <remarks>
            see https://www.ietf.org/rfc/rfc2396.txt for details on url decoding
            </remarks>
        </member>
        <member name="M:Speedy.PartialUpdate.Remove(System.String)">
            <summary>
            Remove a property from the update.
            </summary>
            <param name="name"> The name of the member to set. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.Set(System.String,System.Object)">
            <summary>
            Set a property for the update. The name must be available of the target value.
            </summary>
            <param name="name"> The name of the member to set. </param>
            <param name="value"> The value of the member. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.Set(System.Object)">
            <summary>
            Set a full set of updates.
            </summary>
            <param name="value"> The value that contains a full set of updates. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.ShouldProcessProperty(System.String)">
            <summary>
            Check to see if a property should be processed.
            </summary>
            <param name="propertyName"> The name of the property to test. </param>
            <returns> True if the property should be processed otherwise false. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.ToJson(Speedy.Serialization.SerializerSettings)">
            <summary>
            Get the JSON for the partial update.
            </summary>
            <returns> The JSON for the partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.ToQueryString">
            <summary>
            Convert the request to the query string values.
            </summary>
            <returns> The request in a query string format. </returns>
            <remarks>
            see https://www.ietf.org/rfc/rfc2396.txt for details on url encoding
            </remarks>
        </member>
        <member name="M:Speedy.PartialUpdate.ToRawJson">
            <summary>
            Get the JSON for the partial update.
            </summary>
            <returns> The JSON for the partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.TryGet``1(System.String,``0@)">
            <summary>
            Get the property value.
            </summary>
            <typeparam name="T"> The type to cast the value to. </typeparam>
            <param name="name"> The name of the update. </param>
            <param name="value"> The value that was retrieve or default value if not found. </param>
            <returns> True if the update was found otherwise false. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.TryGet(System.Type,System.String,System.Object@)">
            <summary>
            Get the property value.
            </summary>
            <param name="type"> The type to cast the value to. </param>
            <param name="name"> The name of the update. </param>
            <param name="value"> The value that was retrieve or default value if not found. </param>
            <returns> True if the update was found otherwise false. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.TryValidate(System.Collections.Generic.IList{Speedy.Validation.IValidation}@)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.TryValidate(System.String,System.Collections.Generic.IList{Speedy.Validation.IValidation}@)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.Validate">
            <summary>
            Runs the validator to check the partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.Validate(System.String)">
            <summary>
            Runs the validator to check the partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.ValidateProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Configure a validation for an update value.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.GetExpandoObject">
            <summary>
            Create a dynamic object of the partial update.
            </summary>
            <returns> The dynamic version of the partial update. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.RefreshObject">
            <summary>
            A set of updates have been loaded so refresh object.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.RefreshUpdates">
            <summary>
            Refresh the update collection for this partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdate.GetTargetProperties">
            <summary>
            Gets a list of property information for this type.
            The results are cached so the next query is much faster.
            </summary>
            <returns> The list of properties for this type. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.GetTargetReadableWritableProperties">
            <summary>
            Gets a list of property information for provided type that are readable and writable.
            The results are cached so the next query is much faster.
            </summary>
            <returns> The list of properties for the provided type. </returns>
        </member>
        <member name="M:Speedy.PartialUpdate.InternalSet(System.String,System.Object)">
            <summary>
            Set a property for the update. The name must be available of the target value.
            </summary>
            <param name="name"> The name of the member to set. </param>
            <param name="value"> The value of the member. </param>
        </member>
        <member name="M:Speedy.PartialUpdate.InternalValidateProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String[])">
            <summary>
            Configure a validation for an update value.
            </summary>
        </member>
        <member name="T:Speedy.PartialUpdateOptions">
            <summary>
            Options for Partial Update
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdateOptions.#ctor">
            <summary>
            Instantiates options for validation for a partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdateOptions.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Instantiates options for validation for a partial update.
            </summary>
        </member>
        <member name="P:Speedy.PartialUpdateOptions.ExcludedProperties">
            <summary>
            Properties to be excluded.
            </summary>
        </member>
        <member name="P:Speedy.PartialUpdateOptions.IncludedProperties">
            <summary>
            Properties to be included.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdateOptions.DeepClone(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PartialUpdateOptions.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.PartialUpdateOptions.ShouldProcessProperty(System.String)">
            <summary>
            Check to see if a property should be processed.
            </summary>
            <param name="propertyName"> The name of the property to test. </param>
            <returns> True if the property should be processed otherwise false. </returns>
        </member>
        <member name="M:Speedy.PartialUpdateOptions.UpdateWith(Speedy.PartialUpdateOptions,System.String[])">
            <summary>
            Update the PartialUpdateOptions with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.PartialUpdateOptions.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.PartialUpdateValue">
            <summary>
            A value of a partial update.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdateValue.#ctor">
            <summary>
            Instantiates a partial update value.
            </summary>
        </member>
        <member name="M:Speedy.PartialUpdateValue.#ctor(System.String,System.Object)">
            <summary>
            Instantiates a partial update value.
            </summary>
            <param name="name"> The property name of the update. </param>
            <param name="value"> The value to set the property to. </param>
        </member>
        <member name="M:Speedy.PartialUpdateValue.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Instantiates a partial update value.
            </summary>
            <param name="name"> The property name of the update. </param>
            <param name="type"> The type for the property. </param>
            <param name="value"> The value to set the property to. </param>
        </member>
        <member name="P:Speedy.PartialUpdateValue.Name">
            <summary>
            The name of the member for the update.
            </summary>
        </member>
        <member name="P:Speedy.PartialUpdateValue.Type">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="P:Speedy.PartialUpdateValue.Value">
            <summary>
            The value being apply.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.AverageTimer">
            <summary>
            Average timer for tracking the average processing time of work.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor">
            <summary>
            Instantiate the average service.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor(System.Int32)">
            <summary>
            Instantiate the average service.
            </summary>
            <param name="limit"> The maximum amount of values to average. </param>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiate the average service.
            </summary>
            <param name="dispatcher"> The dispatcher. </param>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor(System.Int32,Speedy.IDispatcher)">
            <summary>
            Instantiate the average service.
            </summary>
            <param name="limit"> The maximum amount of values to average. </param>
            <param name="dispatcher"> The dispatcher. </param>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Average">
            <summary>
            Returns the Average value as TimeSpan. This expects the Average values to be "Ticks".
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Count">
            <summary>
            Number of times this timer has been called.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Elapsed">
            <summary>
            The amount of time that has elapsed.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.IsRunning">
            <summary>
            Indicates if the timer is running;
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Samples">
            <summary>
            Number of samples currently being averaged.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Cancel">
            <summary>
            Cancel the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Reset">
            <summary>
            Reset the average timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Stop">
            <summary>
            Stop the timer then update the average.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Time(System.Action)">
            <summary>
            Start the timer, performs the action, then stops the timer.
            </summary>
            <param name="action"> The action to be timed. </param>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Time``1(System.Func{``0})">
            <summary>
            Start the timer, performs the function, then stops the timer, then returns the value from the function.
            </summary>
            <param name="function"> The action to be timed. </param>
            <returns> The value return from the function. </returns>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Profiling.DebounceService`1">
            <summary>
            A service for debouncing an action.
            </summary>
            <typeparam name="T"> The type to pass to the action. </typeparam>
        </member>
        <member name="M:Speedy.Profiling.DebounceService`1.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Create an instance of the service for debouncing an action.
            </summary>
            <param name="timeSpan"> The amount of time before the action will trigger. </param>
            <param name="enabled"> A flag to enable the service. Defaults to true. </param>
        </member>
        <member name="M:Speedy.Profiling.DebounceService`1.Trigger(`0,System.Boolean)">
            <summary>
            Trigger the service. Will be trigger after the timespan or immediately if force is true.
            </summary>
            <param name="value"> The value to trigger with. </param>
            <param name="force"> An optional flag to immediately trigger if true. Defaults to false. </param>
        </member>
        <member name="T:Speedy.Profiling.DebounceService">
            <summary>
            A service for debouncing an action.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.DebounceService.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Create an instance of the service for debouncing an action.
            </summary>
            <param name="timeSpan"> The amount of time before the action will trigger. </param>
            <param name="enabled"> A flag to enable the service. Defaults to true. </param>
        </member>
        <member name="P:Speedy.Profiling.DebounceService.Data">
            <summary>
            The data to be store for the latest trigger.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.DebounceService.Enabled">
            <summary>
            A flag to enable the service. Defaults to true.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.DebounceService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.DebounceService.Trigger(System.Boolean)">
            <summary>
            Trigger the service. Will be trigger after the timespan or immediately if force is true.
            </summary>
            <param name="force"> An optional flag to immediately trigger if true. Defaults to false. </param>
        </member>
        <member name="M:Speedy.Profiling.DebounceService.Trigger(System.Object,System.Boolean)">
            <summary>
            Trigger the service. Will be trigger after the timespan or immediately if force is true.
            </summary>
            <param name="value"> The value to trigger with. </param>
            <param name="force"> An optional flag to immediately trigger if true. Defaults to false. </param>
        </member>
        <member name="M:Speedy.Profiling.DebounceService.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> True if disposing and false if otherwise. </param>
        </member>
        <member name="E:Speedy.Profiling.DebounceService.Action">
            <summary>
            The action to be triggered.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.ITrackerPathRepository">
            <summary>
            Interface for storing tracker path data.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.ITrackerPathRepository.Write(Speedy.Profiling.TrackerPath[])">
            <summary>
            Writes a collection of tracker paths.
            </summary>
            <param name="paths"> The tracker paths to write. </param>
        </member>
        <member name="T:Speedy.Profiling.MemoryTrackerPathRepository">
            <summary>
            In memory tracker path repository.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.MemoryTrackerPathRepository.#ctor">
            <summary>
            Instantiates an instance of the path repository.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.MemoryTrackerPathRepository.Paths">
            <summary>
            The paths for this repository.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.MemoryTrackerPathRepository.Clear">
            <summary>
            Clears the paths from the repository.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.MemoryTrackerPathRepository.Write(Speedy.Profiling.TrackerPath[])">
            <summary>
            Writes paths to this repository.
            </summary>
            <param name="paths"> The paths to be added. </param>
        </member>
        <member name="T:Speedy.Profiling.Profiler">
            <summary>
            Class for profiling actions
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Profiler.Profile(System.Action)">
            <summary>
            Profile an action.
            </summary>
            <param name="action"> The action to profile. </param>
            <returns> The time the action took. </returns>
        </member>
        <member name="T:Speedy.Profiling.Timer">
            <summary>
            Timer that uses the time service.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.#ctor">
            <summary>
            Instantiates an instance of the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the timer.
            </summary>
            <param name="dispatcher"> The dispatcher for handling property changes. </param>
        </member>
        <member name="P:Speedy.Profiling.Timer.Elapsed">
            <summary>
            The time elapsed for the timer.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Timer.IsRunning">
            <summary>
            Indicates the timer is running or not.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Add(Speedy.Profiling.AverageTimer)">
            <summary>
            Adds the average timer elapsed value to this timer.
            </summary>
            <param name="timer"> The timer to be added. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Add(System.TimeSpan)">
            <summary>
            Adds the time value to this timer.
            </summary>
            <param name="time"> The time to be added. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Create(System.Action)">
            <summary>
            Creates a new timer and processes the provided action.
            </summary>
            <param name="action"> The action to be timed. </param>
            <returns> The new timer. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.Create``1(System.Func{``0})">
            <summary>
            Create a new timer and processes provided function.
            </summary>
            <typeparam name="T"> The type of the response from the function. </typeparam>
            <param name="function"> The action to be timed. </param>
            <returns> The value return from the function and the new timer. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.Reset">
            <summary>
            Reset the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Reset(System.TimeSpan)">
            <summary>
            Reset the time while provided an elapsed timer.
            </summary>
            <param name="elapsed"> The value to set elapsed to. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Restart">
            <summary>
            Restarts the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Restart(System.DateTime)">
            <summary>
            Restarts the timer with a specific time. The elapsed time will be reset.
            </summary>
            <param name="dateTime"> The time the timer was started. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Start(System.DateTime)">
            <summary>
            Starts the timer with a specific time.
            </summary>
            <param name="dateTime"> The time the timer was started. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.StartNew">
            <summary>
            Creates a timer and starts it running.
            </summary>
            <returns> The new timer that is currently running. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Stop(System.DateTime)">
            <summary>
            Stops the timer at a specific time.
            </summary>
            <param name="dateTime"> The time the timer was stopped. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Time(System.Action)">
            <summary>
            Start the timer, performs the action, then stops the timer.
            </summary>
            <param name="action"> The action to be timed. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Time``1(System.Func{``0})">
            <summary>
            Start the timer, performs the function, then stops the timer, then returns the value from the function.
            </summary>
            <param name="function"> The action to be timed. </param>
            <returns> The value return from the function. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.Timer.GetCurrentTime">
            <summary>
            Gets the current time for the timer.
            </summary>
            <returns> The current time. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.RunningElapsed">
            <summary>
            The current running elapsed time.
            </summary>
            <returns> The running elapsed time. </returns>
        </member>
        <member name="T:Speedy.Profiling.Tracker">
            <summary>
            A tracker to track paths and exceptions. Each tracker instance represents a new sessions.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Tracker.#ctor(Speedy.Profiling.ITrackerPathRepository,Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath})">
            <summary>
            A tracker to capture, store, and transmit paths to a path repository.
            </summary>
            <param name="pathRepository"> The final repository used to store the data. </param>
            <param name="cacheProvider"> The repository used to cache data until it can be stored. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.#ctor(Speedy.Profiling.ITrackerPathRepository,Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath},Speedy.IDispatcher)">
            <summary>
            A tracker to capture, store, and transmit paths to a path repository.
            </summary>
            <param name="pathRepository"> The final repository used to store the data. </param>
            <param name="cacheProvider"> The repository used to cache data until it can be stored. </param>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Profiling.Tracker.Assembly">
            <summary>
            Gets the assembly for this item.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.AssemblyName">
            <summary>
            Gets the assembly name. Gets cached on call.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.AssemblyVersion">
            <summary>
            Gets the version of the assembly.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.PathProcessingDelay">
            <summary>
            Gets or sets the delay in milliseconds between processing paths. The path processor will
            delay this time between processing of paths. There will be a delay 4x this amount when an
            error occurs during processing.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.PathProcessorRunning">
            <summary>
            Gets the running status of the path processor.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.PathRepository">
            <summary>
            Gets the repository for paths that are tracked.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.ProcessRepositoryChunk">
            <summary>
            Gets the chunk size for saving data to the final storage location.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Tracker.AddException(System.Exception,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an exception to the tracking session.
            </summary>
            <param name="exception"> The exception to be added. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.AddPath(System.String,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an path to the tracking session.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.AddPath(System.String,System.TimeSpan,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an path with an existing timespan to the tracking session.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="elapsedTime"> The elapsed time of the path. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Initialize(Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Initialize the tracker before using it.
            </summary>
            <param name="values"> The values to associate with this session. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Start(Speedy.Profiling.ITrackerPathRepository,Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath},Speedy.Profiling.TrackerPathValue[])">
            <summary>
            A tracker to capture, store, and transmit paths to a data channel.
            </summary>
            <param name="repository"> The channel used to store the data remotely. </param>
            <param name="provider"> The repository used to store the data locally. </param>
            <param name="values"> The values to associate with this session. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Start(Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Start the tracker for the provided application.
            </summary>
            <param name="values"> The initial path values. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.StartNewPath(System.String,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Starts a new path. Once the path is done be sure to call <seealso cref="M:Speedy.Profiling.TrackerPath.Complete" />.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
            <returns> The path for tracking an path. </returns>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.OnLog(System.String,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Log a message.
            </summary>
            <param name="message"> The message to log. </param>
            <param name="level"> The level of the message. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.ProcessSession">
            <summary>
            Give access to process the session for the path processor worker.
            </summary>
            <returns> The number of paths processed. </returns>
        </member>
        <member name="M:Speedy.Profiling.Tracker.ValidateTrackerState">
            <summary>
            Check to see if the tracker is in a good working state.
            </summary>
        </member>
        <member name="E:Speedy.Profiling.Tracker.Log">
            <summary>
            Event for when the tracker needs to write information.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.TrackerPath">
            <summary>
            Represents an tracker path.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.#ctor">
            <summary>
            Instantiates a new instance of the class.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Children">
            <summary>
            Gets or set the child paths.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.CompletedOn">
            <summary>
            Gets or set the date and time the path was completed.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.ElapsedTime">
            <summary>
            Gets or sets the elapsed time between the started on and completed on.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Id">
            <summary>
            Gets or sets the unique ID.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.IsCompleted">
            <summary>
            Returns true if the path has been completed.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.ParentId">
            <summary>
            Gets or sets the parent ID.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.StartedOn">
            <summary>
            Gets or set the date and time the path was started.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Type">
            <summary>
            Gets or sets the path type.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.AddException(System.Exception,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an exception to this path.
            </summary>
            <param name="exception"> The exception to be added to the path. </param>
            <param name="values"> Optional values for this exception. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.AddPath(System.String,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds a child path to this path.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.AddValue(System.String,System.String)">
            <summary>
            Adds a value to this path.
            </summary>
            <param name="name"> The name of this value. </param>
            <param name="value"> The value of this value. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.Complete">
            <summary>
            Completes the path and adds it to the path or tracker.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.StartNewPath(System.Func{System.String},Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Starts a new path. Once the path is done be sure to call <seealso cref="M:Speedy.Profiling.TrackerPath.Complete" />.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
            <returns> The path for tracking an path. </returns>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.TrackAction(System.Func{System.String},System.Action{Speedy.Profiling.TrackerPath})">
            <summary>
            Process an action and then add the path.
            </summary>
            <param name="key"> The key for the path. </param>
            <param name="action"> The action to process. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.TrackAction``1(System.Func{System.String},System.Func{Speedy.Profiling.TrackerPath,``0})">
            <summary>
            Process an action and then add the path.
            </summary>
            <typeparam name="T"> The type of the response for the action. </typeparam>
            <param name="key"> The key for the path. </param>
            <param name="action"> The action to process. </param>
            <returns> The result of the action. </returns>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.CreatePath(System.Guid,System.Exception,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Starts a new path including an exception. The path will need to be completed or disposed before it will be added to the tracker.
            </summary>
            <param name="parentId"> The ID of the parent for this path. </param>
            <param name="ex"> The exception to be turned into an path. </param>
            <param name="values"> Optional values for this path. </param>
            <returns> The path for tracking an path. </returns>
        </member>
        <member name="E:Speedy.Profiling.TrackerPath.Completed">
            <summary>
            Occurs when the path is completed.
            </summary>
        </member>
        <member name="E:Speedy.Profiling.TrackerPath.Disposed">
            <summary>
            Occurs when the path is disposed.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.TrackerPathValue">
            <summary>
            Represents a value for a tracker path.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.#ctor">
            <summary>
            Instantiates a new instance of the class.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.#ctor(System.String,System.Object,Speedy.IDispatcher)">
            <summary>
            Instantiates a new instance of the class.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPathValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPathValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.Equals(Speedy.Profiling.TrackerPathValue)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Protocols.Csv.CsvParser">
            <summary>
            Parser for CSV file format.
            </summary>
            <remarks>
            https://csv-spec.org/
            https://datatracker.ietf.org/doc/html/rfc4180#section-2
            </remarks>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvParser.#ctor(System.IO.TextReader,Speedy.Protocols.Csv.CsvParserOptions)">
            <summary>
            Instantiates an instance of the CSV parser.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParser.BufferSize">
            <summary>
            Size of the circular buffer. Buffer size limits max length of the CSV line that can be processed.
            </summary>
            <remarks> Default buffer size is 32kb. </remarks>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParser.FieldsCount">
            <summary>
            The count of fields in the current record.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParser.Item(System.Int32)">
            <summary>
            Access a field by the index.
            </summary>
            <param name="idx"> The field index. </param>
            <returns> The field content or null if the index is out of range. </returns>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParser.Options">
            <summary>
            Options for the CSV parser.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvParser.Read">
            <summary>
            Reads a record from the CSV parser.
            </summary>
            <returns> </returns>
            <exception cref="T:System.IO.InvalidDataException"> </exception>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvParser.ReadContent``1(System.String,System.Func{``0,Speedy.Protocols.Csv.CsvParser,System.Boolean})">
            <summary>
            Read content from a CSV file using default options.
            </summary>
            <typeparam name="T"> The type to be returned. </typeparam>
            <param name="content"> The CSV content in string format. </param>
            <param name="mapper"> The mapper to map a record to the type. </param>
            <returns> A list of types from the CSV records. </returns>
            <exception cref="T:System.Exception"> Failed to parse line {line number}. </exception>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvParser.ReadContent``1(System.String,Speedy.Protocols.Csv.CsvParserOptions,System.Func{``0,Speedy.Protocols.Csv.CsvParser,System.Boolean})">
            <summary>
            Read content from a CSV file.
            </summary>
            <typeparam name="T"> The type to be returned. </typeparam>
            <param name="content"> The CSV content in string format. </param>
            <param name="options"> The options for parsing. </param>
            <param name="mapper"> The mapper to map a record to the type. </param>
            <returns> A list of types from the CSV records. </returns>
            <exception cref="T:System.Exception"> Failed to parse line {line number}. </exception>
        </member>
        <member name="T:Speedy.Protocols.Csv.CsvParserOptions">
            <summary>
            Options for the CSV parser.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvParserOptions.#ctor">
            <summary>
            Instantiates an instance of the CSV parser options.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParserOptions.Delimiter">
            <summary>
            The character delimiter for the CSV file.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParserOptions.HasHeader">
            <summary>
            An options to parse out a header from the CSV file.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvParserOptions.TrimFields">
            <summary>
            If true start/end spaces are excluded from field values (except values in quotes). True by default.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Csv.CsvWriter`1">
            <summary>
            Converts a list of items to CSV format.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter`1.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CSV writer.
            </summary>
            <param name="columnSeparator">
            The string used to separate columns in the output.
            By default this is a comma so that the generated output is a CSV file.
            </param>
            <param name="includeHeaderRow">
            Whether to include the header row with the columns names in the export
            </param>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter`1.Add(`0[])">
            <summary>
            Add a list of items as rows.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Csv.CsvWriter">
            <summary>
            Converts a list of items to CSV format.
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Csv.CsvWriter._columnSeparator">
            <summary>
            The string used to separate columns in the output.
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Csv.CsvWriter._includeHeaderRow">
            <summary>
            Whether to include the header row with column names.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CSV writer.
            </summary>
            <param name="type"> The type this writer is for </param>
            <param name="columnSeparator">
            The string used to separate columns in the output.
            By default this is a comma so that the generated output is a CSV file.
            </param>
            <param name="includeHeaderRow">
            Whether to include the header row with the columns names in the export
            </param>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvWriter.Properties">
            <summary>
            The list of fields (headers).
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Csv.CsvWriter.Rows">
            <summary>
            The list of rows.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.EscapeValue(System.Object,System.String)">
            <summary>
            Converts a value to how it should output in a csv file
            If it has a comma, it needs surrounding with double quotes
            Eg Sydney, Australia -> "Sydney, Australia"
            Also if it contains any double quotes ("), then they need to be replaced with quad quotes[sic] ("")
            Eg "Dangerous Dan" McGrew -> """Dangerous Dan"" McGrew"
            </summary>
            <param name="value"> The value to escape. </param>
            <param name="columnSeparator">
            The string used to separate columns in the output.
            By default this is a comma so that the generated output is a CSV document.
            </param>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.ExportToBytes">
            <summary>
            Exports as raw bytes.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.ExportToFile(System.String)">
            <summary>
            Exports to a file
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.Write``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Writes a list of items to CSV format.
            </summary>
            <typeparam name="T"> The type this writer is for. </typeparam>
            <param name="items"> The items to be exported. </param>
            <param name="columnSeparator">
            The string used to separate columns in the output.
            By default this is a comma so that the generated output is a CSV file.
            </param>
            <param name="includeHeaderRow">
            Whether to include the header row with the columns names in the export
            </param>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.Write">
            <summary>
            Output all rows as a CSV string.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Csv.CsvWriter.ExportToLines">
            <summary>
            Outputs all rows as a CSV, returning one "line" at a time
            Where "line" is a IEnumerable of string values
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ParseArgument(System.String)">
            <summary>
            Parse a single argument
            </summary>
            <param name="str"> string contain the argument to parse </param>
            <returns> the parsed argument </returns>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ParseArgument(System.String,System.IFormatProvider)">
            <summary>
            Parse a single argument
            </summary>
            <param name="str"> string contain the argument to parse </param>
            <param name="provider"> format provider to use </param>
            <returns> the parsed argument </returns>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ParseArguments(System.String,System.Collections.Generic.List{System.Object},System.Int32,System.IFormatProvider,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse arguments
            </summary>
            <param name="str"> string to parse </param>
            <param name="arguments"> the list to put the parsed arguments into </param>
            <param name="index"> the current index within the string </param>
            <param name="provider"> the format to use </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ScanForwardObject(System.String,System.Int32)">
            <summary>
            Scan for object start and end control chars
            </summary>
            <param name="str"> the string to scan </param>
            <param name="controlChar"> the index of the starting control char </param>
            <returns> the index of the end char </returns>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ParseObject(System.String,System.IFormatProvider,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse an object value.
            </summary>
            <param name="str"> The string contain the object to parse. </param>
            <param name="provider"> The format provider to use. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> The parsed argument or a string if unknown type. </returns>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ScanForward(System.String,System.Int32,System.Char,System.Char,System.String)">
            <summary>
            Scan for start and end control chars
            </summary>
            <param name="str"> the string to scan </param>
            <param name="controlChar"> the index of the starting control char </param>
            <param name="startChar"> start control char </param>
            <param name="endChar"> end control char </param>
            <param name="errorString"> string to use in the case of an error </param>
            <returns> the index of the end char </returns>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ScanForwardInArray(System.String,System.Int32)">
            <summary>
            Scan for array start and end control chars
            </summary>
            <param name="str"> the string to scan </param>
            <param name="controlChar"> the index of the starting control char </param>
            <returns> the index of the end char </returns>
        </member>
        <member name="M:Speedy.Protocols.Extensions.ScanForwardUntil(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            Scan for start and end control chars
            </summary>
            <param name="str"> the string to scan </param>
            <param name="index"> the index to start from </param>
            <param name="endChar"> end control char </param>
            <param name="escapeCharacter"> the escape character </param>
            <returns> the index of the end char </returns>
        </member>
        <member name="T:Speedy.Protocols.Modbus.Commands.ModbusCommand">
            <summary>
            Represents a command for Modbus
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Modbus.Commands.ModbusCommand.InvalidFunctionCode">
            <summary>
            Represents the message for an invalid code on a response message.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ModbusCommand.#ctor(System.Byte,System.UInt16,Speedy.Protocols.Modbus.ModbusFunctionCode)">
            <summary>
            Constructs a modbus command.
            </summary>
            <param name="deviceAddress"> The address for the device. </param>
            <param name="startAddress"> The starting address of the data. </param>
            <param name="functionCode"> The function code of the command. </param>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ModbusCommand.DeviceAddress">
            <summary>
            The address of the slave device.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ModbusCommand.ErrorCheckingField">
            <summary>
            Two kinds of error-checking methods are used for standard Modbus networks.
            The error checking field contents depend upon the method that is being used.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ModbusCommand.FunctionCode">
            <summary>
            The Function Code field tells the addressed slave what function to perform.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ModbusCommand.StartAddress">
            <summary>
            The address field of a message frame contains two characters (ASCII) or eight bits (RTU).
            The individual slave devices are assigned addresses in the range of 1 ... 247.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ModbusCommand.ToBuffer">
            <summary>
            Converts the command to a buffer.
            </summary>
            <returns> The byte array of the command. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ModbusCommand.UpdateCrc(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the CRC for the command.
            </summary>
            <param name="buffer"> The buffer containing the data. </param>
            <param name="offset"> The offset where the data starts. </param>
            <param name="length"> The length of the data. </param>
        </member>
        <member name="T:Speedy.Protocols.Modbus.Commands.ReadHoldingRegistersModbusCommand">
            <summary>
            Reads the binary contents of holding registers in the slave.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadHoldingRegistersModbusCommand.#ctor(System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Instantiates an instance of the modbus command to Read Holding Registers (3).
            </summary>
            <param name="deviceAddress"> The address of the slave device. </param>
            <param name="startAddress"> The starting address of the register. </param>
            <param name="quantityOfRegisters"> The quantity of registers to read. </param>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ReadHoldingRegistersModbusCommand.QuantityOfRegisters">
            <summary>
            The quantity of registers to read.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadHoldingRegistersModbusCommand.ToBuffer">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadHoldingRegistersModbusCommand.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusCommand">
            <summary>
            Read the binary contents of input registers in the slave.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusCommand.#ctor(System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Instantiates an instance of the modbus command.
            </summary>
            <param name="deviceAddress"> The address of the slave device. </param>
            <param name="startAddress"> The starting address of the registers. </param>
            <param name="quantityOfRegisters"> The quantity of registers to read. </param>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusCommand.QuantityOfRegisters">
            <summary>
            The quantity of registers to read.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusCommand.ToBuffer">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusCommand.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse">
            <summary>
            The response of the read input registers command.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.#ctor">
            <summary>
            Instantiates an instance of the modbus response.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.QuantityOfRegisters">
            <summary>
            The quantity of registers to read.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.Registers">
            <summary>
            Register data that was read.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.FromBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="buffer"> The buffer containing the data. </param>
            <param name="offset"> The offset where the data starts. </param>
            <param name="length"> The length of the data. </param>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.GetDecimal(System.Int32,System.Decimal)">
            <summary>
            Convert the offset to a decimal value.
            </summary>
            <param name="offset"> The offset of the data. </param>
            <param name="conversion"> The value of the conversion. Ex. 0.1 to convert 512 to 51.2 </param>
            <returns> The decimal value. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.GetDecimal(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Convert the offset to a decimal value.
            </summary>
            <param name="offset"> The high offset of the data. </param>
            <param name="offset2"> The low offset of the data. </param>
            <param name="conversion"> The value of the conversion. Ex. 0.1 to convert 512 to 51.2 </param>
            <returns> The decimal value. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.GetUInt(System.Int32)">
            <summary>
            Convert the offset and following value to an unsigned integer.
            </summary>
            <param name="offset"> The offset of the data. High ushort followed by the low ushort value. </param>
            <returns> The unsigned integer value. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.Commands.ReadInputRegistersModbusResponse.ToBuffer">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Protocols.Modbus.ModbusFunctionCode">
            <summary>
            https://www.modbus.org/docs/PI_MBUS_300.pdf
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Modbus.ModbusFunctionCode.ReadHoldingRegisters">
            <summary>
            Reads the binary contents of holding registers in the slave.
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Modbus.ModbusFunctionCode.ReadInputRegisters">
            <summary>
            Reads the binary contents of input registers in the slave.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Modbus.ModbusHelper">
            <summary>
            A helper for calculating specific modbus type methods.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.CalculateCrc(System.Byte[])">
            <summary>
            CRC calculation for RTU.
            </summary>
            <param name="buffer"> The buffer containing the data. </param>
            <returns> The CRC calculated for the data. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.CalculateCrc(System.Byte[],System.Int32,System.Int32)">
            <summary>
            CRC calculation for RTU.
            </summary>
            <param name="buffer"> The buffer containing the data. </param>
            <param name="offset"> The offset where the data starts. </param>
            <param name="length"> The length of the data. </param>
            <returns> The CRC calculated for the data. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.CalculateLrc(System.String)">
            <summary>
            LRC calculation for ASCII.
            </summary>
            <param name="data"> The buffer containing the data. </param>
            <returns> The CRC calculated for the data. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.DecodeWords(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the byte array to a ushort array.
            </summary>
            <param name="buffer"> The buffer containing the data. </param>
            <param name="offset"> The offset where the data starts. </param>
            <param name="length"> The length of the data. </param>
            <returns> The words for the buffer data. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.GetInt(System.UInt16,System.UInt16)">
            <summary>
            Converts two ushort values into a int value.
            </summary>
            <param name="uh"> The high ushort value of the int. </param>
            <param name="ul"> The high ushort value of the int. </param>
            <returns> The int value of the two ushort values. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.GetUInt(System.UInt16,System.UInt16)">
            <summary>
            Converts two ushort values into a uint value.
            </summary>
            <param name="uh"> The high ushort value of the uint. </param>
            <param name="ul"> The high ushort value of the uint. </param>
            <returns> The uint value of the two ushort values. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.High(System.UInt16)">
            <summary>
            The high value of the ushort value.
            </summary>
            <param name="value"> The ushort value. </param>
            <returns> The high value of the ushort value. </returns>
        </member>
        <member name="M:Speedy.Protocols.Modbus.ModbusHelper.Low(System.UInt16)">
            <summary>
            The low value of the ushort value.
            </summary>
            <param name="value"> The ushort value. </param>
            <returns> The low value of the ushort value. </returns>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Exceptions.NmeaParseChecksumException">
            <summary>
            Represents a checksum error during parsing.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Exceptions.NmeaParseChecksumException.#ctor">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Exceptions.NmeaParseChecksumException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Exceptions.NmeaParseChecksumException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Exceptions.NmeaParseChecksumException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Exceptions.NmeaParseMismatchException">
            <summary>
            Represents a mismatch error during parsing.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Exceptions.NmeaParseUnknownException">
            <summary>
            Represents a unknown error during parsing.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Exceptions.NmeaParseUnknownException.#ctor">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Exceptions.NmeaParseUnknownException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GbsMessage">
            <summary>
            Represents a GBS message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.Messages.GbsMessage.Time">
            <summary>
            Time in the hhmmss.ss format.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GgaMessage">
            <summary>
            Represents a GGA message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.Messages.GgaMessage.Time">
            <summary>
            Time in the hhmmss.ss format.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GllMessage">
            <summary>
            Represents a GLL message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.Messages.GllMessage.Time">
            <summary>
            Time in the hhmmss.ss format.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GnsMessage">
            <summary>
            GP: GlobalPositioningSystem
            To provide information specific to the GPS constellation when more than one constellation is used
            for the differential position fix.
            GL: GlonassReceiver
            To provide information specific to the GLONASS constellation when more than one constellation is used
            for the differential position fix
            GN: GlobalNavigationSatelliteSystem
            GNSS position fix from more than one constellation (eg. GPS + GLONASS)
            </summary>
            <remarks>
            Priority should be GN > GL > GP.
            </remarks>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GrsMessage">
            <summary>
            Represents a GRS message.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GsaMessage">
            <summary>
            Represents a GSA message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.Messages.GsaMessage.PrnsOfSatellitesUsedForFix">
            <summary>
            Pseudo-Random Noise for satellites used for fix.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.Messages.GsaMessage.AddPrn(System.String)">
            <summary>
            Add pseudo-random noise for a satellite.
            </summary>
            <param name="prn"> </param>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GstMessage">
            <summary>
            Represents a GST message.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.GsvMessage">
            <summary>
            Represents a GSV message.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.RmcMessage">
            <summary>
            Represents a RMC message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.Messages.RmcMessage.Time">
            <summary>
            Time in the hhmmss.ss format.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.TxtMessage">
            <summary>
            Represents a TXT message.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.VtgMessage">
            <summary>
            Represents a VTG message.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.Messages.ZdaMessage">
            <summary>
            Represents a ZDA message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.Messages.ZdaMessage.Time">
            <summary>
            Time in the hhmmss.ss format.
            </summary>
        </member>
        <member name="T:Speedy.Protocols.Nmea.ModeIndicator">
            <summary>
            Represents a mode indicator.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.ModeIndicator.#ctor(System.String)">
            <summary>
            Instantiates an instance of the mode indicator.
            </summary>
            <param name="modeIndicator"> The mode indicator in string format. </param>
        </member>
        <member name="P:Speedy.Protocols.Nmea.ModeIndicator.Mode">
            <summary>
            The mode character.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.ModeIndicator.ModeName">
            <summary>
            The name of the mode.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.ModeIndicator.IsSet">
            <summary>
            Determines if the mode is set.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.ModeIndicator.IsValid">
            <summary>
            Determines if the mode indicator is valid.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.ModeIndicator.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Protocols.Nmea.NmeaLocation">
            <summary>
            Position - location
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaLocation.ToDecimal">
            <summary>
            XXYY.YYYY = XX + (YYYYYY / 600000) graden.
            (d)dd + (mm.mmmm/60) (* -1 for W and S)
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Protocols.Nmea.NmeaMessage">
            <summary>
            Base message
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.NmeaMessage.Checksum">
            <summary>
            The checksum for this message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.NmeaMessage.Prefix">
            <summary>
            The prefix known as Talker ID.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.NmeaMessage.ReceivedOn">
            <summary>
            The date and time the message was received on.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.NmeaMessage.Type">
            <summary>
            The sentence type of this NMEA message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Nmea.NmeaMessage.Arguments">
            <summary>
            The arguments of this message.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.ExtractChecksum(System.String)">
            <summary>
            Take the last characters which should be the checksum
            </summary>
            <param name="sentence"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.GetArgument``1(System.Int32,``0)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <typeparam name="T"> The type of the argument expected. </typeparam>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.GetArgumentAsDouble(System.Int32,System.Double)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.GetArgumentAsInteger(System.Int32,System.Int32)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.GetArgumentAsUnsignedInteger(System.Int32,System.UInt32)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.ParseChecksum(System.String)">
            <summary>
            Calculate checksum of Nmea sentence.
            </summary>
            <param name="sentence"> The Nmea sentence </param>
            <returns> The hexidecimal checksum </returns>
            <remarks>
            Example taken from https://gist.github.com/maxp/1193206
            </remarks>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.Reset">
            <summary>
            Reset the message to default.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.UpdateChecksum">
            <summary>
            Update the Checksum property by using ToString() value.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.GetArgument(System.Int32,System.String)">
            <summary>
            Gets the argument for the index offset.
            </summary>
            <param name="index"> The index of the argument to cast. </param>
            <param name="defaultValue"> The default value if the argument index does not exists. </param>
            <returns> The typed argument. </returns>
        </member>
        <member name="M:Speedy.Protocols.Nmea.NmeaMessage.CalculateChecksum(System.String)">
            <summary>
            Generates a checksum for a NMEA sentence
            </summary>
            <param name="sentence"> The sentence to calculate for. </param>
            <returns> The checksum in a two-character hexadecimal format. </returns>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.GlonassReceiver">
            <summary>
            GL - GLONASS Receiver
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.GlobalPositioningSystem">
            <summary>
            GP - Global Positioning System (GPS)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.AutomaticIdentificationSystem">
            <summary>
            AI - Automatic Identification System
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.DigitalSelectiveCalling">
            <summary>
            CD - Digital Selective Calling (DSC)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.DataReceiver">
            <summary>
            CR - Data Receiver
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.Satellite">
            <summary>
            CS - Satellite
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.RadioTelephoneMfHf">
            <summary>
            CT - Radio-Telephone (MF/HF)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.RadioTelephoneVhf">
            <summary>
            CV - Radio-Telephone (VHF)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.ScanningReceiver">
            <summary>
            CX - Scanning Receiver
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.DeccaNavigator">
            <summary>
            DE - DECCA Navigator
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.DirectionFinder">
            <summary>
            DF - Direction Finder
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.ElectronicChartSystem">
            <summary>
            EC - Electronic Chart System (ECS)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.ElectronicChartDisplayAndInformationSystem">
            <summary>
            EI - Electronic Chart Display &amp; Information System (ECDIS)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.EmergencyPositionIndicatingBeacon">
            <summary>
            EP - Emergency Position Indicating Beacon (EPIRB)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.EngineRoomMonitoringSystems">
            <summary>
            ER - Engine Room Monitoring Systems
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.GlobalNavigationSatelliteSystem">
            <summary>
            GN - Global Navigation Satellite System (GNSS)
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.HeadingSensors">
            <summary>
            HC - HEADING SENSORS: Compass, Magnetic
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.GyroNorthSeeking">
            <summary>
            HE - Gyro, North Seeking
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.GyroNonNorthSeeking">
            <summary>
            HN - Gyro, Non-North Seeking
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.IntegratedInstrumentation">
            <summary>
            II - Integrated Instrumentation
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.IntegratedNavigation">
            <summary>
            IN - Integrated Navigation
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.LoranC">
            <summary>
            LC - Loran C
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.RadarAndOrRadarPlotting">
            <summary>
            RA - Radar and/or Radar Plotting
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.SounderDepth">
            <summary>
            SD - Sounder, depth
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.ElectronicPositioningSystem">
            <summary>
            SN - Electronic Positioning System, other/general
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.SounderScanning">
            <summary>
            SS - Sounder, scanning
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.TurnRateIndicator">
            <summary>
            TI - Turn Rate Indicator
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.VelocitySensors">
            <summary>
            VD - VELOCITY SENSORS: Doppler, other/general
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.SpeedLogWaterMagnetic">
            <summary>
            VM - Speed Log, Water, Magnetic
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.SpeedLogWaterMechanical">
            <summary>
            VW - Speed Log, Water, Mechanical
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.VoyageDataRecorder">
            <summary>
            VR - Voyage Data Recorder
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.Transducer">
            <summary>
            YX - Transducer
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.TimeKeepers">
            <summary>
            ZA - TIMEKEEPERS, TIME/DATE: Atomic Clock
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.Chronometer">
            <summary>
            ZC - Chronometer
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.Quartz">
            <summary>
            ZQ - Quartz
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.RadioUpdate">
            <summary>
            ZV - Radio Update
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessagePrefix.WeatherInstruments">
            <summary>
            WI - Weather Instruments
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessageType.GGA">
            <summary>
            Time, position, and fix related data
            </summary>
            <remarks>
            An example of the GGA message string is:
            $GPGGA,172814.0,3723.46587704,N,12202.26957864,W, 2,6,1.2,18.893,M,-25.669,M,2.0,0031*4F
            Also note - The data string exceeds the NMEA standard length.
            </remarks>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessageType.GNS">
            <summary>
            GNSS fix data.
            GNSS capable receivers will always output this message with the GN talker ID.
            GNSS capable receivers will also output this message with the GP and/or GL talker ID
            when using more than one constellation for the position fix.
            </summary>
            <remarks>
            An example of the GNS message output from a GNSS capable receiver is:
            $GNGNS,014035.00,4332.69262,S,17235.48549,E,RR,13,0.9,25.63,11.24,,*70&lt;CR&gt;&lt;LF&gt;
            $GPGNS,014035.00,,,,,,8,,,,1.0,23*76&lt;CR&gt;&lt;LF&gt;
            $GLGNS,014035.00,,,,,,5,,,,1.0,23*67&lt;CR&gt;&lt;LF&gt;
            </remarks>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessageType.GSA">
            <summary>
            GSA - Overall Satellite Data
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessageType.GSV">
            <summary>
            GSV - Detailed Satellite Data
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Nmea.NmeaMessageType.TXT">
            <summary>
            For the transmission of short text messages, longer text messages may be transmitted
            by using multiple sentences. This sentence is intended to convey human readable textual
            information for display purposes
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.IOscMessageHandler.GetModel(Speedy.Protocols.Osc.OscMessage)">
            <summary>
            Get the object this handler will process
            </summary>
            <param name="message"> </param>
            <returns> </returns>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscAddress.Item(System.Int32)">
            <summary>
            Access each index of the address parts.
            </summary>
            <param name="index"> The index of the part. </param>
            <returns> The address part at the given index. </returns>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscAddress.Value">
            <summary>
            The original string value of the address.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscAddress.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Osc.OscAddress.IsValidAddress(System.String)">
            <summary>
            Is the supplied address a valid literal address (no wildcards or lists)
            </summary>
            <param name="address"> the address to check </param>
            <returns> true if the address is valid </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscAddress.Matches(System.String)">
            <summary>
            Sees if the address matches the provide address
            </summary>
            <param name="address"> The address to check for match. </param>
            <returns> Return true if the address matches the provided address. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscAddress.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Osc.OscAddress.ParseAddress(System.String)">
            <summary>
            Parse the OSC address from a string.
            </summary>
            <param name="address"> The string value of the OSC address. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscBitConverter.GetBytes(System.Byte[])">
            <summary>
            Get bytes ensuring the byte array is the correct OSC length.
            </summary>
            <param name="value"> The value to get bytes for. </param>
            <returns> The correctly length byte array value. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscBitConverter.GetBytes(System.Char)">
            <summary>
            A char still is expected to be 4 bytes long due to OSC byte structure.
            </summary>
            <param name="value"> The value of the char. </param>
            <returns> The OSC bytes for the value. </returns>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscBundle.Count">
            <summary>
            The number of packets in the bundle.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscBundle.IsExtended">
            <summary>
            If true this is an extended message that contains a CRC.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscBundle.Item(System.Int32)">
            <summary>
            Access bundle messages by index
            </summary>
            <param name="index"> the index of the message </param>
            <returns> message at the supplied index </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscBundle.ParseBundle(System.Byte[],System.Int32)">
            <summary>
            Takes in an OSC bundle package in byte form and parses it into a more usable OscBundle object
            </summary>
            <param name="bundle"> The bundle data in byte format. </param>
            <param name="length"> The length of the data. </param>
            <returns> Bundle containing elements and a time tag </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscBundle.ParseBundle(System.String,System.IFormatProvider)">
            <summary>
            Parse a bundle from a string using the supplied provider.
            </summary>
            <param name="value"> A string containing the OSC bundle data. </param>
            <param name="provider"> The format provider to use during parsing. </param>
            <returns> The parsed OSC bundle. </returns>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscCommand.Address">
            <summary>
            Get the address of the parsed message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscCommand.HasBeenRead">
            <summary>
            This indicates a value has been read from the server.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscCommand.HasBeenUpdated">
            <summary>
            Indicates modifications has been made since loaded from the message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscCommand.Time">
            <summary>
            Gets the time of the
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscCommand.Version">
            <summary>
            An optional version for tracking command changes.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscCommand.OscMessage">
            <summary>
            The message that represents this command.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.FromMessage``1(System.String,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Gets an OscCommand from an OscMessage
            </summary>
            <typeparam name="T"> The type to be returned. </typeparam>
            <param name="message"> The message to be loaded. </param>
            <param name="parsers"> The optional parsers to load the message. </param>
            <returns> The OscCommand with the message loaded. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.FromMessage``1(Speedy.Protocols.Osc.OscMessage)">
            <summary>
            Gets an OscCommand from an OscMessage
            </summary>
            <typeparam name="T"> The type to be returned. </typeparam>
            <param name="message"> The message to be loaded. </param>
            <returns> The OscCommand with the message loaded. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgument``1(``0)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <typeparam name="T"> The type of the argument expected. </typeparam>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgument``1(System.Int32,``0)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <typeparam name="T"> The type of the argument expected. </typeparam>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgument``1(Speedy.Protocols.Osc.OscArgumentParser{``0},``0)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <typeparam name="T"> The type of the argument expected. </typeparam>
            <param name="parser"> The parser to be used to process the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgument``1(System.Int32,Speedy.Protocols.Osc.OscArgumentParser{``0},``0)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <typeparam name="T"> The type of the argument expected. </typeparam>
            <param name="index"> The index of the argument. </param>
            <param name="parser"> The parser to be used to process the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsBlob">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsBlob(System.Int32,System.Byte[])">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsBoolean">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsBoolean(System.Int32,System.Boolean)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsByte">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsByte(System.Int32,System.Byte)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsDateTime">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsDateTime(System.Int32,System.DateTime)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsDecimal(System.Int32,System.Decimal)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsDouble">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsDouble(System.Int32,System.Double)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsFloat">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsFloat(System.Int32,System.Single)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsGuid">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsGuid(System.Int32,System.Guid)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsInteger">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsInteger(System.Int32,System.Int32)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsLong">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsLong(System.Int32,System.Int64)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsOscTimeTag">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsOscTimeTag(System.Int32,Speedy.Protocols.Osc.OscTimeTag)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsSByte(System.Int32,System.SByte)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsShort(System.Int32,System.Int16)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsString">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsString(System.Int32,System.String)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsTimeSpan">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsTimeSpan(System.Int32,System.TimeSpan)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsUnsignedInteger">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsUnsignedInteger(System.Int32,System.UInt32)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsUnsignedLong">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsUnsignedLong(System.Int32,System.UInt64)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.GetArgumentAsUnsignedShort(System.Int32,System.UInt16)">
            <summary>
            Gets the argument or returns the default value if the index is not found.
            </summary>
            <param name="index"> The index of the argument. </param>
            <param name="defaultValue"> The default value to return if not found. </param>
            <returns> The argument if found or default value if not. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.SetArguments(System.Object[])">
            <summary>
            Sets the arguments of the OscMessage.
            </summary>
            <param name="arguments"> The arguments for the OscMessage. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.StartArgumentProcessing">
            <summary>
            Resets the index for sequential argument processing. Call this before calling "GetArgument" methods that do *not* provide an index.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.ToBundle(System.Nullable{System.DateTime})">
            <summary>
            Converts the OscCommand into an OscBundle.
            </summary>
            <param name="time"> On optional time for the bundle. Defaults to TimeService.UtcNow. </param>
            <returns> The OscBundle containing this OscCommand as an OscMessage. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.ToMessage(System.Boolean)">
            <summary>
            Converts this OSC command to an OSC Message.
            </summary>
            <param name="includeArguments"> Option to include arguments in message. Defaults to true. If true then UpdateMessage will be called to populate the message. </param>
            <returns> The OSC message. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.ToString">
            <summary>
            Returns the OscMessage string value.
            </summary>
            <returns> The string value in OscMessage format. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommand.UndoChanges">
            <summary>
            Reloads the original message which undo all changes.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscCommandHandler`1.GetModel(Speedy.Protocols.Osc.OscMessage)">
            <summary>
            Get the object this handler will process
            </summary>
            <param name="message"> </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Protocols.Osc.OscMessage">
            <summary>
            Represents an OSC message.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.#ctor(System.String,System.Object[])">
            <summary>
            Instantiates an instance of an OSC message for the provided address and arguments.
            </summary>
            <param name="address"> The address. </param>
            <param name="args"> The arguments. </param>
            <remarks>
            Do NOT call this constructor with an object[] unless you want a message with a single
            object of type object[]. Because an object[] is an object the parameter is seen as a
            single entry array.
            </remarks>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.#ctor(System.DateTime,System.String,System.Object[])">
            <summary>
            Instantiates an instance of an OSC message for the provided address and arguments.
            </summary>
            <param name="time"> The time. </param>
            <param name="address"> The address. </param>
            <param name="args"> The arguments. </param>
            <remarks>
            Do NOT call this constructor with an object[] unless you want a message with a single
            object of type object[]. Because an object[] is an object the parameter is seen as a
            single entry array.
            </remarks>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.#ctor(System.DateTime,System.String,Speedy.IDispatcher,System.Object[])">
            <summary>
            Instantiates an instance of an OSC message for the provided address and arguments.
            </summary>
            <param name="time"> The time. </param>
            <param name="address"> The address. </param>
            <param name="dispatcher"> The dispatcher for updates. </param>
            <param name="args"> The arguments. </param>
            <remarks>
            Do NOT call this constructor with an object[] unless you want a message with a single
            object of type object[]. Because an object[] is an object the parameter is seen as a
            single entry array.
            </remarks>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscMessage.Address">
            <summary>
            The address of the message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscMessage.Arguments">
            <summary>
            The arguments of this message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscMessage.Count">
            <summary>
            The number of arguments in the message.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscMessage.IsEmpty">
            <summary>
            The argument list is empty.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscMessage.Item(System.Int32)">
            <summary>
            Access Arguments by index
            </summary>
            <param name="index"> the index of the argument </param>
            <returns> argument at the supplied index </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.FromObjectArray(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            They'll be times when you want to instantiate an message with an actually object array. Used this factory method. If you pass
            an object[] to the constructor it will actually be an object[] with one entry of that object[].
            </summary>
            <param name="address"> The address. </param>
            <param name="args"> The arguments. </param>
            <returns> The message for the address and arguments. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.FromObjectArray(System.DateTime,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            They'll be times when you want to instantiate an message with an actually object array. Used this factory method. If you pass
            an object[] to the constructor it will actually be an object[] with one entry of that object[].
            </summary>
            <param name="time"> The time. </param>
            <param name="address"> The address. </param>
            <param name="args"> The arguments. </param>
            <returns> The message for the address and arguments. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.GetArgument``1(System.Int32,``0)">
            <summary>
            Gets the argument as the specified type. Does a direct cast so if the type is wrong then it will exception.
            </summary>
            <typeparam name="T"> The type the argument is. </typeparam>
            <param name="index"> The index of the argument to cast. </param>
            <param name="defaultValue"> The default value if the argument index does not exists. </param>
            <returns> The typed argument. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.SetArguments(System.Object[])">
            <summary>
            Sets the arguments for the message.
            </summary>
            <param name="arguments"> The arguments to be set. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.ToByteArray">
            <summary>
            Convert the message to a byte array.
            </summary>
            <returns> The bytes that represents the message. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.ToHexString">
            <summary>
            Converts the message to a HEX string.
            </summary>
            <returns> A hex string format of the message. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.ToString">
            <summary>
            Converts the message to a string.
            </summary>
            <returns> A string format of the message. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.ToString(System.IFormatProvider,System.Boolean)">
            <summary>
            Converts the message to a string.
            </summary>
            <returns> A string format of the message. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.ParseMessage(System.DateTime,System.Byte[],System.Int32,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Takes in an OSC bundle package in byte form and parses it into a more usable OscBundle object
            </summary>
            <param name="time"> The created time of the message. </param>
            <param name="data"> The data for the message. </param>
            <param name="length"> The length for the message. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> Message containing various arguments and an address </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscMessage.ParseMessage(System.DateTime,System.String,System.IFormatProvider,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse a message from a string using the supplied provider.
            </summary>
            <param name="time"> The time to represent the message. </param>
            <param name="value"> A string containing the OSC message data. </param>
            <param name="provider"> The format provider to use during parsing. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> The parsed OSC message. </returns>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscPacket.Time">
            <summary>
            Gets the time of this bundle.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.Byte[],Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Takes in an OSC bundle package in byte form and parses it into a more usable OscBundle object
            </summary>
            <param name="data"> The data for the message. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> Message containing various arguments and an address </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.DateTime,System.Byte[],Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Takes in an OSC bundle package in byte form and parses it into a more usable OscBundle object
            </summary>
            <param name="time"> The created time of the message. </param>
            <param name="data"> The data for the message. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> Message containing various arguments and an address </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.Byte[],System.Int32,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Takes in an OSC bundle package in byte form and parses it into a more usable OscBundle object
            </summary>
            <param name="data"> The data for the message. </param>
            <param name="length"> The length for the message. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> Message containing various arguments and an address </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.DateTime,System.Byte[],System.Int32,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Takes in an OSC bundle package in byte form and parses it into a more usable OscBundle object
            </summary>
            <param name="time"> The created time of the message. </param>
            <param name="data"> The data for the message. </param>
            <param name="length"> The length for the message. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> Message containing various arguments and an address </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.String,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse a packet from a string using the default provider InvariantCulture.
            </summary>
            <param name="value"> A string containing the OSC packet data. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> The parsed OSC packet. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.String,System.IFormatProvider,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse a packet from a string using the supplied provider.
            </summary>
            <param name="value"> A string containing the OSC packet data. </param>
            <param name="provider"> The format provider to use during parsing. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> The parsed OSC packet. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.DateTime,System.String,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse a packet from a string using the supplied provider.
            </summary>
            <param name="time"> The time for the OscPacket. </param>
            <param name="value"> A string containing the OSC packet data. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> The parsed OSC packet. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscPacket.Parse(System.DateTime,System.String,System.IFormatProvider,Speedy.Protocols.Osc.OscArgumentParser[])">
            <summary>
            Parse a packet from a string using the supplied provider.
            </summary>
            <param name="time"> The time for the OscPacket. </param>
            <param name="value"> A string containing the OSC packet data. </param>
            <param name="provider"> The format provider to use during parsing. </param>
            <param name="parsers"> An optional set of OSC argument parsers. </param>
            <returns> The parsed OSC packet. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.Add``1(``0)">
            <summary>
            Add a setting to the manager.
            </summary>
            <param name="setting"> The setting to add. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection of settings to the manager.
            </summary>
            <param name="settings"> The settings to add. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.Clear">
            <summary>
            Remove all settings from the manager.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.Remove``1(``0)">
            <summary>
            Remove a setting from the manager.
            </summary>
            <param name="setting"> The setting to be removed. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.RequestAllSettings">
            <summary>
            Invokes a read request to all settings.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.RequestChangedSettings">
            <summary>
            Invokes a read request to all changed or unread settings.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.RequestUnreadSettings">
            <summary>
            Invokes a read request to all unread settings.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.ResetAllReadStatus">
            <summary>
            Reset the read status. This allows us to then request all settings to refresh all settings.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.SendAllSettings(System.Boolean)">
            <summary>
            Sends all setting to the server. The setting must have been read at
            least once. All non read settings will be ignored.
            </summary>
            <param name="force"> Force the setting to send even if never read. Default to false forcing the value to be read before it can be updated. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.SendChangedSettings(System.Boolean)">
            <summary>
            Sends all settings that have been changed to the server.
            </summary>
            <param name="force">
            Force the settings to send even if never read. Default to false forcing the values to be read before they can be updated.
            </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.UndoChangedSettings(System.Boolean)">
            <summary>
            Reset all settings that have been changed back to the values in the original message.
            </summary>
            <param name="force">
            Force the settings to send even if never read. Default to false forcing the values to be read before they can be updated.
            </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.UpdateSetting(Speedy.Protocols.Osc.OscMessage)">
            <summary>
            Update a manager setting with a new value.
            </summary>
            <param name="message"> The value to update with </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.UpdateSetting(Speedy.Protocols.Osc.OscSetting)">
            <summary>
            Update a manager setting with a new value.
            </summary>
            <param name="setting"> The value to update with. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSettingsManager.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatistics.Reset">
            <summary>
            Reset the values for all statistic values in this set.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatistics.SetAllUpdateIntervals(System.TimeSpan)">
            <summary>
            Sets the update interval for all statistic values in this set.
            </summary>
            <param name="interval"> </param>
        </member>
        <member name="T:Speedy.Protocols.Osc.OscStatisticValue">
            <summary>
            Represents a value for an OSC statistic.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatisticValue.#ctor(System.String)">
            <summary>
            Create an instance of the OSC statistic.
            </summary>
            <param name="name"> The name of the value. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatisticValue.#ctor(System.String,Speedy.IDispatcher)">
            <summary>
            Create an instance of the OSC statistic.
            </summary>
            <param name="name"> The name of the value. </param>
            <param name="dispatcher"> The dispatcher for updates. </param>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscStatisticValue.Name">
            <summary>
            The name of the statistic.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscStatisticValue.Rate">
            <summary>
            The rate of the statistic.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscStatisticValue.Total">
            <summary>
            The total of the statistic.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscStatisticValue.UpdateInterval">
            <summary>
            The interval to update the statistic.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatisticValue.Increment(System.Int32)">
            <summary>
            Increment the statistic. Default amount is 1.
            </summary>
            <param name="amount"> The amount to increment. Defaults to 1. </param>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatisticValue.InvokePropertyChanged">
            <summary>
            Notify the UI with property changed events.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatisticValue.Reset">
            <summary>
            Resets the statistic to 0.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscStatisticValue.UpdateRate">
            <summary>
            Updates the rate of updates.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscSymbol.#ctor(System.String)">
            <summary>
            Represents an alternate type for systems that differentiate "symbols" from "strings".
            </summary>
            <param name="value"> The symbol value. </param>
        </member>
        <member name="T:Speedy.Protocols.Osc.OscTimeTag">
            <summary>
            Time tags are represented by a 64 bit fixed point number. The first 32 bits specify the number of seconds since midnight on January 1, 1900, and
            the last 32 bits specify fractional parts of a second to a precision of about 200 picoseconds. This is the representation used by Internet NTP
            timestamps.The time tag value consisting of 63 zero bits followed by a one in the least significant bit is a special case meaning "immediately."
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Osc.OscTimeTag.MaxValue">
            <summary>
            The maximum OSC date time for any OscTimeTag.
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Osc.OscTimeTag.MaxDateTime">
            <summary>
            The minimum date for any OscTimeTag.
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Osc.OscTimeTag.MinDateTime">
            <summary>
            The minimum date for any OscTimeTag.
            </summary>
        </member>
        <member name="F:Speedy.Protocols.Osc.OscTimeTag.MinValue">
            <summary>
            The minimum OSC date time for any OscTimeTag.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscTimeTag.Now">
            <summary>
            Gets a OscTimeTag object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscTimeTag.PreciseValue">
            <summary>
            Gets the number of seconds including fractional parts since midnight on January 1, 1900.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscTimeTag.Seconds">
            <summary>
            Gets the number of seconds since midnight on January 1, 1900. This is the first 32 bits of the 64 bit fixed point OscTimeTag value.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscTimeTag.SubSeconds">
            <summary>
            Gets the fractional parts of a second. This is the 32 bits of the 64 bit fixed point OscTimeTag value.
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscTimeTag.UtcNow">
            <summary>
            Gets a OscTimeTag object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:Speedy.Protocols.Osc.OscTimeTag.Value">
            <summary>
            Gets or set the value of the tag.
            </summary>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscTimeTag.Add(System.TimeSpan)">
            <summary>
            Adds a timespan to this time tag.
            </summary>
            <param name="span"> The time span to be added. </param>
            <returns> The adjusted time. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscTimeTag.AddMilliseconds(System.Double)">
            <summary>
            Adds milliseconds to this time tag.
            </summary>
            <param name="value"> The milliseconds to be added. </param>
            <returns> The adjusted time. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscTimeTag.AddSeconds(System.Double)">
            <summary>
            Adds seconds to this time tag.
            </summary>
            <param name="value"> The seconds to be added. </param>
            <returns> The adjusted time. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscTimeTag.FromDateTime(System.DateTime)">
            <summary>
            Get a OscTimeTag from a DateTime value.
            </summary>
            <param name="datetime"> DateTime value. </param>
            <returns> The equivalent value as an osc time tag. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscTimeTag.FromTimeSpan(System.TimeSpan)">
            <summary>
            Get a OscTimeTag from a TimeSpan value.
            </summary>
            <param name="span"> The span of time. </param>
            <returns> The equivalent value as an osc time tag. </returns>
        </member>
        <member name="M:Speedy.Protocols.Osc.OscTimeTag.ToDateTime">
            <summary>
            Get the equivalent DateTime value from the OscTimeTag.
            </summary>
            <returns>
            The equivalent value as DateTime type.
            </returns>
        </member>
        <member name="T:Speedy.RandomGenerator">
            <summary>
            Random generator can generate many different types of random data.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.AllCharacters">
            <summary>
            All characters including Alphabet, Numbers, Symbols, NonPrintable
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.Alphabet">
            <summary>
            The full alphabet with lower and upper cased versions.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.AlphabetAndNumbers">
            <summary>
            The full alphabet with lower / upper cased versions and numbers.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.FullTable">
            <summary>
            Full table of all 255 ascii characters.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.NonPrintable">
            <summary>
            A subset of non printable characters. Not an exhaustive list.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.Numbers">
            <summary>
            All numbers 0-9.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.Symbols">
            <summary>
            A subset of symbols. Not an exhaustive list.
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.AlphabetCharacters">
            <summary>
            The full array of characters for <see cref="F:Speedy.RandomGenerator.Alphabet" />
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.AlphabetAndNumbersCharacters">
            <summary>
            The full array of characters for <see cref="F:Speedy.RandomGenerator.AlphabetAndNumbers" />
            </summary>
        </member>
        <member name="F:Speedy.RandomGenerator.LoremIpsumWords">
            <summary>
            A list of lorem ipsum words.
            </summary>
        </member>
        <member name="M:Speedy.RandomGenerator.GetBytes(System.Int32)">
            <summary>
            Returns a byte array with random data values.
            </summary>
            <param name="numberOfBytes"> The number of bytes to generate. </param>
            <returns> The generated random byte array data. </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.GetItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets a random item from a list.
            </summary>
            <typeparam name="T"> The type of the item in the collection. </typeparam>
            <param name="items"> The list of items. </param>
            <returns> A random item or the default value if the list is empty. </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.GetPassword(System.Int32,System.Boolean)">
            <summary>
            Get a random password.
            </summary>
            <param name="length"> The length to get. Defaults to 16. </param>
            <param name="excludeSymbols"> Optional exclude symbols. Defaults to true. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.GetPhoneNumber(System.Boolean)">
            <summary>
            Gets a randomly generated phone.
            </summary>
            <param name="formatted"> If true then format the number as "(123) 456-7890". </param>
            <returns> The phone number. </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.LoremIpsum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Create a random string containing the "lorem ipsum" words. This is very useful during testing.
            </summary>
            <param name="minWords"> The minimum number of words per sentence. </param>
            <param name="maxWords"> The maximum number of words per sentence. </param>
            <param name="minSentences"> The minimum number of sentences per paragraph. </param>
            <param name="maxSentences"> The maximum number of sentences per paragraph. </param>
            <param name="numParagraphs"> The number of paragraphs to generate. </param>
            <param name="prefix"> An optional paragraph prefix. </param>
            <param name="suffix"> An optional paragraph suffix. </param>
            <returns> The generated lorem ipsum data. </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextBool">
            <summary>
            Returns a random bool value.
            </summary>
            <returns> The random bool value. </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextDateTime">
            <summary>
            Returns a random datetime that is within a specified range.
            </summary>
            <returns>
            A datetime greater than or equal to minValue and less than maxValue; that is, the range of return
            values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextDateTime(System.DateTime,System.DateTime)">
            <summary>
            Returns a random datetime that is within a specified range.
            </summary>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive maximum bound of the random number returned. </param>
            <returns>
            A datetime greater than or equal to minValue and less than maxValue; that is, the range of return
            values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextDecimal(System.Decimal,System.Decimal,System.Byte)">
            <summary>
            Returns a random decimal number that is within a specified range.
            </summary>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive maximum bound of the random number returned. </param>
            <param name="scale"> The scale about to include in the next double. Defaults to 0. </param>
            <returns>
            A decimal number greater than or equal to minValue and less than maxValue; that is, the range of return
            values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextDouble(System.Double,System.Double,System.Byte)">
            <summary>
            Returns a random double floating point that is within a specified range.
            </summary>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive maximum bound of the random number returned. </param>
            <param name="scale"> The scale of the double. How precise? 1 = 0.1, 2 = 0.01 </param>
            <returns>
            A double floating point number greater than or equal to minValue and less than maxValue; that is, the
            range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextInteger(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive upper bound of the random number returned. </param>
            <returns>
            A 32-bit signed integer greater than or equal to minimum and less than maximum; that is, the range
            of return values includes minimum but not maximum. If minimum equals maximum, minimum is returned.
            </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minimum"> The inclusive lower bound of the random number returned. </param>
            <param name="maximum"> The exclusive upper bound of the random number returned. </param>
            <returns>
            A 64-bit signed integer greater than or equal to minimum and less than maximum; that is, the range
            of return values includes minimum but not maximum. If minimum equals maximum, minimum is returned.
            </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.NextString(System.Int32,System.String)">
            <summary>
            Generate a random string value.
            </summary>
            <param name="length"> The length of the string to create. </param>
            <param name="allowedChars"> The allowed characters. Defaults to <see cref="F:Speedy.RandomGenerator.AlphabetAndNumbers" />. </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> </exception>
        </member>
        <member name="M:Speedy.RandomGenerator.Populate(System.Char[]@)">
            <summary>
            Populate an array of char.
            </summary>
            <param name="data"> The array to populate. </param>
        </member>
        <member name="M:Speedy.RandomGenerator.SetPassword(System.Security.SecureString,System.Int32,System.Boolean)">
            <summary>
            Set a random password to the provided builder.
            </summary>
            <param name="builder"> The builder to be updated. </param>
            <param name="length"> The length to get. Defaults to 16. </param>
            <param name="excludeSymbols"> Optional exclude symbols. Defaults to true. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.RandomGenerator.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle a list of items into a random order.
            </summary>
            <typeparam name="T"> The type of the items in the list. </typeparam>
            <param name="list"> The list of items. </param>
            <returns> The shuffled list. </returns>
        </member>
        <member name="T:Speedy.Serialization.Converters.IsoDateTimeConverter">
            <summary>
            Converter used to deserialize JSON string to IsoDateTime.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Speedy.IsoDateTime,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,Speedy.IsoDateTime,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.Converters.PartialUpdateConverter">
            <summary>
            Converter used to deserialize JSON string to partial updates.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.Converters.PartialUpdateConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.PartialUpdateConverter.ConvertType(Newtonsoft.Json.Linq.JTokenType)">
            <summary>
            Convert the JTokenType to a Type.
            </summary>
            <param name="type"> The type to be converted. </param>
            <returns> The converted type value. </returns>
        </member>
        <member name="M:Speedy.Serialization.Converters.PartialUpdateConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.PartialUpdateConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.Converters.VersionStringConverter">
            <summary>
            Converter for Version to convert to/from string format of "0.0.0.0".
            </summary>
        </member>
        <member name="P:Speedy.Serialization.Converters.VersionStringConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Serialization.Converters.VersionStringConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.VersionStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Version,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.VersionStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Version,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.JsonContractResolver">
            <summary>
            The contract resolver used for ToJson and GetSerializerSettings.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.JsonContractResolver.#ctor(System.Boolean,System.Func{System.Type,System.Collections.Generic.HashSet{System.String}},System.Func{System.String,System.Boolean})">
            <summary>
            Instantiates a contract resolver for serializing.
            </summary>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="getIgnoredProperties"> </param>
            <param name="ignoreMember"> </param>
        </member>
        <member name="M:Speedy.Serialization.JsonContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.Serializer">
            <summary>
            Represents a serializer
            </summary>
        </member>
        <member name="P:Speedy.Serialization.Serializer.DefaultSettings">
            <summary>
            Represents default values to set when <see cref="M:Speedy.Serialization.SerializerSettings.Reset" /> is invoked.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.Serializer.AddOrUpdateConverter(Newtonsoft.Json.JsonConverter)">
            <summary>
            Add or update converter to the JsonSettings.
            </summary>
            <param name="converter"> The converter to add or update. </param>
        </member>
        <member name="M:Speedy.Serialization.Serializer.DeepClone``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Deep clone the item.
            </summary>
            <typeparam name="T"> The type to clone. </typeparam>
            <param name="item"> The item to clone. </param>
            <param name="maxDepth"> The max depth to clone. Defaults to null. </param>
            <param name="ignoreVirtuals"> Flag to ignore the virtual properties. </param>
            <returns> The clone of the item. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.DeepCloneObject(System.Object,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Deep clone the item.
            </summary>
            <param name="item"> The item to clone. </param>
            <param name="maxDepth"> The max depth to clone. Defaults to null. </param>
            <param name="ignoreVirtuals"> Flag to ignore the virtual properties. </param>
            <returns> The clone of the item. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson``1(System.String)">
            <summary>
            Convert the string into an object.
            </summary>
            <typeparam name="T"> The type to convert into. </typeparam>
            <param name="item"> The JSON data to deserialize. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson``1(System.String,Speedy.Serialization.SerializerSettings)">
            <summary>
            Convert the string into an object.
            </summary>
            <typeparam name="T"> The type to convert into. </typeparam>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="settings"> The settings to be used. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson(System.String,System.Type)">
            <summary>
            Convert the string into an object.
            </summary>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="type"> The type to convert into. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson(System.String,System.Type,Speedy.Serialization.SerializerSettings)">
            <summary>
            Convert the string into an object.
            </summary>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="type"> The type to convert into. </param>
            <param name="settings"> The settings to be used. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Convert the string into an object.
            </summary>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="type"> The type to convert into. </param>
            <param name="settings"> The settings to be used. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.IsJson(System.String)">
            <summary>
            Determines if the string is a JSON string.
            </summary>
            <param name="input"> The value to validate. </param>
            <returns> True if the input is JSON or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.IsQueryString(System.String)">
            <summary>
            Determines if the string is a query string
            </summary>
            <param name="input"> The value to validate. </param>
            <returns> True if the input is a query string or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ResetDefaultSettings">
            <summary>
            Reset the DefaultSettings back to default settings.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToJson``1(``0,Speedy.Serialization.SerializerSettings)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <param name="settings"> The settings for the serializer. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToJson``1(``0)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToJson``1(``0,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <param name="indented"> The flag to determine if the JSON should be indented or not. Default value is false. </param>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="ignoreNullValues"> True to ignore members that are null else include them. </param>
            <param name="ignoreReadOnly"> True to ignore members that are read only. </param>
            <param name="ignoreVirtuals"> Flag to ignore virtual members. Default value is false. </param>
            <param name="convertEnumsToString"> True to convert enumerations to strings value instead. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToRawJson``1(``0)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToRawJson``1(``0,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <param name="indented"> The flag to determine if the JSON should be indented or not. Default value is false. </param>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="ignoreNullValues"> True to ignore members that are null else include them. </param>
            <param name="ignoreReadOnly"> True to ignore members that are read only. </param>
            <param name="ignoreVirtuals"> Flag to ignore virtual members. Default value is false. </param>
            <param name="convertEnumsToString"> True to convert enumerations to strings value instead. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="T:Speedy.Serialization.SerializerSettings">
            <summary>
            Represents serialization settings
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.#ctor">
            <summary>
            Instantiates a set of settings for the serializer.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Action{Speedy.Serialization.SerializerSettings},System.Action{Speedy.Serialization.SerializerSettings})">
            <summary>
            Instantiates a set of settings for the serializer.
            </summary>
            <param name="indented"> The flag to determine if the JSON should be indented or not. Default value is false. </param>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="ignoreNullValues"> The flag to determine to ignore members that are null else include them. </param>
            <param name="ignoreReadOnly"> The flag to determine to ignore members that are readonly else include them. </param>
            <param name="ignoreVirtuals"> The flag to determine to ignore members that are virtual members else include them. </param>
            <param name="convertEnumsToString"> The flag to determine convert enums to string rather than number. </param>
            <param name="beginReset"> An optional beginning initializer for when resetting. </param>
            <param name="endReset"> An optional ending initializer for when resetting. </param>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.CamelCase">
            <summary>
            The flag to determine if we should use camel case or not.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.ConvertEnumsToString">
            <summary>
            The flag to determine convert enums to string rather than number.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.DefaultSettings">
            <summary>
            Represents default values to set when <see cref="M:Speedy.Serialization.SerializerSettings.Reset" /> is invoked.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.IgnoreNullValues">
            <summary>
            The flag to determine to ignore members that are null else include them.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.IgnoreReadOnly">
            <summary>
            The flag to determine to ignore members that are readonly else include them.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.IgnoreVirtuals">
            <summary>
            The flag to determine to ignore members that are virtual members else include them.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.Indented">
            <summary>
            The flag to determine if the JSON should be indented or not.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.JsonSettings">
            <summary>
            The JSON setting for Newtonsoft.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.AddOrUpdateConverter(Newtonsoft.Json.JsonConverter)">
            <summary>
            Add or update converter to the JsonSettings.
            </summary>
            <param name="converter"> The converter to add or update. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.Ignore(System.Type,System.String[])">
            <summary>
            Explicitly ignore the given property(s) for the given type
            </summary>
            <param name="type"> The type to ignore some properties on. </param>
            <param name="propertyNames"> One or more properties to ignore. Leave empty to ignore the type entirely. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.Ignore(System.String[])">
            <summary>
            Explicitly ignore the given property(s) for all types
            </summary>
            <param name="propertyNames"> One or more properties to ignore. Leave empty to ignore the type entirely. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.OnPropertyChangedInDispatcher(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.RemoveConverter``1">
            <summary>
            Remove a converter of the provided type
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.RemoveConverter(System.Type)">
            <summary>
            Remove a converter of the provided type
            </summary>
            <param name="converterType"> </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.Reset">
            <summary>
            Reset the state of shared settings
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.ResetForDefaultSettings">
            <summary>
            Reset the state of the "DefaultSettings" back to initial state.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.ResetDefaultSettings">
            <summary>
            Reset the DefaultSettings back to default settings.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateWith(Speedy.Serialization.SerializerSettings,System.String[])">
            <summary>
            Update the SyncStatistics with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateJsonSerializerSettings">
            <summary>
            Configure the JsonSettings using our SerializerSettings values.
            </summary>
            <returns> The serialization settings. </returns>
        </member>
        <member name="T:Speedy.ShortGuid">
            <summary>
            Represents a globally unique identifier (GUID) with a shorter string value.
            </summary>
        </member>
        <member name="F:Speedy.ShortGuid.Empty">
            <summary>
            A read-only instance of the ShortGuid class whose value
            is guaranteed to be all zeroes.
            </summary>
        </member>
        <member name="M:Speedy.ShortGuid.#ctor">
            <summary>
            Creates a ShortGuid.
            </summary>
        </member>
        <member name="M:Speedy.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string.
            </summary>
            <param name="value">
            The encoded guid as a base64 string.
            </param>
        </member>
        <member name="M:Speedy.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid.
            </summary>
            <param name="guid"> The Guid to encode. </param>
        </member>
        <member name="P:Speedy.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid.
            </summary>
        </member>
        <member name="P:Speedy.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string.
            </summary>
        </member>
        <member name="M:Speedy.ShortGuid.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.NewGuid">
            <summary>
            Initializes a new instance of the ShortGuid class.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Equality(Speedy.ShortGuid,Speedy.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying.
            Guid value.
            </summary>
            <param name="x"> The guid to be tested. </param>
            <param name="y"> The guid to be tested against. </param>
            <returns> Returns true if the values match or otherwise false if they do not match. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(Speedy.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivalent
            </summary>
            <param name="shortGuid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(Speedy.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivalent
            </summary>
            <param name="shortGuid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(System.String)~Speedy.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(System.Guid)~Speedy.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid
            </summary>
            <param name="guid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Inequality(Speedy.ShortGuid,Speedy.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the
            same underlying Guid value.
            </summary>
            <param name="x"> The guid to be tested. </param>
            <param name="y"> The guid to be tested against. </param>
            <returns> Returns true if the values do not match or otherwise false if they do match. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.ParseGuid(System.String)">
            <summary>
            Creates a new short Guid from the provided full Guid.
            </summary>
            <param name="guid"> The guid to be parsed. </param>
            <returns> The short guid version of the full guid. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.ParseShortGuid(System.String)">
            <summary>
            Creates a new short Guid from the provided short Guid string.
            </summary>
            <param name="sguid"> The short guid string to be parsed. </param>
            <returns> The short guid version of the short guid string. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string.
            </summary>
            <param name="value"> The base64 encoded string of a Guid. </param>
            <returns> A new Guid </returns>
        </member>
        <member name="M:Speedy.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22.
            characters long.
            </summary>
            <param name="guid"> The Guid to encode. </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Storage.CollectionChangeTracker">
            <summary>
            Simple collection tracker to help with collection changed notification.
            </summary>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.#ctor">
            <summary>
            Instantiates an instance of the collection change tracker.
            </summary>
        </member>
        <member name="P:Speedy.Storage.CollectionChangeTracker.Added">
            <summary>
            The items added during this collection update.
            </summary>
        </member>
        <member name="P:Speedy.Storage.CollectionChangeTracker.Modified">
            <summary>
            The items modified during this collection update.
            </summary>
        </member>
        <member name="P:Speedy.Storage.CollectionChangeTracker.Removed">
            <summary>
            The items remove during this collection update.
            </summary>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddAddedEntities(System.Collections.IList)">
            <summary>
            Add a list of items that was added during the collection update.
            </summary>
            <param name="list"> The list of items that was added. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddAddedEntity``1(``0)">
            <summary>
            Add an item that was added during the collection update.
            </summary>
            <typeparam name="T"> The type of the item. </typeparam>
            <param name="item"> The item that was added. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddModifiedEntities(System.Collections.IList)">
            <summary>
            Add a list of items that was modified during the collection update.
            </summary>
            <param name="list"> The list of items that was modified. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddModifiedEntity``1(``0)">
            <summary>
            Add an item that was modified during the collection update.
            </summary>
            <typeparam name="T"> The type of the item. </typeparam>
            <param name="item"> The item that was modified. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddRemovedEntities(System.Collections.IList)">
            <summary>
            Add a list of items that was removed during the collection update.
            </summary>
            <param name="list"> The list of items that was removed. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddRemovedEntity``1(``0)">
            <summary>
            Add an item that was removed during the collection update.
            </summary>
            <typeparam name="T"> The type of the item. </typeparam>
            <param name="item"> The item that was removed. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.Reset">
            <summary>
            Reset the tracking session.
            </summary>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.Update(Speedy.Storage.CollectionChangeTracker)">
            <summary>
            Update the tracker with a collection of changes.
            </summary>
            <param name="tracker"> The changes to the database. </param>
        </member>
        <member name="M:Speedy.Storage.EntityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Speedy.Storage.EntityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj"> The <see cref="T:System.Object" /> for which a hash code is to be returned. </param>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj" /> is a reference type and
            <paramref name="obj" /> is null.
            </exception>
        </member>
        <member name="M:Speedy.Storage.EntityState.GetStateProperties(System.Type)">
            <summary>
            Represents properties we want to "track" changes for.
            </summary>
            <param name="type"> The type of the entity. </param>
            <returns> The properties for state tracking. </returns>
        </member>
        <member name="M:Speedy.Storage.EntityState`2.UpdateEntity(Speedy.Entity{`1},Speedy.Entity{`1})">
            <summary>
            Update the entity with the new values.
            </summary>
            <param name="entity"> The entity to update. </param>
            <param name="updatedEntity"> The new values to update the entity with. </param>
        </member>
        <member name="T:Speedy.Storage.IDatabaseRepository">
            <summary>
            This class is an internal class.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.AssignKey(Speedy.IEntity,System.Collections.Generic.List{Speedy.IEntity})">
            <summary>
            Assign primary keys to the entity.
            </summary>
            <param name="item"> The entity to assign a key to. </param>
            <param name="processed"> The list of entities that have already been processed. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.AssignKeys(System.Collections.Generic.List{Speedy.IEntity})">
            <summary>
            Assign primary keys to all entities.
            </summary>
            <param name="processed"> The list of entities that have already been processed. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.DiscardChanges">
            <summary>
            Discard all changes made in this repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.HasChanges">
            <summary>
            Determines if the repository has changes.
            </summary>
            <returns> True if there are changes and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.HasDependentRelationship(System.Object[],System.Object)">
            <summary>
            Check too see if there are other entities that depends on this entity.
            </summary>
            <param name="value"> The values to check. </param>
            <param name="id"> The ID of the entity. </param>
            <returns> True if the entity exist and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.Read(System.Object)">
            <summary>
            Reads an object from the repository.
            </summary>
            <param name="id"> The ID of the item to read. </param>
            <returns> The object from the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.RemoveDependent(System.Object[],System.Object)">
            <summary>
            Remove the dependencies for the entity.
            </summary>
            <param name="value"> The values to check. </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.SaveChanges">
            <summary>
            Save the data to the data store.
            </summary>
            <returns> The number of items saved. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.SetDependentToNull(System.Object[],System.Object)">
            <summary>
            Set the foreign key values for this dependent to null.
            </summary>
            <param name="value"> The values for processing. </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.Sort">
            <summary>
            Sorts the repository by the primary key.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.UpdateRelationships">
            <summary>
            Updates the relationships for this entity.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.ValidateEntities">
            <summary>
            Validates all entities in the repository.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.IKeyValueRepository`1">
            <summary>
            Represents a repository of key value pairs.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.IKeyValueRepository`1.Count">
            <summary>
            The number of items in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.IKeyValueRepository`1.Name">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Archive">
            <summary>
            Archives the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Clear">
            <summary>
            Clears the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Delete">
            <summary>
            Delete the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Flush">
            <summary>
            Flushes all cached items to storage.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Load(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Loads items directly into the repository. This will not check the keys so we can
            speed up the loading of items. If you need key protection then use Write instead.
            </summary>
            <param name="items"> The items to load into the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read">
            <summary>
            Read the repository using an enumerator.
            </summary>
            <returns> The list of key value pairs to enumerate. </returns>
            <remarks>
            Must be IEnumerable so we can yield the return.
            </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read(System.String)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <returns> The value for the key. </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Could not find the entry with the key. </exception>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="keys"> The keys of the items to read. </param>
            <returns> The value for the keys. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="condition"> The condition to test each key against. </param>
            <returns> The value for the keys that match the condition. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.ReadKeys">
            <summary>
            Read all the keys from the repository.
            </summary>
            <returns> The keys for the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Remove(System.String)">
            <summary>
            Removes an item from the repository by the key provided.
            </summary>
            <param name="key"> The key of the item to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Remove(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Removes items from the repository by the keys provided.
            </summary>
            <param name="keys"> The keys of the items to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Save">
            <summary>
            Save the changes to the repository (Writes, Removes, etc).
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.TryRead(System.String,`0@)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <param name="value"> The value read. </param>
            <returns> True if the key was found or false if otherwise.. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.String,`0)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.String,System.String)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="E:Speedy.Storage.KeyValue.IKeyValueRepository`1.OnEnumerated">
            <summary>
            Event for when an item is enumerated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1">
            <summary>
            Represents provider for a repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.ArchiveRepository(System.String)">
            <summary>
            Archive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to archive. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.AvailableRepositories(System.String[])">
            <summary>
            Gets a list of names for available repositories.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> A list of repository names that are available to access. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.DeleteRepository(System.String)">
            <summary>
            Delete a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to delete. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.OpenAvailableRepository(System.String[])">
            <summary>
            Gets the first available repository that is not currently open.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> The repository that was opened or null if none available. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.OpenRepository(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Gets a repository by the provided name. If the repository cannot be found a new one is created and returned.
            </summary>
            <param name="name"> The name of the repository to get. </param>
            <param name="options"> The options for the repository. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.UnarchiveRepository(System.String)">
            <summary>
            Unarchive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to unarchive. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepository">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository.#ctor(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.#ctor(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Count">
            <summary>
            The number of items in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Name">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Archive">
            <summary>
            Archives the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Clear">
            <summary>
            Clears the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Delete">
            <summary>
            Delete the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Flush">
            <summary>
            Flushes all cached items to storage.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Load(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Loads items directly into the repository. This will not check the keys so we can
            speed up the loading of items.
            </summary>
            <param name="items"> The items to load into the repository. </param>
            <remarks> Will not be cached. These items will be written directly to disk. </remarks>
            <remarks> If you need key protection then use Write instead. </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read">
            <summary>
            Read the repository using an enumerator.
            </summary>
            <returns> The list of key value pairs to enumerate. </returns>
            <remarks>
            Must be IEnumerable so we can yield the return.
            </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read(System.String)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <returns> The value for the key. </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Could not find the entry with the key. </exception>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="keys"> The keys of the items to read. </param>
            <returns> The value for the keys. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="condition"> The condition to test each key against. </param>
            <returns> The value for the keys that match the condition. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.ReadKeys">
            <summary>
            Read all the keys from the repository.
            </summary>
            <returns> The keys for the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Remove(System.String)">
            <summary>
            Removes an item from the repository by the key provided.
            </summary>
            <param name="key"> The key of the item to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Remove(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Removes items from the repository by the keys provided.
            </summary>
            <param name="keys"> The keys of the items to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Save">
            <summary>
            Save the changes to the repository (Loads, Writes, Removes, etc).
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.TryRead(System.String,`0@)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <param name="value"> The value read. </param>
            <returns> True if the key was found or false if otherwise.. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.String,`0)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.String,System.String)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.GetCount">
            <summary>
            Gets the count if items in the repository.
            </summary>
            <returns> The number of items in the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.UpdateCache">
            <summary>
            Updates the cache with the changes.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Archived">
            <summary>
            Will be called on archive request.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Deleted">
            <summary>
            Will be called on deletion request.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.OnEnumerated">
            <summary>
            Will be called on each item when this repository is enumerated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider.#ctor(System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.#ctor(System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.ArchivedRepositories">
            <summary>
            A list of the repositories that have been archived.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.Limit">
            <summary>
            Gets the maximum limit of items to be cached in memory.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.OpenedRepositories">
            <summary>
            A list of the repositories that have been opened.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.Timeout">
            <summary>
            Gets the amount of time to cache items in memory before persisting to disk.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.ArchiveRepository(System.String)">
            <summary>
            Archive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to archive. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.AvailableRepositories(System.String[])">
            <summary>
            Gets a list of names for available repositories.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> A list of repository names that are available to access. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.DeleteRepository(System.String)">
            <summary>
            Delete a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to delete. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.OpenAvailableRepository(System.String[])">
            <summary>
            Gets the first available repository that is not currently open.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> The repository that was opened or null if none available. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.OpenRepository(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Gets a repository by the provided name. If the repository cannot be found a new one is created and returned.
            </summary>
            <param name="name"> The name of the repository to get. </param>
            <param name="options"> The options for the repository. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.UnarchiveRepository(System.String)">
            <summary>
            Unarchive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to unarchive. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepository">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository.#ctor(System.String,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository.#ctor(System.String,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepository`1">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.#ctor(System.String,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.#ctor(System.String,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.#ctor(System.IO.DirectoryInfo,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.Count">
            <summary>
            The number of items in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.DirectoryInfo">
            <summary>
            The directory the repository will be located.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.Name">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.FileInfo">
            <summary>
            Gets the file info of the repository file.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.TempFileInfo">
            <summary>
            Gets the full path to the temporary repository file.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Archive">
            <summary>
            Archives the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Clear">
            <summary>
            Clears the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Create(System.IO.DirectoryInfo,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Create(System.String,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Create(System.String,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Delete">
            <summary>
            Delete the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Flush">
            <summary>
            Flushes all cached items to storage.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Load(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Loads items directly into the repository. This will not check the keys so we can
            speed up the loading of items.
            </summary>
            <param name="items"> The items to load into the repository. </param>
            <remarks> Will not be cached. These items will be written directly to disk. </remarks>
            <remarks> If you need key protection then use Write instead. </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read">
            <summary>
            Read the repository using an enumerator.
            </summary>
            <returns> The list of key value pairs to enumerate. </returns>
            <remarks>
            Must be IEnumerable so we can yield the return.
            </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read(System.String)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <returns> The value for the key. </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Could not find the entry with the key. </exception>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="keys"> The keys of the items to read. </param>
            <returns> The value for the keys. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="condition"> The condition to test each key against. </param>
            <returns> The value for the keys that match the condition. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.ReadKeys">
            <summary>
            Read all the keys from the repository.
            </summary>
            <returns> The keys for the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Refresh">
            <summary>
            Reads items from disk into the cache. This will not check the keys so we can speed up the loading of items.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Remove(System.String)">
            <summary>
            Removes an item from the repository by the key provided.
            </summary>
            <param name="key"> The key of the item to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Remove(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Removes items from the repository by the keys provided.
            </summary>
            <param name="keys"> The keys of the items to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Save">
            <summary>
            Save the changes to the repository (Loads, Writes, Removes, etc).
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.TryRead(System.String,`0@)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <param name="value"> The value read. </param>
            <returns> True if the key was found or false if otherwise.. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.String,`0)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.String,System.String)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.GetCount">
            <summary>
            Gets the count if items in the repository.
            </summary>
            <returns> The number of items in the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Initialize">
            <summary>
            Initializes the path the repository is to be located.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.SaveRepository(System.DateTime)">
            <summary>
            Saves items to the repository. Including items over the cache limit and any that have expired due to the cache timeout.
            </summary>
            <param name="threshold"> The date time threshold that was calculated from the cache timeout. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.UpdateCache">
            <summary>
            Updates the cache with the changes.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueRepository`1.OnEnumerated">
            <summary>
            Will be called on each item when this repository is enumerated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepositoryOptions">
            <summary>
            Options for a key value repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.IgnoreVirtualMembers">
            <summary>
            Gets or sets a flag to ignore virtual members when saving entities.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.Limit">
            <summary>
            Gets or sets the caching limit.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.ReadOnly">
            <summary>
            Gets or sets the flag to determine if this repository is read only.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.Timeout">
            <summary>
            Gets or sets the maximum time to cache items.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepositoryProvider">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider.#ctor(System.IO.DirectoryInfo,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.#ctor(System.IO.DirectoryInfo,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.Directory">
            <summary>
            Gets the directory where the repository will reside.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.Limit">
            <summary>
            Gets the maximum limit of items to be cached in memory.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.Timeout">
            <summary>
            Gets the amount of time to cache items in memory before persisting to disk.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.ArchiveRepository(System.String)">
            <summary>
            Archive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to archive. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.AvailableRepositories(System.String[])">
            <summary>
            Gets a list of names for available repositories.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> A list of repository names that are available to access. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.DeleteRepository(System.String)">
            <summary>
            Delete a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to delete. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.OpenAvailableRepository(System.String[])">
            <summary>
            Gets the first available repository that is not currently open.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> The repository that was opened or null if none available. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.OpenRepository(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Gets a repository by the provided name. If the repository cannot be found a new one is created and returned.
            </summary>
            <param name="name"> The name of the repository to get. </param>
            <param name="options"> The options for the repository. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.UnarchiveRepository(System.String)">
            <summary>
            Unarchive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to unarchive. </param>
        </member>
        <member name="T:Speedy.Storage.MemoryCache">
            <summary>
            Represent a memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.#ctor">
            <summary>
            Instantiates a memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.#ctor(System.TimeSpan)">
            <summary>
            Instantiates a memory cache.
            </summary>
            <param name="defaultTimeout"> The default timeout of new entries. </param>
        </member>
        <member name="P:Speedy.Storage.MemoryCache.Count">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.MemoryCache.DefaultTimeout">
            <summary>
            The default timeout for items when they are added.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCache.IsEmpty">
            <summary>
            Indicates whether or not the memory cache is empty.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCache.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.MemoryCache.SlidingExpiration">
            <summary>
            Determines if the expiration time should be extended when read from the cache.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCache.SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Clear">
            <summary>
            Clear the memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.MemoryCache.GetEnumerator">
            <summary>
            Enumerator for the memory cache.
            </summary>
            <returns> The enumerator for the collection. </returns>
            <remarks>
            Enumeration should NOT be considered "accessing" items
            We only bump last accessed by direct access. This allows
            Enumeration of the item to check expiration
            </remarks>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Remove(System.String)">
            <summary>
            Remove an entry by the key name.
            </summary>
            <param name="key"> The name of the key. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Remove(Speedy.Storage.MemoryCacheItem)">
            <summary>
            Remove the entry from the cache.
            </summary>
            <param name="memoryCacheItem"> The item to remove from the cache. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Set(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Set a new entry with a custom timeout. This will add a new entry or update an existing one.
            </summary>
            <param name="key"> The key of the entry. </param>
            <param name="value"> The value of the entry. </param>
            <param name="timeout"> The custom timeout of the entry. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.TryGet(System.String,Speedy.Storage.MemoryCacheItem@)">
            <summary>
            Try to get an entry from the cache.
            </summary>
            <param name="key"> The key of the entry. </param>
            <param name="value"> The entry that was found or otherwise null. </param>
            <returns> True if the entry was found or otherwise false. </returns>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Storage.MemoryCacheItem">
            <summary>
            Represents an item for a memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCacheItem.#ctor(Speedy.Storage.MemoryCache,System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Instantiates a memory cache item.
            </summary>
            <param name="cache"> The cache this item is for. </param>
            <param name="key"> The key of the item. </param>
            <param name="value"> The value of the item. </param>
            <param name="timeout"> The timeout of the item. </param>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.CreatedOn">
            <summary>
            The date and time the cached item was created.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.ExpirationDate">
            <summary>
            The date and time the item will expire.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.HasExpired">
            <summary>
            Indicates if the item has expired.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.Key">
            <summary>
            The key of the item.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.LastAccessed">
            <summary>
            The last time the item was accessed.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.Timeout">
            <summary>
            The timeout value of the item.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.Value">
            <summary>
            The value of the item.
            </summary>
        </member>
        <member name="T:Speedy.Storage.IRelationshipRepository">
            <summary>
            This collection representing a list of entities for a relationship.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IRelationshipRepository.UpdateRelationships">
            <summary>
            Updates the relationship for all entities in this list.
            </summary>
        </member>
        <member name="T:Speedy.Storage.RelationshipRepository`2">
            <summary>
            This collection representing a list of entities for a relationship.
            </summary>
            <typeparam name="T"> The type for the relationship. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.Storage.RelationshipRepository`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Speedy.Storage.RelationshipRepository`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.AddOrUpdate(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise,
            false.
            </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
            from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based
            indexing.
            </param>
            <param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="array" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="arrayIndex" /> is less than 0. </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source
            <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
            <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.UpdateRelationships">
            <summary>
            Updates the relationship for all entities in this list.
            </summary>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.GetEnumerable">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Speedy.Storage.Repository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type contained in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.Storage.Repository`2.#ctor(Speedy.Database)">
            <summary>
            Instantiates a repository for the provided database.
            </summary>
            <param name="database"> The database this repository is for. </param>
        </member>
        <member name="P:Speedy.Storage.Repository`2.NeverClearCache">
            <summary>
            Will keep the repository items in cache for the life cycle of the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.Repository`2.Database">
            <summary>
            The database this repository is for.
            </summary>
        </member>
        <member name="P:Speedy.Storage.Repository`2.System#Linq#IQueryable#ElementType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.Repository`2.System#Linq#IQueryable#Expression">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.Repository`2.System#Linq#IQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.AddOrUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.AddOrUpdate(System.Object)">
            <summary>
            Adds or updates an entity in the repository. The ID of the entity must be the default value to add and a value to
            update.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.AssignKey(Speedy.IEntity,System.Collections.Generic.List{Speedy.IEntity})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.AssignKeys(System.Collections.Generic.List{Speedy.IEntity})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAdd(`0[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAdd(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAddOrUpdate(`0[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkRemove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Contains(`0)">
            <summary>
            Check to see if the repository contains this entity.
            </summary>
            <param name="entity"> The entity to test for. </param>
            <returns> True if the entity exist or false it otherwise. </returns>
        </member>
        <member name="M:Speedy.Storage.Repository`2.DiscardChanges">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.GetRawQueryable(System.Func{`0,System.Boolean})">
            <summary>
            Returns a raw queryable.
            </summary>
            <param name="filter"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Storage.Repository`2.HasChanges">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.HasDependentRelationship(System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Including(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.InsertBefore(`0,`0)">
            <summary>
            Insert an entity to the repository before the provided entity. The ID of the entity must be the default value.
            </summary>
            <param name="entity"> The entity to be added. </param>
            <param name="targetEntity"> The entity to locate insert point. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.Read(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Read(`1)">
            <summary>
            Get entity by ID.
            </summary>
            <param name="id"> </param>
            <returns> The entity or null. </returns>
        </member>
        <member name="M:Speedy.Storage.Repository`2.Remove(`1)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.RemoveDependent(System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.SaveChanges">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.SetDependentToNull(System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Sort">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Sort(System.Func{`0,System.Object})">
            <summary>
            Sorts the repository by the provide key.
            </summary>
        </member>
        <member name="M:Speedy.Storage.Repository`2.UpdateRelationships">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.ValidateEntities">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnAddingEntity(`0)">
            <summary>
            Occurs when an entity is being deleted.
            </summary>
            <param name="obj"> The entity that was deleted. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnDeletingEntity(`0)">
            <summary>
            Occurs when an entity is being deleted.
            </summary>
            <param name="obj"> The entity that was deleted. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnSavedChanges(Speedy.Storage.CollectionChangeTracker)">
            <summary>
            Called when for when changes are saved. <see cref="M:Speedy.Storage.Repository`2.SaveChanges" />
            </summary>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnUpdateEntityRelationships(`0)">
            <summary>
            Occurs when an entity relationships are updated.
            </summary>
            <param name="obj"> The entity that was updated. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnValidateEntity(`0)">
            <summary>
            Occurs when an entity is validated.
            </summary>
            <param name="obj"> The entity that was validated. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="E:Speedy.Storage.Repository`2.AddingEntity">
            <summary>
            Occurs when an entity is being added.
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.DeletingEntity">
            <summary>
            Occurs when an entity is being deleted.
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.SavedChanges">
            <summary>
            An event for when changes are saved. <see cref="M:Speedy.Storage.Repository`2.SaveChanges" />
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.UpdateEntityRelationships">
            <summary>
            Occurs when an entity relationships are updated.
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.ValidateEntity">
            <summary>
            Occurs when an entity is being validated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.SyncableRepository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type contained in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.#ctor(Speedy.Database)">
            <summary>
            Instantiates a syncable repository for the provided database.
            </summary>
            <param name="database"> The database this repository is for. </param>
        </member>
        <member name="P:Speedy.Storage.SyncableRepository`2.RealType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.SyncableRepository`2.TypeName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Add(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.GetChangeCount(System.DateTime,System.DateTime,Speedy.Sync.SyncRepositoryFilter)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.GetChanges(System.DateTime,System.DateTime,System.Int32,System.Int32,Speedy.Sync.SyncRepositoryFilter)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.ReadAllKeys">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.ReadByPrimaryId(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.ReadByPrimaryId(`1)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Remove(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Speedy#ISyncableRepository#Read(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Speedy#ISyncableRepository#Read(Speedy.Sync.ISyncEntity,Speedy.Sync.SyncRepositoryFilter)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Storage.SyncKeyComparer">
            <inheritdocs />
        </member>
        <member name="M:Speedy.Storage.SyncKeyComparer.#ctor">
            <summary>
            Instantiates an instance of the natural comparer.
            </summary>
        </member>
        <member name="M:Speedy.Storage.SyncKeyComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Instantiates an instance of the natural comparer.
            </summary>
            <param name="cultureInfo"> </param>
        </member>
        <member name="M:Speedy.Storage.SyncKeyComparer.Compare(System.String,System.String)">
            <inheritdocs />
        </member>
        <member name="T:Speedy.Streams.NoCloseStreamReader">
            <summary>
            Encapsulates a stream reader which does not close the underlying stream.
            </summary>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new stream reader object.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
            <param name="encoding"> The encoding for the stream. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new stream reader object using default encoding.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamReader.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="T:Speedy.Streams.NoCloseStreamWriter">
            <summary>
            Encapsulates a stream writer which does not close the underlying stream.
            </summary>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new stream writer object.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
            <param name="encoding"> The encoding for the stream. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new stream writer object using default encoding.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamWriter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="T:Speedy.Sync.ISyncClient">
            <summary>
            Represents a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.DatabaseProvider">
            <summary>
            The database provider to use during a sync session.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.IncomingConverter">
            <summary>
            An optional converter to process sync objects from Server to Client
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Name">
            <summary>
            Gets or sets the name of the sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Options">
            <summary>
            The options for the sync client
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.OutgoingConverter">
            <summary>
            An optional converter to process sync objects from Client to Server
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Profiler">
            <summary>
            Profiler for tracking specific points during sync client processing.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Statistics">
            <summary>
            The communication statistics for this sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.SyncOptions">
            <summary>
            The options for the sync
            </summary>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <summary>
            Sends changes to a server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="changes"> The changes to write to the server. </param>
            <returns> A list of sync issues if there were any. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <summary>
            Sends issue corrections to a server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="corrections"> The corrections to write to the server. </param>
            <returns> A list of sync issues if there were any. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <summary>
            Starts the sync session.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="options"> The options for the sync session. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.EndSync(System.Guid)">
            <summary>
            Ends the sync session.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <summary>
            Gets the changes from the server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="request"> The details for the request. </param>
            <returns> The list of changes from the server. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <summary>
            Gets the list of sync objects to try and resolve the issue list.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="issues"> The issues to process. </param>
            <returns> The sync objects to resolve the issues. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.GetDatabase">
            <summary>
            Gets an instance of the database this sync client is for.
            </summary>
            <returns> The database that is syncable. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.GetDatabase``1">
            <summary>
            Gets an instance of the database this sync client is for.
            </summary>
            <returns> The database that is syncable. </returns>
        </member>
        <member name="T:Speedy.Sync.ISyncEntity">
            <summary>
            Represent an entity that can be synced.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncEntity.IsDeleted">
            <summary>
            Used to communicate if the sync entity is deleted.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncEntity.SyncId">
            <summary>
            The ID of the sync entity.
            </summary>
            <remarks>
            This ID is should be globally unique. Never reuse GUIDs.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.GetEntityId">
            <summary>
            Gets the primary key (ID) of the sync entity.
            </summary>
            <returns> The primary key value for the sync entity. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.GetEntitySyncId">
            <summary>
            Gets the sync key (ID) of the sync entity. Defaults to SyncId.
            This can be overriden by setting the LookupFilter for a sync repository filter.
            </summary>
            <returns> The sync key value for the sync entity. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.GetExclusions(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get exclusions for the provided type.
            </summary>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> The list of members to be excluded. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.IsPropertyExcludedForIncomingSync(System.String)">
            <summary>
            Checks a property to see if it can be synced in incoming data.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property can be update during sync or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.IsPropertyExcludedForOutgoingSync(System.String)">
            <summary>
            Checks a property to see if it can be synced in outgoing data.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property can be update during sync or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.IsPropertyExcludedForSyncUpdate(System.String)">
            <summary>
            Checks a property has been excluded from updating.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property can be written during an update or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.SetEntitySyncId(System.Guid)">
            <summary>
            Gets the sync key (ID) of the sync entity. Defaults to SyncId.
            This can be overriden by setting the LookupFilter for a sync repository filter.
            </summary>
            <param name="syncId"> The sync key value for the sync entity. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.ToSyncObject">
            <summary>
            Converts the entity into an object to transmit.
            </summary>
            <returns> The sync object for this entity. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.UpdateWith(Speedy.Sync.ISyncEntity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the entity with the provided entity. Virtual properties will be ignored.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
        </member>
        <member name="T:Speedy.Sync.ISyncServerProxy">
            <summary>
            Represents a server proxy to communicate between a sync client and a sync engine.
            </summary>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <summary>
            Sends changes to a server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="changes"> The changes to write to the server. </param>
            <returns> A list of sync issues if there were any. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <summary>
            Sends issue corrections to a server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="corrections"> The corrections to write to the server. </param>
            <returns> A list of sync issues if there were any. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <summary>
            Starts the sync session.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="options"> The options for the sync session. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.EndSync(System.Guid)">
            <summary>
            Ends the sync session.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <summary>
            Gets the changes from the server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="request"> The details for the request. </param>
            <returns> The list of changes from the server. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <summary>
            Gets the list of sync objects to try and resolve the issue list.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="issues"> The issues to process. </param>
            <returns> The sync objects to resolve the issues. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncableDatabaseProvider`1">
            <summary>
            Represents a sync database provider.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.#ctor(System.Func{Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.ISyncableDatabase},Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.IDispatcher)">
            <summary>
            Instantiates a sync database provider using the provided function.
            </summary>
            <param name="function"> The function to return the syncable database. </param>
            <param name="options"> The options for this database provider. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <param name="dispatcher"> An optional dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.BulkProcess(System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetDatabase(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetSyncableDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.Speedy#IDatabaseProvider{T}#GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.Speedy#IDatabaseProvider{T}#GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncableDatabaseProvider">
            <summary>
            Represents a sync database provider.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.#ctor(System.Func{Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.ISyncableDatabase},Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.IDispatcher)">
            <summary>
            Instantiates a sync database provider using the provided function.
            </summary>
            <param name="function"> The function to return the syncable database. </param>
            <param name="options"> The options for this database provider. </param>
            <param name="keyCache"> An optional key manager for managing entity IDs (primary and sync). </param>
            <param name="dispatcher"> An optional dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Sync.SyncableDatabaseProvider.KeyCache">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncableDatabaseProvider.Options">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetSyncableDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetSyncableDatabaseFromProvider(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Gets an instance of the database from the provider.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncClient">
            <summary>
            Represents a sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClient.#ctor(System.String,Speedy.ISyncableDatabaseProvider)">
            <summary>
            Instantiates a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClient.DatabaseProvider">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.IncomingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Name">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Options">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.OutgoingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Profiler">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Statistics">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.SyncOptions">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.EndSync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetDatabase``1">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.ValidateSession(System.Guid)">
            <summary>
            Validates the sync session. The SyncSession will be set on BeginSync and cleared on EndSync.
            </summary>
            <param name="sessionId"> </param>
        </member>
        <member name="M:Speedy.Sync.SyncClient.UpdateLocalRelationships(Speedy.Sync.ISyncEntity,Speedy.ISyncableDatabase)">
            <summary>
            Updates the entities local relationships.
            </summary>
            <param name="entity"> The entity to update. </param>
            <param name="database"> The database with the relationship repositories. </param>
            <exception cref="T:Speedy.Exceptions.SyncIssueException"> An exception will all sync issues. </exception>
        </member>
        <member name="T:Speedy.Sync.SyncClientIncomingConverter">
            <summary>
            Represents a sync object input converter for the sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientIncomingConverter.#ctor(Speedy.Sync.SyncObjectIncomingConverter[])">
            <summary>
            Instantiates a sync input converter to be used during syncing.
            </summary>
            <param name="converters"> The converters to process during conversion. </param>
        </member>
        <member name="T:Speedy.Sync.SyncClientOutgoingConverter">
            <summary>
            Represents a sync object output converter for the sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientOutgoingConverter.#ctor(Speedy.Sync.SyncObjectOutgoingConverter[])">
            <summary>
            Instantiates a sync output converter to be used during syncing.
            </summary>
            <param name="converters"> The converters to process during conversion. </param>
        </member>
        <member name="T:Speedy.Sync.SyncClientConverter">
            <summary>
            Represents a sync object converter for the sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObjectConverter})">
            <summary>
            Instantiates a sync converter to be used during syncing.
            </summary>
            <param name="excludePropertiesForIncomingSync"> Allow property exclusion during conversion in incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> Allow property exclusion during conversion in outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> Allow property exclusion during conversion in update. </param>
            <param name="converters"> The converters to process during conversion. </param>
        </member>
        <member name="P:Speedy.Sync.SyncClientConverter.ExcludePropertiesForIncomingSync">
            <summary>
            If true excluded properties will not processed during incoming sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientConverter.ExcludePropertiesForOutgoingSync">
            <summary>
            If true excluded properties will not processed during outgoing sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientConverter.ExcludePropertiesForSyncUpdate">
            <summary>
            If true excluded properties will not be changed during sync updates.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.CanConvert(System.String)">
            <summary>
            Test a sync object name to see if this converter can convert this object.
            </summary>
            <param name="name"> The sync object name to test. </param>
            <returns> True if the sync object can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Convert(System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject})">
            <summary>
            Process the provided request through the converters.
            </summary>
            <param name="collection"> The collection to process. </param>
            <returns> The request with an updated collection. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Convert(Speedy.Sync.SyncObject)">
            <summary>
            Process the provided sync object through the converters.
            </summary>
            <param name="value"> The sync object to process. </param>
            <returns> The process sync object. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Convert(Speedy.Sync.SyncIssue)">
            <summary>
            Process the provided sync issue through the converters.
            </summary>
            <param name="issue"> The sync issue to process. </param>
            <returns> The process sync issue otherwise null if could not be converted. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus)">
            <summary>
            Updates this sync object with another object.
            </summary>
            <param name="source"> The entity with the updates. </param>
            <param name="destination"> The destination sync entity to be updated. </param>
            <param name="status"> The status of the update. </param>
            <returns> Return true if the entity was updated and should be saved. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncClientDetails">
            <summary>
            The sync client details.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientDetails.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClientDetails.ApplicationVersion">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClientDetails.DeviceId">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClientDetails.DevicePlatform">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClientDetails.DeviceType">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClientDetails.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClientDetails.UpdateWith(Speedy.Sync.ISyncClientDetails,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.ISyncClientDetails">
            <summary>
            The details for a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClientDetails.ApplicationName">
            <summary>
            The ApplicationName value for Sync Client Details.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClientDetails.ApplicationVersion">
            <summary>
            The ApplicationVersion value for Sync Client Details.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClientDetails.DeviceId">
            <summary>
            The DeviceId value for Sync Client Details.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClientDetails.DevicePlatform">
            <summary>
            The DevicePlatform value for Sync Client Details.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClientDetails.DeviceType">
            <summary>
            The DeviceType value for Sync Client Details.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncClientOptions">
            <summary>
            Represents the options for a sync client
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientOptions.EnablePrimaryKeyCache">
            <summary>
            Determines if the sync client should cache primary keys for relationships.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientOptions.IsServerClient">
            <summary>
            Indicates this client is the server and should maintain dates, meaning as you save data the CreatedOn, ModifiedOn will
            be updated to the current server time. This should only be set for the "Server" sync client that represents the primary database.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientOptions.UpdateWith(Speedy.Sync.SyncClientOptions,System.String[])">
            <summary>
            Update the SyncStatistics with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncClientOptions.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncClientProfiler">
            <summary>
            Profiler for a the sync client
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProfiler.#ctor(System.String)">
            <summary>
            Instantiates a sync client profiler.
            </summary>
            <param name="name"> The name of the sync client the profiler is for. </param>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ApplyChanges">
            <summary>
            The overall processing time for SyncClient.ApplyChanges.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.GetChangeCount">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.GetChangeCount(Speedy.Sync.SyncRequest)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.GetChanges">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObject">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectAdded">
            <summary>
            The "Added" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectDeleted">
            <summary>
            The "Deleted" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectModified">
            <summary>
            The "Modified" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectReadEntity">
            <summary>
            The "ReadEntity" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjects">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectsGetDatabase">
            <summary>
            The "GetDatabase" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectsSaveDatabase">
            <summary>
            The "SaveDatabase" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectsSyncObjectsToList">
            <summary>
            The "SyncObjectsToList" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProfiler.ToString(System.TimeSpan)">
            <summary>
            Converts the profile results into a human readable string.
            </summary>
            <param name="totalTime"> The overall time to process. This is for generating percent value. </param>
            <returns> The human readable string for the profiler results. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncClientProvider">
            <summary>
            Represents a provider to get a sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProvider.#ctor(System.Func{System.String,Speedy.Sync.ISyncClient})">
            <summary>
            Instantiates a provider to get a sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProvider.GetClient(System.String)">
            <summary>
            Return a client by the provided name and credential.
            </summary>
            <param name="name"> The name of the client. </param>
            <returns> The sync client. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncDevice`1">
            <summary>
            Represents a sync device.
            </summary>
            <typeparam name="T"> The type of the ID for the sync model. </typeparam>
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.Altitude">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.AltitudeReference">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.ApplicationVersion">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.ApplicationVersionHash">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.DeviceId">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.DevicePlatform">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.DeviceType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.Id">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.Latitude">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncDevice`1.Longitude">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncDevice`1.Load(Speedy.Sync.SyncOptions)">
            <summary>
            Load the sync options.
            </summary>
            <param name="syncOptions"> The options to be loaded. </param>
        </member>
        <member name="M:Speedy.Sync.SyncDevice`1.ShouldUpdate(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncDevice`1.UpdateWith(Speedy.Data.Location.ILocation{Speedy.Data.Location.IHorizontalLocation,Speedy.Data.Location.IVerticalLocation},System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.ISyncDevice">
            <summary>
            Represents a sync device.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncDevice.ApplicationVersionHash">
            <summary>
            The application version in a number hash.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncDirection">
            <summary>
            The sync direction.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncDirection.PullDownThenPushUp">
            <summary>
            Sync content by pulling from the Server then push content from the Client.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncDirection.PullDown">
            <summary>
            Sync content by pulling from the Server down to the Client.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncDirection.PushUp">
            <summary>
            Sync content by pushing content from the Client up to the Server.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncEngine">
            <summary>
            Represents the sync engine.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.#ctor(System.Guid,Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions)">
            <summary>
            Instantiate an instance of the sync engine.
            </summary>
            <param name="sessionId"> The ID of the session. </param>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.IsCancellationPending">
            <summary>
            Gets a value indicating the running sync is requesting to be cancelled.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.IsRunning">
            <summary>
            Gets a value indicating the running status of the sync engine.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.Options">
            <summary>
            Gets the options for the sync engine.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.Server">
            <summary>
            The server.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.SessionId">
            <summary>
            Gets the unique identifier for this sync session.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.State">
            <summary>
            Current state of the sync engine.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.SyncIssues">
            <summary>
            Gets the list of issues that happened during syncing.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Cancel">
            <summary>
            Cancels the sync process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Run">
            <summary>
            Start to sync process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Run(Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions)">
            <summary>
            Instantiate and run an instance of the sync engine.
            </summary>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
            <returns> A list of issues that occurred during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Run(System.Guid,Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions)">
            <summary>
            Instantiate and run an instance of the sync engine.
            </summary>
            <param name="sessionId"> The ID of the session. </param>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
            <returns> A list of issues that occurred during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Stop(System.Nullable{System.TimeSpan})">
            <summary>
            Cancels the sync process and waits for it to stop.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> Should be true if managed resources should be disposed. </param>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Process(Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,System.DateTime,System.DateTime,System.Collections.Generic.IDictionary{System.Guid,System.DateTime})">
            <summary>
            Get changes from one client and apply them to another client.
            </summary>
            <param name="sourceClient"> The source to get changes from. </param>
            <param name="destinationClient"> The destination to apply changes to. </param>
            <param name="since"> The start date and time to get changes for. </param>
            <param name="until"> The end date and time to get changes for. </param>
            <param name="exclude"> The optional collection of items to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.SortLocalDatabases">
            <summary>
            Will attempt to sort local repositories after sync to order primary key.
            </summary>
        </member>
        <member name="E:Speedy.Sync.SyncEngine.SyncStateChanged">
            <summary>
            Notifies when the sync status changes.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncEngineState">
            <summary>
            Event arguments for the sync engine status change event.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.#ctor">
            <summary>
            Instantiates an instances of the sync engine state.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instances of the sync engine state.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Count">
            <summary>
            Gets or sets the current count of items processed.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.IsRunning">
            <summary>
            Indicates if the sync engine is running.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Message">
            <summary>
            Gets or set the message for the state.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Percent">
            <summary>
            Gets the percentage of progress. Ranging from [0.00] to [100.00].
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Status">
            <summary>
            Gets or sets the current status of the sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Total">
            <summary>
            Gets or sets the total count of the items to process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.OnPropertyChangedInDispatcher(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.UpdateWith(Speedy.Sync.SyncEngineState,System.String[])">
            <summary>
            Update the SyncStatistics with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncEngineStatus">
            <summary>
            Represents the different states of syncing.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Stopped">
            <summary>
            The sync engine is not running.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Starting">
            <summary>
            The sync engine is starting up.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Pulling">
            <summary>
            The stage to pull data from the server and apply to the client.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Pushing">
            <summary>
            This stage is to push changes from the client and apply to the server.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Completed">
            <summary>
            The sync engine was completed successfully.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Cancelled">
            <summary>
            The sync engine was cancelled.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Failed">
            <summary>
            The sync engine experienced an exception while running.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncEntity`1">
            <summary>
            Represent an entity that can be synced.
            </summary>
            <typeparam name="T"> The type of the entity primary ID. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.#ctor">
            <summary>
            Instantiates a sync entity.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.CreatedOn">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.ModifiedOn">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.SyncId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetEntityId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetEntitySyncId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetExclusions(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get exclusions for the provided type.
            </summary>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> The list of members to be excluded. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.IsPropertyExcludedForIncomingSync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.IsPropertyExcludedForOutgoingSync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.IsPropertyExcludedForSyncUpdate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.SetEntitySyncId(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.ToSyncObject">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.UpdateWith(Speedy.Sync.ISyncEntity,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetDefaultExclusionsForIncomingSync">
            <summary>
            Gets the default exclusions for incoming sync data. Warning: this is called during constructor,
            overrides need to be sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetDefaultExclusionsForOutgoingSync">
            <summary>
            Gets the default exclusions for outgoing sync data. Warning: this is called during constructor,
            overrides need to be sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetDefaultExclusionsForSyncUpdate">
            <summary>
            Gets the default exclusions for update. Warning: this is called during constructor, overrides need to be
            sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during update. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetPartialJson(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the default properties for partial tracking sync . Warning: this is called during constructor, overrides need to be
            sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to for partial tracking. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncEntity">
            <summary>
            Internal static class for internal collections
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity.ExclusionCacheForChangeTracking">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity.ExclusionCacheForIncomingSync">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity.ExclusionCacheForOutgoingSync">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity.ExclusionCacheForSyncUpdate">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity.ExcludedPropertiesForUpdateWith">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity.PropertyDictionaryForSyncObject">
            <summary>
            Property dictionary for a sync object, this is for optimization
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEntity.GetExclusions(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get exclusions for the provided type.
            </summary>
            <param name="type"> The type to get exclusions for. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> The list of members to be excluded. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncIssue">
            <summary>
            Represents as issue that occurred during sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.Id">
            <summary>
            The ID of the sync item.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.IssueType">
            <summary>
            The type of issue. Example like CannotDelete due to relationship dependencies.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.Message">
            <summary>
            Get the description of the issue.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.TypeName">
            <summary>
            Gets or sets the type name of the object.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncIssue.Convert(System.String)">
            <summary>
            Convert this sync object to a different sync object
            </summary>
            <returns> The converted sync entity in a sync object format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncIssue.TryUpdateWith(Speedy.Sync.SyncIssue,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncIssue.ShouldUpdate(Speedy.Sync.SyncIssue)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncIssue.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncIssue.UpdateWith(Speedy.Sync.SyncIssue,System.String[])">
            <summary>
            Update the SyncStatistics with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncIssue.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncIssueType">
            <summary>
            Represents the type of sync issue.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.Unknown">
            <summary>
            Could not determine the issue with the syncing object.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.RelationshipConstraint">
            <summary>
            The sync item is having issue due to a relationship. Example another entity depends on the
            entity that is trying to be deleted. Another example is trying to sync an entity with a
            relationship to an entity that has not synced yet.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.ConstraintException">
            <summary>
            The sync item is having issue with a constraint (ex. Unique Index).
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.RepositoryFiltered">
            <summary>
            The item is not being processed because this repository is being filtered.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.SyncEntityFiltered">
            <summary>
            The item is not being processed because the sync entity is being filtered.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.UpdateException">
            <summary>
            The item is not being updated due to an update exception.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.ClientException">
            <summary>
            There was an exception with one of the sync clients.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.Unauthorized">
            <summary>
            The sync client was not authorized to access the server.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.ClientNotSupported">
            <summary>
            The client is not supported by this server.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncManager`1">
            <summary>
            Represents a sync manager for syncing two clients.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.#ctor(Speedy.IDispatcher,`0[])">
            <summary>
            Instantiates a sync manager for syncing two clients.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="supportedSyncTypes"> </param>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IncomingConverter">
            <summary>
            Gets an optional incoming converter to convert incoming sync data. The converter is applied to the local sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsCancellationPending">
            <summary>
            Gets a value indicating the running sync is requesting to be cancelled.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsEnabled">
            <summary>
            Gets a value indicating the sync manager is enabled.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsRunning">
            <summary>
            Gets a value indicating the running status of the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsStarted">
            <summary>
            Gets a value indicating the running status of the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.OutgoingConverter">
            <summary>
            Gets an optional outgoing converter to convert incoming sync data. The converter is applied to the local sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.ProcessTimeout">
            <summary>
            The timeout to be used when synchronously syncing.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SessionId">
            <summary>
            The session ID of the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.ShowProgress">
            <summary>
            Gets a flag to indicate progress should be shown. Will only be true if sync takes longer than the <seealso cref="P:Speedy.Sync.SyncManager`1.ShowProgressThreshold" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.ShowProgressThreshold">
            <summary>
            Gets the value to determine when to trigger <seealso cref="P:Speedy.Sync.SyncManager`1.ShowProgress" />. Defaults to one second.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncOptions">
            <summary>
            The configure sync options for the sync manager.
            </summary>
            <seealso cref="M:Speedy.Sync.SyncManager`1.GetOrAddSyncOptions(`0,System.Action{Speedy.Sync.SyncOptions})" />
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncState">
            <summary>
            Gets the current sync state.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncTimers">
            <summary>
            The configure sync timers for the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncType">
            <summary>
            The type of the sync.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.CancelSync">
            <summary>
            Cancels the current running sync.
            </summary>
            <remarks>
            See <seealso cref="M:Speedy.Sync.SyncManager`1.WaitForSyncToComplete(System.Nullable{System.TimeSpan})" /> if you want to wait for the sync to complete.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.ProcessAsync(`0,System.Action{Speedy.Sync.SyncOptions},System.Nullable{System.TimeSpan},System.Action{Speedy.Sync.SyncResults{`0}})">
            <summary>
            Processes a sync request.
            </summary>
            <param name="syncType"> The type of the sync to process. </param>
            <param name="updateOptions"> Optional action to possibly update options when the sync starts. </param>
            <param name="waitFor"> Optional timeout to wait for the active sync to complete. </param>
            <param name="postAction">
            An optional action to run after sync is completed but before notification goes out. If the sync cannot
            start then the options will be null as they were never read or set.
            </param>
            <returns> The task for the process. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.ResetSyncDates(System.DateTime,System.DateTime)">
            <summary>
            Reset the sync dates on all sync options
            </summary>
            <param name="lastSyncedOnClient"> The last time when synced on the client. </param>
            <param name="lastSyncedOnServer"> The last time when synced on the server. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.StopSync(System.Nullable{System.TimeSpan})">
            <summary>
            Cancel the current running sync and wait for it to stop.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitForSyncToComplete(System.Nullable{System.TimeSpan})">
            <summary>
            Wait for the sync to complete.
            </summary>
            <param name="timeout"> An optional max amount of time to wait. ProcessTimeout will be used it no timeout provided. </param>
            <returns> True if the sync completed otherwise false if timed out waiting. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitForSyncToStart(System.Nullable{System.TimeSpan})">
            <summary>
            Wait for the sync to start.
            </summary>
            <param name="timeout"> An optional max amount of time to wait. ProcessTimeout will be used it no timeout provided. </param>
            <returns> True if the sync was started otherwise false if timed out waiting. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitForSyncToStartRunning(System.Nullable{System.TimeSpan})">
            <summary>
            Wait for the sync to start running.
            </summary>
            <param name="timeout"> An optional max amount of time to wait. ProcessTimeout will be used it no timeout provided. </param>
            <returns> True if the sync was started to process otherwise false if timed out waiting. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetOrAddSyncOptions(`0,System.Action{Speedy.Sync.SyncOptions})">
            <summary>
            Gets the default sync options for a sync manager.
            </summary>
            <param name="syncType"> The type of sync these options are for. </param>
            <param name="update"> Optional update action to change provided defaults. </param>
            <returns> The default set of options. </returns>
            <remarks>
            This should only be use in the sync manager constructor.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetOrAddSyncTimer(`0,System.Int32)">
            <summary>
            Gets or adds an average sync timer for a sync type. This will track the average time spent syncing for the provided type.
            </summary>
            <param name="syncType"> The type of sync these options are for. </param>
            <param name="limit"> Optional limit of syncs to average. </param>
            <returns> The timer for tracking the time spent syncing. </returns>
            <remarks>
            This should only be use in the sync manager constructor.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetSyncClientForClient">
            <summary>
            Gets the sync client to be used in the sync engine client input.
            </summary>
            <returns> The sync client. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetSyncClientForServer">
            <summary>
            Gets the sync client to be used in the sync engine client input.
            </summary>
            <returns> The sync client. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetSyncOptions(`0)">
            <summary>
            Gets the sync options by the provide sync type.
            </summary>
            <param name="syncType"> The sync type to get options for. </param>
            <returns> The sync options for the type </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnLogEvent(System.String,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="message"> The message to be written. </param>
            <param name="level"> The level of this message. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnSyncCompleted(Speedy.Sync.SyncResults{`0})">
            <summary>
            Indicate the sync is complete.
            </summary>
            <param name="results"> The results of the completed sync. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnSyncRunning(Speedy.Sync.SyncResults{`0})">
            <summary>
            Indicate the sync is running
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnSyncUpdated(Speedy.Sync.SyncEngineState)">
            <summary>
            Indicate the sync is being updated.
            </summary>
            <param name="state"> The state of the sync. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.ValidateSyncType(`0)">
            <summary>
            Validates the provided sync type is supported by this sync manager.
            </summary>
            <param name="syncType"> The type of the sync to validate. </param>
            <exception cref="T:System.Data.ConstraintException"> The sync type is not supported by this sync manager. </exception>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitOnTask(System.Threading.Tasks.Task{Speedy.Sync.SyncResults{`0}},System.Nullable{System.TimeSpan})">
            <summary>
            Wait on a task to be completed.
            </summary>
            <param name="task"> The task to wait for. </param>
            <param name="timeout">
            A TimeSpan that represents the number of milliseconds to wait, or
            a TimeSpan that represents -1 milliseconds to wait indefinitely.
            </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.RunSync(Speedy.Sync.SyncResults{`0},System.Action{Speedy.Sync.SyncOptions})">
            <summary>
            Run the sync. This should only be called by ProcessAsync.
            </summary>
            <param name="results"> The results for the sync. </param>
            <param name="updateOptions"> Update options before running sync. </param>
        </member>
        <member name="E:Speedy.Sync.SyncManager`1.SyncCompleted">
            <summary>
            Indicates the sync is completed.
            </summary>
        </member>
        <member name="E:Speedy.Sync.SyncManager`1.SyncUpdated">
            <summary>
            Indicates the sync is being updated.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncModel`1">
            <summary>
            Represents a sync model, usually used in a web API model.
            </summary>
            <typeparam name="T"> The type for the key. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiate a sync model.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Sync.SyncModel`1.Dispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.GetDispatcher">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.IsChangeNotificationsPaused">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.OnPropertyChanged(System.String)">
            <summary>
            Indicates the property has changed on the bindable object.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.PausePropertyChangeNotifications(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.UpdateDispatcher(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObject">
            <summary>
            Represents an sync object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.Data">
            <summary>
            The serialized data of the object being synced.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.ModifiedOn">
            <summary>
            The date and time of the synced object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.Status">
            <summary>
            Gets or sets the status of this sync object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.SyncId">
            <summary>
            Gets or sets the ID of the sync object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.TypeName">
            <summary>
            Gets or sets the type name of the object. The data contains the serialized data.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.CachedSerializerSettings">
            <summary>
            Cached serializer settings.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObject.ToSyncEntity``2">
            <summary>
            Converts the sync object back into it's proper type.
            </summary>
            <returns> The deserialized sync object. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObject.ToSyncEntity">
            <summary>
            Converts the sync object back into it's proper type.
            </summary>
            <returns> The deserialized sync object. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObject.Equals(Speedy.Sync.SyncObject)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObject.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObject.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObject.CompareTo(Speedy.Sync.SyncObject)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObjectIncomingConverter`4">
            <summary>
            Represents an object converter.
            </summary>
            <typeparam name="T1"> The sync entity type to convert from. </typeparam>
            <typeparam name="T2"> The primary key of the entity to convert from. </typeparam>
            <typeparam name="T3"> The sync entity type to convert to. </typeparam>
            <typeparam name="T4"> The primary key of the entity to convert to. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.#ctor(System.Action{`0,`2},System.Func{`2,`2,System.Action,Speedy.Sync.SyncObjectStatus,System.Boolean})">
            <summary>
            Instantiates an instance of a converter.
            </summary>
            <param name="convert"> An optional convert method to do some additional conversion. </param>
            <param name="update"> An optional update method to do some additional updating. </param>
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.CanUpdate(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.Convert(Speedy.Sync.SyncObject,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObjectOutgoingConverter`4">
            <summary>
            Represents an outgoing object converter.
            </summary>
            <typeparam name="T1"> The sync entity type to convert from. </typeparam>
            <typeparam name="T2"> The primary key of the entity to convert from. </typeparam>
            <typeparam name="T3"> The sync entity type to convert to. </typeparam>
            <typeparam name="T4"> The primary key of the entity to convert to. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.#ctor(System.Action{`0,`2})">
            <summary>
            Instantiates an instance of a converter.
            </summary>
            <param name="convert"> An optional convert method to do some additional conversion. </param>
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.CanUpdate(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.Convert(Speedy.Sync.SyncObject,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObjectIncomingConverter">
            <summary>
            Represents an incoming object converter.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter.#ctor(System.String,System.String)">
            <summary>
            Instantiate an incoming object converter.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncObjectOutgoingConverter">
            <summary>
            Represents an outgoing object converter.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter.#ctor(System.String,System.String)">
            <summary>
            Instantiate an outgoing object converter.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncObjectConverter">
            <summary>
            Represents an object converter.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.#ctor(System.String,System.String)">
            <summary>
            Instantiate an object converter.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObjectConverter.DestinationName">
            <summary>
            The destination type name.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObjectConverter.SourceName">
            <summary>
            The source type name.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanConvert(System.String)">
            <summary>
            Test a sync object name to see if this converter can convert this object.
            </summary>
            <param name="name"> The sync object name to test. </param>
            <returns> True if the sync object can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanConvert(Speedy.Sync.SyncObject)">
            <summary>
            Test a sync object to see if this converter can convert this object.
            </summary>
            <param name="syncObject"> The sync object to test. </param>
            <returns> True if the sync object can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanConvert(Speedy.Sync.SyncIssue)">
            <summary>
            Test a sync issue to see if this converter can convert this object.
            </summary>
            <param name="syncIssue"> The sync issue to test. </param>
            <returns> True if the sync issue can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanUpdate(Speedy.Sync.ISyncEntity)">
            <summary>
            Test a sync entity to see if this converter can update this object.
            </summary>
            <param name="syncEntity"> The sync entity to test. </param>
            <returns> True if the sync entity can be updated or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Convert(Speedy.Sync.SyncObject,System.Boolean,System.Boolean)">
            <summary>
            Convert this sync object to a different sync object
            </summary>
            <param name="syncObject"> The sync object to process. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <returns> The converted sync entity in a sync object format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Convert(Speedy.Sync.SyncIssue)">
            <summary>
            Convert this sync issue to a different sync object
            </summary>
            <param name="syncIssue"> The sync issue to process. </param>
            <returns> The converted sync issue in a sync issue format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <summary>
            Updates this sync object with another object.
            </summary>
            <param name="source"> The entity with the updates. </param>
            <param name="destination"> The destination sync entity to be updated. </param>
            <param name="status"> The status of the update. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> Return true if the entity was updated and should be saved. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Convert``4(Speedy.Sync.SyncObject,System.Action{``0,``2},System.Boolean,System.Boolean)">
            <summary>
            Convert this sync object to a different sync object
            </summary>
            <typeparam name="T1"> The sync entity type to convert from. </typeparam>
            <typeparam name="T2"> The primary key of the entity to convert from. </typeparam>
            <typeparam name="T3"> The sync entity type to convert to. </typeparam>
            <typeparam name="T4"> The primary key of the entity to convert to. </typeparam>
            <param name="syncObject"> The sync object to be converted. </param>
            <param name="convert"> An optional convert method to do some additional conversion. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <returns> The converted sync entity in a sync object format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Update``2(``0,``0,System.Func{``0,``0,System.Action,Speedy.Sync.SyncObjectStatus,System.Boolean},Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <summary>
            Updates this sync object with another object.
            </summary>
            <typeparam name="T1"> The sync entity type to process. </typeparam>
            <typeparam name="T2"> The primary key of the sync entity. </typeparam>
            <param name="source"> The entity with the updates. </param>
            <param name="destination"> The destination sync entity to be updated. </param>
            <param name="update"> The function to do the updating. </param>
            <param name="status"> The status of the update. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> Return true if the entity was updated and should be saved. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncObjectStatus">
            <summary>
            Represents the sync state of an entity
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncObjectStatus.Added">
            <summary>
            This entity was added.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncObjectStatus.Modified">
            <summary>
            This entity was last modified.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncObjectStatus.Deleted">
            <summary>
            This entity was delete.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncOptions">
            <summary>
            Represents options to be used during a sync.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncOptions.SyncKey">
            <summary>
            The sync key value. This will be included in the default sync options values.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.#ctor">
            <summary>
            Instantiates an instance of the class.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the class.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.IncludeIssueDetails">
            <summary>
            Include the detail of the exception in the SyncIssue(s) returned.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.ItemsPerSyncRequest">
            <summary>
            Gets or sets the number of objects to be processed per sync request.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.LastSyncedOnClient">
            <summary>
            Gets or sets the client was last synced on date and time.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.LastSyncedOnServer">
            <summary>
            Gets or sets the server was last synced on date and time.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.PermanentDeletions">
            <summary>
            If true the sync will actually delete entities marked for deletion. Defaults to false where IsDeleted will be marked "true".
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.SyncDirection">
            <summary>
            The direction to sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.Values">
            <summary>
            Additional values for synchronizing.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.AddSyncableFilter``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Boolean)">
            <summary>
            Adds a syncable filter to the options.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.AddSyncableFilter(Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Adds a syncable filter to the options.
            </summary>
            <param name="filter"> The syncable filter to be added. </param>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.GetSyncType``1(``0)">
            <summary>
            Gets the type of sync these options are for
            </summary>
            <typeparam name="T"> The sync type enumeration type. </typeparam>
            <param name="defaultValue"> The default value to return if the Sync Type value is missing or could not be parsed. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.LoadClientDetails(Speedy.Sync.SyncOptions)">
            <summary>
            Load client details from options that are not trusted.
            </summary>
            <param name="untrustedOptions"> The untrusted options. </param>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ResetFilters">
            <summary>
            Resets the syncable filters
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ShouldExcludeRepository(System.Type)">
            <summary>
            Check to see if a repository has been excluded from syncing.
            </summary>
            <param name="type"> The type to check for. </param>
            <returns> True if the type is filter or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ShouldExcludeRepository(System.String)">
            <summary>
            Check to see if a repository has been excluded from syncing.
            </summary>
            <param name="typeAssemblyName"> The type name to check for. Should be in assembly name format. </param>
            <returns> True if the type is filter or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.UpdateWith(Speedy.Sync.SyncOptions,System.String[])">
            <summary>
            Update the SyncStatistics with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncOptions.GetFilter(Speedy.ISyncableRepository)">
            <summary>
            Find a filter for the provided repository.
            </summary>
            <param name="repository"> The repository to process. </param>
            <returns> The filter if found or null otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ShouldFilterIncomingEntity(System.String,Speedy.Sync.ISyncEntity)">
            <summary>
            Find the repository filter and check the entity to see if it should be filtered.
            </summary>
            <param name="typeAssemblyName"> The type of the entity in assembly format. </param>
            <param name="entity"> The entity to be tested. </param>
            <returns> True if the sync entity should be filter or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.GetFilter(System.String)">
            <summary>
            Find a filter for the provided repository.
            </summary>
            <param name="typeAssemblyName"> The repository type assembly name to process. </param>
            <returns> The filter if found or null otherwise. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncRepositoryFilter`1">
            <summary>
            Represents a repository filter
            </summary>
            <typeparam name="T"> The type for the filter. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncRepositoryFilter`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}},System.Boolean)">
            <summary>
            Instantiates a repository filter.
            </summary>
            <param name="outgoingFilter"> The filter for the type for outgoing (GetChanges/GetCorrections). </param>
            <param name="incomingFilter"> The filter for the type for incoming (ApplyChanges/ApplyCorrections). </param>
            <param name="lookupFilter"> The filter for the type for looking up the entity (GetChanges/GetCorrections). </param>
            <param name="skipDeletedItemsOnInitialSync"> The option to skipped SyncEntity.IsDeleted on initial sync. </param>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.HasLookupFilter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.IncomingFilter">
            <summary>
            The incoming filter for the type.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.LookupFilter">
            <summary>
            The look up expression for the type
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.OutgoingFilter">
            <summary>
            The outgoing filter for the type.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRepositoryFilter`1.ShouldFilterIncomingEntity(`0)">
            <summary>
            A test to validate if an incoming entity should be filtered.
            </summary>
            <param name="entity"> The entity to be tested. </param>
            <returns> True if the entity matches the incoming filter or false if otherwise. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncRepositoryFilter">
            <summary>
            Represents a repository filter
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRepositoryFilter.#ctor(System.String,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Instantiates a repository filter.
            </summary>
            <param name="type"> The type this filter is for. </param>
            <param name="outgoingFilter"> The outgoing filter for the type. </param>
            <param name="incomingFilter"> The incoming filter for the type. </param>
            <param name="lookupFilter"> The lookup filter for the type. </param>
            <param name="skipDeletedItemsOnInitialSync"> The option to skipped SyncEntity.IsDeleted on initial sync. </param>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.HasIncomingFilter">
            <summary>
            Returns true if incoming expression is not null otherwise false.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.HasLookupFilter">
            <summary>
            Returns true if lookup expression is not null otherwise false.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.IncomingExpression">
            <summary>
            The incoming filter as a generic object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.LookupExpression">
            <summary>
            The lookup filter as a generic object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.OutgoingExpression">
            <summary>
            The outgoing filter as a generic object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.RepositoryType">
            <summary>
            The type contained in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.SkipDeletedItemsOnInitialSync">
            <summary>
            The option to skipped SyncEntity.IsDeleted on initial sync.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncRequest">
            <summary>
            The details to ask a sync client for changes.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.#ctor">
            <summary>
            Instantiates a sync request.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.#ctor(Speedy.Sync.SyncObject[])">
            <summary>
            Instantiates a sync request.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.#ctor(System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject})">
            <summary>
            Instantiates a sync request.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRequest.Since">
            <summary>
            The start date and time to get changes for.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRequest.Until">
            <summary>
            The end date and time to get changes for.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.Reset">
            <summary>
            Resets the filter back to defaults.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncResults`1">
            <summary>
            The results of the sync.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncResults`1.#ctor">
            <summary>
            Initiates an instances of the sync results.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Client">
            <summary>
            The sync client for the client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Elapsed">
            <summary>
            The elapsed time for the sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Options">
            <summary>
            The sync options.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Server">
            <summary>
            The sync client for the server.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SessionId">
            <summary>
            Gets the ID of the sync session.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncCancelled">
            <summary>
            Gets a value indicating if the last sync was started.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncCompleted">
            <summary>
            The sync ran to completion.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncIssues">
            <summary>
            Gets the list of issues that occurred during the last sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncStarted">
            <summary>
            Gets a value indicating if the last sync was started.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncStatus">
            <summary>
            The sync result status
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncSuccessful">
            <summary>
            Gets a value indicating if the last sync was successful.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncType">
            <summary>
            The Type for the sync.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncResultStatus">
            <summary>
            The status of the sync result.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Unknown">
            <summary>
            No flags have been set.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Successful">
            <summary>
            The sync was completed successfully.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Started">
            <summary>
            The sync was able to start.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Cancelled">
            <summary>
            The sync was cancelled.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Completed">
            <summary>
            The sync was able to run the full sync cycle.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncSession">
            <summary>
            The details of the sync session
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncSession.Id">
            <summary>
            The ID of the session
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncSession.StartedOn">
            <summary>
            The date and time the sync was started on the server.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncStatistics">
            <summary>
            Represents the communication statistics for a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.AppliedChanges">
            <summary>
            Represents changes written (incoming) to this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.AppliedCorrections">
            <summary>
            Represents corrections written (incoming) to this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.Changes">
            <summary>
            Represents changes sent (outgoing) from this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.Corrections">
            <summary>
            Represents corrections sent (outgoing) from this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.IndividualProcessCount">
            <summary>
            Represents how many times the sync client had to process applied changes individually.
            This means at some point one of the synced items had issues saving so we have to process items
            individually so we can determine which item is having issues.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.IsReset">
            <summary>
            Returns true if the statistics are all zero.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncStatistics.Reset">
            <summary>
            Allows resetting of the sync statistics.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncStatistics.UpdateWith(Speedy.Sync.SyncStatistics,System.String[])">
            <summary>
            Update the SyncStatistics with an update.
            </summary>
            <param name="update"> The update to be applied. </param>
            <param name="exclusions"> An optional set of properties to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncStatistics.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncTimer">
            <summary>
            Represents a timer for tracking a sync session.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncTimer.#ctor">
            <summary>
            Instantiates an instance of the class.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncTimer.#ctor(System.Int32,Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the class.
            </summary>
            <param name="limit"> Optional limit of syncs to average. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Sync.SyncTimer.CancelledSyncs">
            <summary>
            Tracks the number of cancelled syncs.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncTimer.FailedSyncs">
            <summary>
            Tracks the number of failed syncs.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncTimer.SuccessfulSyncs">
            <summary>
            Tracks the number of successful syncs.
            </summary>
        </member>
        <member name="T:Speedy.ThreadSafe`1">
            <summary>
            Making any call to an objects members thread safe.
            </summary>
        </member>
        <member name="M:Speedy.ThreadSafe`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.ThreadSafe">
            <summary>
            Making any call to an objects members thread safe.
            </summary>
        </member>
        <member name="M:Speedy.ThreadSafe.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Speedy.ThreadSafe" /> class.
            </summary>
            <param name="instance"> The wrapped object whose operations will be made thread-safe. </param>
        </member>
        <member name="M:Speedy.ThreadSafe.Decrement(System.Single@,System.Single)">
            <summary>
            Decrement an float by a value or float.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be decremented. </param>
            <param name="decrease"> An optional decrease. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.ThreadSafe.Decrement(System.Double@,System.Double)">
            <summary>
            Decrement an double by a value or double.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be decremented. </param>
            <param name="decrease"> An optional decrease. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.ThreadSafe.Increment(System.Double@,System.Double)">
            <summary>
            Increment an double by a value or double.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be incremented. </param>
            <param name="increase"> An optional increase. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.ThreadSafe.Increment(System.Single@,System.Single)">
            <summary>
            Increment an float by a value or float.Epsilon if not provided.
            </summary>
            <param name="value"> The value to be incremented. </param>
            <param name="increase"> An optional increase. The value defaults to the smallest possible value. </param>
            <returns> The incremented value. </returns>
        </member>
        <member name="M:Speedy.ThreadSafe.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ThreadSafe.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ThreadSafe.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ThreadSafe.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ThreadSafe.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ThreadSafe.GetIndexedProperty">
            <summary>
            Attempts to find the indexer property.
            </summary>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo" /> for the indexer property, if found;
            otherwise, <see langword="null" />.
            </returns>
        </member>
        <member name="T:Speedy.TimeService">
            <summary>
            Represents the service to provide time. Allows control for when the system is being tested.
            </summary>
        </member>
        <member name="P:Speedy.TimeService.Now">
            <summary>
            Gets the date time in the format of the current time zone.
            </summary>
        </member>
        <member name="P:Speedy.TimeService.UtcNow">
            <summary>
            Gets the date time in the format of UTC time zone.
            </summary>
        </member>
        <member name="M:Speedy.TimeService.AddNowProvider(System.Func{System.DateTime})">
            <summary>
            Add a new DateTime.Now provider onto the stack.
            </summary>
            <returns>
            The id of the provider. Use this id to remove it from the stack.
            </returns>
        </member>
        <member name="M:Speedy.TimeService.AddUtcNowProvider(System.Func{System.DateTime})">
            <summary>
            Add a new DateTime.UtcNow provider onto the stack.
            </summary>
            <returns>
            The id of the provider. Use this id to remove it from the stack.
            </returns>
        </member>
        <member name="M:Speedy.TimeService.RemoveNowProvider(System.UInt32)">
            <summary>
            Remove the DateTime.Now provider from the stack by the provided id.
            </summary>
        </member>
        <member name="M:Speedy.TimeService.RemoveUtcNowProvider(System.UInt32)">
            <summary>
            Remove the DateTime.UtcNow provider from the stack by the provided id.
            </summary>
        </member>
        <member name="M:Speedy.TimeService.Reset">
            <summary>
            Resets the providers to the default values.
            </summary>
        </member>
        <member name="M:Speedy.TimeService.TryAddNowProvider(System.Func{System.DateTime},System.Nullable{System.UInt32}@)">
            <summary>
            Try to add a new DateTime.Now provider onto the stack.
            </summary>
            <param name="provider"> The provider to add. </param>
            <param name="id"> The id of the added provider. Returns null if provider not added. </param>
        </member>
        <member name="M:Speedy.TimeService.TryAddUtcNowProvider(System.Func{System.DateTime},System.Nullable{System.UInt32}@)">
            <summary>
            Try to add a new DateTime.UtcNow provider onto the stack.
            </summary>
            <param name="provider"> The provider to add. </param>
            <param name="id"> The id of the added provider. Returns null if provider not added. </param>
        </member>
        <member name="P:Speedy.Validation.FailedValidation.Message">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Validation.FailedValidation.Name">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Validation.FailedValidation.TryValidate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Validation.IValidation">
            <summary>
            Represents a validation for an object.
            </summary>
        </member>
        <member name="P:Speedy.Validation.IValidation.Message">
            <summary>
            The message for failed validation.
            </summary>
        </member>
        <member name="P:Speedy.Validation.IValidation.Name">
            <summary>
            The name for failed validation.
            </summary>
        </member>
        <member name="M:Speedy.Validation.IValidation.TryValidate(System.Object)">
            <summary>
            Tries to validate
            </summary>
            <returns> Returns true if the validation passes otherwise false. </returns>
        </member>
        <member name="T:Speedy.Validation.PropertyValidator`1">
            <summary>
            Validation for an object property.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an instance of a property validator.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.AreEqual(`0,System.String)">
            <summary>
            Validates that a property matches the provided value.
            </summary>
            <param name="value"> The value to compare with. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.AreEqual(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasMinMaxRange(`0,`0,System.Boolean)">
            <summary>
            Validate a property is within a range.
            </summary>
            <param name="minimum"> The minimum value. </param>
            <param name="maximum"> The maximum value. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasMinMaxRange(`0,`0,System.String,System.Boolean)">
            <summary>
            Validate a property is within a range.
            </summary>
            <param name="minimum"> The minimum value. </param>
            <param name="maximum"> The maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasMinMaxRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Validate a property is within a range.
            </summary>
            <param name="minimum"> The minimum value. </param>
            <param name="maximum"> The maximum value. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasMinMaxRange(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Validate a property is within a range.
            </summary>
            <param name="minimum"> The minimum value. </param>
            <param name="maximum"> The maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasMinMaxRange(System.Object,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasMinMaxRange(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            Validate an object within a range.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <param name="maximum"> The inclusive maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
            <returns> True if the value is and within the expected range. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasEnumValue">
            <summary>
            Validates that a property has a valid value.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.HasEnumValue(System.String)">
            <summary>
            Validates that a property has a valid value.
            </summary>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsFalse(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Validate a property with provided test.
            </summary>
            <param name="validate"> The test to validate the property. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsNotNull">
            <summary>
            Validate a property to ensure it is not null.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsNotNull(System.String)">
            <summary>
            Validate a property to ensure it is not null.
            </summary>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsOptional">
            <summary>
            Configure this property as optional.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsOptional(System.String)">
            <summary>
            Configure this property as optional.
            </summary>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsRequired">
            <summary>
            Configure this property as required.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsRequired(System.String)">
            <summary>
            Configure this property as required.
            </summary>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsTrue">
            <summary>
            Validate an property with provided test.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsTrue(System.String)">
            <summary>
            Validate an property with provided test.
            </summary>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsTrue(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Validate an property with provided test.
            </summary>
            <param name="validate"> The test to validate the property. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.NoLessThan(`0)">
            <summary>
            Validate an object is equal to or greater than provided minimum value.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <returns> True if the value is equal to or greater than the provided value. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.NoLessThan(`0,System.String)">
            <summary>
            Validate an object is equal to or greater than provided minimum value.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <param name="message"> The message for failed validation. </param>
            <returns> True if the value is equal to or greater than the provided value. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.NoMoreThan(`0)">
            <summary>
            Validate an object is equal to or less than provided minimum value.
            </summary>
            <param name="maximum"> The inclusive maximum value. </param>
            <returns> True if the value is equal to or less than the provided value. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.NoMoreThan(`0,System.String)">
            <summary>
            Validate an object is equal to or less than provided minimum value.
            </summary>
            <param name="maximum"> The inclusive maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <returns> True if the value is equal to or less than the provided value. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.TryValidate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.AddMinMaxRange(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            Validate an object within a range.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <param name="maximum"> The inclusive maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
            <returns> True if the value is and within the expected range. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.AddNoLessThan(System.Object,System.String)">
            <summary>
            Validate an object is equal to or greater than provided minimum value.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <param name="message"> The message for failed validation. </param>
            <returns> True if the value is equal to or greater than the provided value. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.AddNoMoreThan(System.Object,System.String)">
            <summary>
            Validate an object is equal to or less than provided minimum value.
            </summary>
            <param name="maximum"> The inclusive maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <returns> True if the value is equal to or less than the provided value. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator`1.IsRequired(System.Boolean,System.String)">
            <summary>
            Validate a property to determine if it is required.
            </summary>
            <param name="required"> The flag to determine if it is required. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="T:Speedy.Validation.PropertyValidator">
            <summary>
            Validation for an object property.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an instance of a property validator.
            </summary>
        </member>
        <member name="P:Speedy.Validation.PropertyValidator.Info">
            <summary>
            The info for the property.
            </summary>
        </member>
        <member name="P:Speedy.Validation.PropertyValidator.Name">
            <summary>
            The name of the validator
            </summary>
        </member>
        <member name="P:Speedy.Validation.PropertyValidator.Validations">
            <summary>
            The validations for the validator.
            </summary>
        </member>
        <member name="P:Speedy.Validation.PropertyValidator.MemberRequired">
            <summary>
            Get the required status.
            </summary>
        </member>
        <member name="P:Speedy.Validation.PropertyValidator.MemberRequiredMessage">
            <summary>
            Get the required validation.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.AreEqual(System.Object)">
            <summary>
            Validates that a property matches the provided value.
            </summary>
            <param name="value"> The value to compare with. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.AreEqual(System.Object,System.String)">
            <summary>
            Validates that a property matches the provided value.
            </summary>
            <param name="value"> The value to compare with. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.GetValue(System.Object)">
            <summary>
            Tries to get the property using the provided value.
            </summary>
            <param name="entity"> The entity to get the value from. </param>
            <returns> The value of the property or default value if it cannot be read. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.HasMinMaxRange(System.Object,System.Object,System.Boolean)">
            <summary>
            Validate an object within a range.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <param name="maximum"> The inclusive maximum value. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.HasMinMaxRange(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            Validate an object within a range.
            </summary>
            <param name="minimum"> The inclusive minimum value. </param>
            <param name="maximum"> The inclusive maximum value. </param>
            <param name="message"> The message for failed validation. </param>
            <param name="excludeRangeValues"> The option to exclude the minimum and maximum values </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.SetValue(System.Object,System.Object)">
            <summary>
            Tries to set the property using the provided value.
            </summary>
            <param name="entity"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Speedy.Validation.PropertyValidator.TryValidate(System.Object)">
            <summary>
            Tries to validate the property.
            </summary>
            <returns> Returns true if the validations pass otherwise false. </returns>
        </member>
        <member name="T:Speedy.Validation.PropertyValidatorExtensions">
            <summary>
            Extensions for member validators.
            </summary>
        </member>
        <member name="M:Speedy.Validation.PropertyValidatorExtensions.IsNotNullOrWhitespace(Speedy.Validation.PropertyValidator{System.String})">
            <summary>
            Validates that a member is not null or whitespace.
            </summary>
            <param name="validator"> The validator to be extended. </param>
            <returns> True if the value is and within the provided range. </returns>
        </member>
        <member name="M:Speedy.Validation.PropertyValidatorExtensions.IsNotNullOrWhitespace(Speedy.Validation.PropertyValidator{System.String},System.String)">
            <summary>
            Validates that a member is not null or whitespace.
            </summary>
            <param name="validator"> The validator to be extended. </param>
            <param name="message"> The message for failed validation. </param>
            <returns> True if the value is and within the provided range. </returns>
        </member>
        <member name="T:Speedy.Validation.Validation`1">
            <summary>
            Represents a validation for an object.
            </summary>
            <typeparam name="T"> The type of the object to validate. </typeparam>
        </member>
        <member name="M:Speedy.Validation.Validation`1.#ctor(System.String,System.String,System.Func{`0,System.Boolean})">
            <summary>
            Instantiates an instance of a validator.
            </summary>
            <param name="name"> The name of the validator. </param>
            <param name="message"> The message for failed validation. </param>
            <param name="validate"> The function to validate an object. </param>
        </member>
        <member name="P:Speedy.Validation.Validation`1.Message">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Validation.Validation`1.Name">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Validation.Validation`1.TryValidate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Validation.Validation`1.TryValidate(`0)">
            <summary>
            Tries to validate
            </summary>
            <returns> Returns true if the validation passes otherwise false. </returns>
        </member>
        <member name="T:Speedy.Validation.ValidationExceptionType">
            <summary>
            Represents validation exception types
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.Unknown">
            <summary>
            Represents an unknown error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.AreEqual">
            <summary>
            Represents an AreEqual error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.NotEqual">
            <summary>
            Represents an NotEqual error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.IsNull">
            <summary>
            Represents an IsNull error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.IsNotNull">
            <summary>
            Represents an IsNotNull error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.MinMaxRange">
            <summary>
            Represents an MinMaxRange error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.EnumRange">
            <summary>
            Represents an EnumRange error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.IsRequired">
            <summary>
            Represents an IsRequired error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.IsOptional">
            <summary>
            Represents an IsOptional error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.NoLessThan">
            <summary>
            Represents an NoLessThan error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.NoMoreThan">
            <summary>
            Represents an NoMoreThan error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.IsTrue">
            <summary>
            Represents an IsTrue error
            </summary>
        </member>
        <member name="F:Speedy.Validation.ValidationExceptionType.IsFalse">
            <summary>
            Represents an IsFalse error
            </summary>
        </member>
        <member name="T:Speedy.Validation.Validator`1">
            <summary>
            Validation for a typed object.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator`1.#ctor">
            <summary>
            Creates an instance of a Validator.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of a Validator.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator`1.IsFalse(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Validate an object with provided test.
            </summary>
            <param name="validate"> The test to validate the object. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.Validator`1.IsTrue(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Validate an object with provided test.
            </summary>
            <param name="validate"> The test to validate the object. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.Validator`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configure a validation for a property.
            </summary>
            <remarks>
            If this is updated, also update <seealso cref="M:Speedy.PartialUpdate`1.Validate" />
            </remarks>
        </member>
        <member name="T:Speedy.Validation.Validator">
            <summary>
            Validation for an object.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator.#ctor(Speedy.IDispatcher)">
            <summary>
            Creates an instance of a Validator.
            </summary>
        </member>
        <member name="P:Speedy.Validation.Validator.MemberValidators">
            <summary>
            The validations for the object members.
            </summary>
        </member>
        <member name="P:Speedy.Validation.Validator.Validations">
            <summary>
            The validations for the object.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator.IsFalse``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            Validate an object with provided test.
            </summary>
            <param name="validate"> The test to validate the object. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.Validator.IsTrue``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            Validate an object with provided test.
            </summary>
            <param name="validate"> The test to validate the object. </param>
            <param name="message"> The message for failed validation. </param>
        </member>
        <member name="M:Speedy.Validation.Validator.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Configure a validation for a property.
            </summary>
            <remarks>
            If this is updated, also update <seealso cref="M:Speedy.PartialUpdate`1.Validate" />
            </remarks>
        </member>
        <member name="M:Speedy.Validation.Validator.ThrowException``1(System.String)">
            <summary>
            Throws a new exception.
            </summary>
            <typeparam name="T"> The type of exception to throw. </typeparam>
            <param name="message"> The message of the exception. </param>
        </member>
        <member name="M:Speedy.Validation.Validator.TryValidate(System.Object,System.Collections.Generic.IList{Speedy.Validation.IValidation}@)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator.TryValidate(Speedy.PartialUpdate,System.Collections.Generic.IList{Speedy.Validation.IValidation}@)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator.Validate(System.Object)">
            <summary>
            Runs the validator to check the parameter.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator.Validate(Speedy.PartialUpdate)">
            <summary>
            Runs the validator to check the partial update.
            </summary>
        </member>
        <member name="M:Speedy.Validation.Validator.Add``1(Speedy.Validation.PropertyValidator{``0})">
            <summary>
            Adds a validation for a property.
            </summary>
            <remarks>
            If this is updated, also update <seealso cref="M:Speedy.PartialUpdate`1.Validate" />
            </remarks>
        </member>
        <member name="M:Speedy.Validation.Validator.ProcessValidations(System.Collections.Generic.IList{Speedy.Validation.IValidation},System.Object,System.Collections.Generic.ICollection{Speedy.Validation.IValidation})">
            <summary>
            Process the validations.
            </summary>
            <param name="validations"> The list of validation to process. </param>
            <param name="value"> The value to process. </param>
            <param name="failedValidation"> The list of failed validations. </param>
        </member>
    </members>
</doc>
