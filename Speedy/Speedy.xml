<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Speedy</name>
    </assembly>
    <members>
        <member name="T:Speedy.Bindable`1">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.Bindable`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.Bindable`1.UpdateWith(`0,System.Boolean,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the updates. </param>
            <param name="excludeVirtuals"> An optional value to exclude virtual members. Defaults to true. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="M:Speedy.Bindable`1.UpdateWith(`0,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Bindable">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.Bindable.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Bindable.HasChanges">
            <summary>
            Determines if the object has changes.
            </summary>
        </member>
        <member name="P:Speedy.Bindable.Dispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="P:Speedy.Bindable.RealType">
            <summary>
            Cached version of the "real" type, meaning not EF proxy but rather root type
            </summary>
        </member>
        <member name="M:Speedy.Bindable.GetDispatcher">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.IsChangeNotificationsPaused">
            <summary>
            Return true if the change notifications are paused or otherwise false.
            </summary>
        </member>
        <member name="M:Speedy.Bindable.OnPropertyChanged(System.String)">
            <summary>
            Indicates the property has changed on the bindable object.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="M:Speedy.Bindable.PausePropertyChangeNotifications(System.Boolean)">
            <summary>
            Pause / Un-pause the property change notifications
            </summary>
        </member>
        <member name="M:Speedy.Bindable.UpdateDispatcher(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Bindable.UpdateWith(System.Object,System.Boolean,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the updates. </param>
            <param name="excludeVirtuals"> An optional value to exclude virtual members. Defaults to true. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="M:Speedy.Bindable.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="E:Speedy.Bindable.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.CloneableBindable`1">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.CloneableBindable`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a bindable object.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.CloneableBindable`1.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.CloneableBindable`1.ShallowClone">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Collections.BaseObservableCollection`1">
            <summary>
            Represents an observable collection that supports notification on clear.
            </summary>
            <typeparam name="T"> The type of the item stored in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(Speedy.IDispatcher,`0[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(`0[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(Speedy.IDispatcher,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of the collection.
            </summary>
            <param name="items"> An optional set of initial items. </param>
        </member>
        <member name="P:Speedy.Collections.BaseObservableCollection`1.DistinctCheck">
            <summary>
            The distinct check for item values.
            </summary>
        </member>
        <member name="P:Speedy.Collections.BaseObservableCollection`1.Dispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            Indicates the property has changed on the collection object.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.Reset(`0[])">
            <summary>
            Reset the collection to the provided values.
            </summary>
            <param name="values"> The values to be set to. </param>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.ItemExists(`0)">
            <summary>
            Checks to see if an item exist in the collection.
            </summary>
            <param name="item"> The item to check for. </param>
            <returns> True if the item exists otherwise false. </returns>
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Collections.BaseObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="E:Speedy.Collections.BaseObservableCollection`1.PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="T:Speedy.Collections.OrderBy`1">
            <summary>
            Represents an order by value.
            </summary>
            <typeparam name="T"> The type of the item to order. </typeparam>
        </member>
        <member name="M:Speedy.Collections.OrderBy`1.#ctor(System.Boolean)">
            <summary>
            Instantiate an instance of the order by value.
            </summary>
            <param name="descending"> True to order descending and otherwise sort ascending. Default value is false for ascending order. </param>
        </member>
        <member name="M:Speedy.Collections.OrderBy`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Instantiate an instance of the order by value.
            </summary>
            <param name="keySelector"> The </param>
            <param name="descending"> True to order descending and otherwise sort ascending. Default value is false for ascending order. </param>
        </member>
        <member name="P:Speedy.Collections.OrderBy`1.Descending">
            <summary>
            True for descending and false for ascending order.
            </summary>
        </member>
        <member name="P:Speedy.Collections.OrderBy`1.KeySelector">
            <summary>
            A function to extract a key from an element.
            </summary>
        </member>
        <member name="M:Speedy.Collections.OrderBy`1.Process(System.Linq.IQueryable{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Processes a query through the "order by" that will return the query ordered base on the value.
            </summary>
            <param name="query"> The query to order. </param>
            <param name="thenBys"> An optional set of subsequent orderings. </param>
            <returns> The ordered queryable for the provided query. </returns>
        </member>
        <member name="T:Speedy.Collections.SortedObservableCollection`1">
            <summary>
            Represents a sorted observable collection. The collection supports notification on clear and ability to be sorted.
            </summary>
            <typeparam name="T"> The type of the item stored in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.#ctor(Speedy.Collections.OrderBy{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.#ctor(Speedy.IDispatcher,Speedy.Collections.OrderBy{`0},Speedy.Collections.OrderBy{`0}[])">
            <summary>
            Instantiates an instance of the collection.
            </summary>
        </member>
        <member name="P:Speedy.Collections.SortedObservableCollection`1.DisableSorting">
            <summary>
            Allows disable sorting for faster loading.
            </summary>
        </member>
        <member name="P:Speedy.Collections.SortedObservableCollection`1.OrderBy">
            <summary>
            The expression to order this collection by.
            </summary>
        </member>
        <member name="P:Speedy.Collections.SortedObservableCollection`1.ThenBy">
            <summary>
            An optional set of expressions to further order this collection by.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.Sort">
            <summary>
            Sort the collection.
            </summary>
        </member>
        <member name="M:Speedy.Collections.SortedObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Configuration.IndexConfiguration">
            <summary>
            The configuration for an index property.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.#ctor(System.String)">
            <summary>
            Instantiates an instance of the index configuration.
            </summary>
            <param name="name"> The name of the index. </param>
        </member>
        <member name="P:Speedy.Configuration.IndexConfiguration.AllowNull">
            <summary>
            The index allows null. This would allow unique indexes to ignore null values.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.AddProperty(Speedy.Configuration.IPropertyConfiguration)">
            <summary>
            Add property to the index configuration.
            </summary>
            <param name="property"> The property configuration to be added. </param>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.IsMappingFor(System.Object)">
            <summary>
            Checks to see if this configuration is for the provided entity.
            </summary>
            <param name="entity"> The entity to test against. </param>
            <returns> True if this configuration is for the entity and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.IsUnique">
            <summary>
            Marks the index as a unique.
            </summary>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.IndexConfiguration.Validate``2(System.Object,Speedy.IRepository{``0,``1})">
            <summary>
            Validates the entity using this configuration.
            </summary>
            <param name="entity"> The entity to validate. </param>
            <param name="entityRepository"> The repository of entities. </param>
        </member>
        <member name="T:Speedy.Configuration.IPropertyConfiguration">
            <summary>
            The interface for the property configuration.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.DeleteBehavior">
            <summary>
            The delete behavior for this property. Only applies to foreign keys.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.IsNullable">
            <summary>
            Indicates this property can be set to null.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.MemberName">
            <summary>
            Gets the member name of the property this configuration is for.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.IPropertyConfiguration.TypeName">
            <summary>
            Gets the type name of the property this configuration is for.
            </summary>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.GetValue(System.Object)">
            <summary>
            Get the value for the property configuration.
            </summary>
            <param name="entity"> The entity to get the value of. </param>
            <returns> The value in string format. </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.HasMaximumLength(System.Int32)">
            <summary>
            Sets the max length for this property.
            </summary>
            <param name="maxLength"> The max length for the property. </param>
            <returns> The modified property configuration. </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.IsMappingFor(System.Object)">
            <summary>
            Checks to see if this configuration is for the provided entity.
            </summary>
            <param name="entity"> The entity to test against. </param>
            <returns> True if this configuration is for the entity and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.Matches(System.Object,System.Object)">
            <summary>
            Checks two objects to see if the properties match
            </summary>
            <param name="object1"> The first object. </param>
            <param name="object2"> The second object. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Configuration.IPropertyConfiguration.OnDelete(Speedy.Configuration.RelationshipDeleteBehavior)">
            <summary>
            </summary>
            <param name="behavior"> The delete behavior for the foreign key relationship. </param>
        </member>
        <member name="T:Speedy.Configuration.PropertyConfiguration`2">
            <summary>
            The configuration for an entity property.
            </summary>
            <typeparam name="T"> The entity this configuration is for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Instantiates an instance of the property configuration.
            </summary>
            <param name="property"> The property expression this configuration is for. </param>
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.DeleteBehavior">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.IsNullable">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.MemberName">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.PropertyConfiguration`2.TypeName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.HasMaximumLength(System.Int32)">
            <summary>
            Sets the maximum length of the member.
            </summary>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.HasMinimumLength(System.Int32)">
            <summary>
            Sets the minimum length of the member.
            </summary>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.IsMappingFor(System.Object)">
            <summary>
            Checks to see if this configuration is for the provided entity.
            </summary>
            <param name="entity"> The entity to test against. </param>
            <returns> True if this configuration is for the entity and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.IsRequired(System.Boolean)">
            <summary>
            Marks the property as a required member.
            </summary>
            <param name="required"> The value to determine if the property is required. </param>
            <returns> The configuration after updated. </returns>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.Matches(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.OnDelete(Speedy.Configuration.RelationshipDeleteBehavior)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.Validate(System.Object,Speedy.IRepository{`0,`1})">
            <summary>
            Validates the entity using this configuration.
            </summary>
            <param name="entity"> The entity to validate. </param>
            <param name="entityRepository"> The repository of entities. </param>
        </member>
        <member name="M:Speedy.Configuration.PropertyConfiguration`2.Speedy#Configuration#IPropertyConfiguration#HasMaximumLength(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Configuration.Relationship.EntityIdPropertyInfo">
            <summary>
            The property information for the entity ID.
            </summary>
        </member>
        <member name="P:Speedy.Configuration.Relationship.EntityPropertyInfo">
            <summary>
            The property information for the entity.
            </summary>
        </member>
        <member name="T:Speedy.Configuration.RelationshipDeleteBehavior">
            <summary>
            The delete behavior of relationships
            </summary>
        </member>
        <member name="F:Speedy.Configuration.RelationshipDeleteBehavior.Restrict">
            <summary>
            The values of foreign key properties in dependent entities are not changed.
            </summary>
        </member>
        <member name="F:Speedy.Configuration.RelationshipDeleteBehavior.Cascade">
            <summary>
            The dependent entities will also be deleted.
            </summary>
        </member>
        <member name="F:Speedy.Configuration.RelationshipDeleteBehavior.SetNull">
            <summary>
            The values of foreign key properties in dependent entities are set to null.
            </summary>
        </member>
        <member name="T:Speedy.CreatedEntity`1">
            <summary>
            Represents a created entity.
            </summary>
            <typeparam name="T"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.CreatedEntity`1.CreatedOn">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Database">
            <summary>
            Represents a Speedy database.
            </summary>
        </member>
        <member name="M:Speedy.Database.#ctor(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Instantiates an instance of the database class.
            </summary>
            <param name="options"> The options for this database. </param>
            <param name="keyCache"> An optional key manager for caching entity IDs (primary and sync). </param>
        </member>
        <member name="P:Speedy.Database.KeyCache">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Database.Options">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.Add``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.DiscardChanges">
            <summary>
            Discard all changes made in this context to the underlying database.
            </summary>
        </member>
        <member name="M:Speedy.Database.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Database.GetMappingAssembly">
            <summary>
            Gets the assembly that contains the entity mappings. Base implementation defaults to the implemented types assembly.
            </summary>
        </member>
        <member name="M:Speedy.Database.GetReadOnlyRepository``2">
            <summary>
            Gets a read only repository for the provided type.
            </summary>
            <typeparam name="T"> The type of the item in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository for the type. </returns>
        </member>
        <member name="M:Speedy.Database.GetRepository``2">
            <summary>
            Gets a repository for the provided type.
            </summary>
            <typeparam name="T"> The type of the item in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository for the type. </returns>
        </member>
        <member name="M:Speedy.Database.Remove``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.GetSyncableRepositories(Speedy.Sync.SyncOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.GetSyncableRepository``2">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.GetSyncableRepository(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Database.HasIndex(System.Type,System.String)">
            <summary>
            Create a configuration that represents an Index.
            </summary>
            <param name="entityType"> The type of the entity. </param>
            <param name="name"> The name of the index. </param>
            <returns> The index configuration. </returns>
        </member>
        <member name="M:Speedy.Database.HasRequired``4(System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``2,System.Collections.Generic.ICollection{``0}}})">
            <summary>
            Creates a configuration that represent a required one to many relationship.
            </summary>
            <param name="required"> The value to determine if this property is required. </param>
            <param name="entity"> The entity to relate to. </param>
            <param name="collectionKey"> The collection on the entity that relates back to this entity. </param>
            <param name="foreignKey"> The ID for the entity to relate to. </param>
            <typeparam name="T1"> The entity that host the relationship. </typeparam>
            <typeparam name="T2"> The type of the entity key of the host. </typeparam>
            <typeparam name="T3"> The entity to build a relationship to. </typeparam>
            <typeparam name="T4"> The type of the entity key to build the relationship to. </typeparam>
        </member>
        <member name="M:Speedy.Database.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates a configuration for an entity property.
            </summary>
            <param name="expression"> The expression for the property. </param>
            <typeparam name="T"> The entity for the configuration. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The configuration for the entity property. </returns>
        </member>
        <member name="M:Speedy.Database.SaveChanges">
            <summary>
            Save the data to the data store.
            </summary>
            <returns> The number of items saved. </returns>
        </member>
        <member name="M:Speedy.Database.SaveChangesAsync">
            <summary>
            Save the data to the data store.
            </summary>
            <returns> The number of items saved. </returns>
        </member>
        <member name="M:Speedy.Database.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing"> true if managed resources should be disposed; otherwise, false. </param>
        </member>
        <member name="M:Speedy.Database.BuildRelationship``4(``0,System.Collections.IEnumerable,System.String)">
            <summary>
            Builds relationship repository for the entity provided.
            </summary>
            <typeparam name="T1"> The type of the entity with the relationship. </typeparam>
            <typeparam name="T1K"> The type of the key for the entity. </typeparam>
            <typeparam name="T2"> The type of the related collection. </typeparam>
            <typeparam name="T2K"> The type of the key for the collection. </typeparam>
            <param name="entity"> The entity to process. </param>
            <param name="collection"> The entities to add or update to the repository. </param>
            <param name="key"> The key of the relationship </param>
            <returns> The repository for the relationship. </returns>
        </member>
        <member name="E:Speedy.Database.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.DatabaseKeyCache">
            <summary>
            Cache for managing database keys. This allows for caching of entities ID and Sync IDs.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.#ctor">
            <summary>
            Instantiate an instance of the database key cache.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.#ctor(System.TimeSpan)">
            <summary>
            Instantiate an instance of the database key cache.
            </summary>
            <param name="cacheTimeout"> The timeout for removing an item from the cache. </param>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.Count">
            <summary>
            The total types tracked.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.SyncEntitiesToCache">
            <summary>
            Gets or sets the list of entities to cache the keys (ID, Sync ID). If the collection is empty
            then cache all sync entities.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseKeyCache.TotalCachedItems">
            <summary>
            The total count for all items tracked.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.AddEntity(Speedy.Sync.ISyncEntity)">
            <summary>
            Cache an entity ID for the sync entity.
            </summary>
            <param name="entity"> The entity to be cached. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.AddEntityId(System.Type,System.Object,System.Object)">
            <summary>
            Cache an entity ID for the entity Sync ID.
            </summary>
            <param name="type"> The type of the entity. </param>
            <param name="syncId"> The sync ID of the entity. Will be converted to a string using "ToString". </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Cleanup">
            <summary>
            Cleanup the cache by removing old entries and empty collections.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Clear">
            <summary>
            Clear all caches from the manager
            </summary>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.GetEntityId``1(``0)">
            <summary>
            Get the entity ID for the sync entity.
            </summary>
            <param name="entity"> The type of the entity. </param>
            <returns> The ID of the entity. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.GetEntityId(System.Type,System.Object)">
            <summary>
            Get the entity ID for the sync ID.
            </summary>
            <param name="type"> The type of the entity. </param>
            <param name="syncId"> The sync ID of the entity. </param>
            <returns> The ID of the entity. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Initialize(System.Type[])">
            <summary>
            Initializes the default key cache.
            </summary>
            <param name="syncEntitiesToCache"> An optional set of specific entity types to cache. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Initialize(Speedy.ISyncableDatabaseProvider,System.Type[])">
            <summary>
            Initializes the default key cache.
            </summary>
            <param name="provider"> The syncable database provider. </param>
            <param name="syncEntitiesToCache"> An optional set of specific entity types to cache. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.Initialize(Speedy.ISyncableDatabase,System.Type[])">
            <summary>
            Initializes the default key cache.
            </summary>
            <param name="database"> The syncable database. </param>
            <param name="syncEntitiesToCache"> An optional set of specific entity types to cache. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.RemoveEntity(Speedy.Sync.ISyncEntity)">
            <summary>
            Remove an entity ID for the entity Sync ID.
            </summary>
            <param name="entity"> The entity to be un-cached. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.RemoveEntityId(System.Type,System.Guid)">
            <summary>
            Remove an entity ID for the entity Sync ID.
            </summary>
            <param name="type"> The type of the entity. </param>
            <param name="syncId"> The sync ID of the entity. </param>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.SupportsType(System.Type)">
            <summary>
            Does the key cache support the following type.
            </summary>
            <param name="type"> The type to test for. </param>
            <returns> True if the type is support or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.DatabaseKeyCache.ToDetailedString">
            <summary>
            Get a detailed string of cached entities
            </summary>
            <returns> A detailed string. </returns>
        </member>
        <member name="T:Speedy.DatabaseOptions">
            <summary>
            Represents options for a Speedy database.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseOptions.#ctor">
            <summary>
            Instantiates an instance of the database options class.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.DisableEntityValidations">
            <summary>
            Gets or sets the flag to disable entity validations.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.MaintainCreatedOn">
            <summary>
            Gets or sets the flag to manage the optional CreatedOn property.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.MaintainModifiedOn">
            <summary>
            Gets or sets the flag to manage the optional ModifiedOn properties.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.MaintainSyncId">
            <summary>
            Gets or sets the flag to manage the sync ID for sync entities.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.PermanentSyncEntityDeletions">
            <summary>
            If true the sync entities will actually delete entities marked for deletion. Defaults to false where IsDeleted will be marked "true".
            </summary>
            todo: update saving of modified entities to ignore changes to deleted sync entities?
        </member>
        <member name="P:Speedy.DatabaseOptions.SyncOrder">
            <summary>
            Gets or sets the sync order of the syncable repositories.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.Timeout">
            <summary>
            Gets or sets the timeout for blocking calls.
            </summary>
        </member>
        <member name="P:Speedy.DatabaseOptions.UnmaintainEntities">
            <summary>
            Gets or sets the list of entities to ignore during maintenance updates.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseOptions.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseOptions.UpdateWith(Speedy.DatabaseOptions,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.DatabaseProvider`1">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="M:Speedy.DatabaseProvider`1.#ctor(System.Func{Speedy.DatabaseOptions,`0},Speedy.DatabaseOptions)">
            <summary>
            Instantiate an instance of the database provider.
            </summary>
            <param name="provider"> The database provider function. </param>
            <param name="options"> The options for this provider. </param>
        </member>
        <member name="P:Speedy.DatabaseProvider`1.Options">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.BulkProcess(System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.BulkProcess(System.Func{`0},System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <summary>
            Runs a bulk process where the database lifetime is based on the iteration size.
            A database will be instantiated and used for the iteration count. When the iteration
            count is reach the database will be saved and disposed. A new database will be created
            and processing will continue until the total count is reached. Finally the database
            will be saved and disposed.
            </summary>
            <param name="getDatabase"> Function to get the database. </param>
            <param name="total"> The total amount of items to process. </param>
            <param name="iterationSize"> The iteration size of each process. </param>
            <param name="process"> The action to the process. </param>
        </member>
        <member name="M:Speedy.DatabaseProvider`1.Speedy#IDatabaseProvider#GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.Speedy#IDatabaseProvider#GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DatabaseProvider`1.GetDatabaseFromProvider(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database from the provider.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.DatabaseType">
            <summary>
            Represents the type of database.
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Unknown">
            <summary>
            Unknown database type?
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Memory">
            <summary>
            An in memory database that behaves like EF SQL database.
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Sql">
            <summary>
            Sql Database
            </summary>
        </member>
        <member name="F:Speedy.DatabaseType.Sqlite">
            <summary>
            Sqlite Database
            </summary>
        </member>
        <member name="T:Speedy.DefaultDispatcher">
            <summary>
            Represents a default dispatcher
            </summary>
        </member>
        <member name="P:Speedy.DefaultDispatcher.HasThreadAccess">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DefaultDispatcher.Run(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.DefaultDispatcher.RunAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Entity`1">
            <summary>
            Represents a Speedy entity.
            </summary>
            <typeparam name="T"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.Entity`1.Id">
            <summary>
            Gets or sets the ID of the entity.
            </summary>
        </member>
        <member name="M:Speedy.Entity`1.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.IdIsSet">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.NewId(`0@)">
            <summary>
            Allows the entity to calculate the next key.
            </summary>
            <param name="currentKey"> The current version of the key. </param>
            <returns> The new key to be used in. </returns>
        </member>
        <member name="M:Speedy.Entity`1.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.TrySetId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.Unwrap``1(System.Action{``0})">
            <summary>
            Unwrap the entity from the proxy as a specific type.
            </summary>
            <param name="update"> An optional update method. </param>
            <returns> The real entity unwrapped from the Entity Framework proxy. </returns>
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(Speedy.Entity{`0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the updates. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(Speedy.Entity{`0},System.Boolean,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the updates. </param>
            <param name="excludeVirtuals"> An optional value to exclude virtual members. Defaults to true. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="M:Speedy.Entity`1.UpdateWith(Speedy.Entity{`0},System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Entity">
            <summary>
            Represents a Speedy entity.
            </summary>
        </member>
        <member name="F:Speedy.Entity.SyncEntityInterfaceType">
            <summary>
            Represents the base type for a sync entity interface, just a quick lookup value.
            </summary>
        </member>
        <member name="F:Speedy.Entity.ExcludedProperties">
            <summary>
            Cache of combination of exclusions.
            </summary>
        </member>
        <member name="F:Speedy.Entity._exclusionCacheForChangeTracking">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="F:Speedy.Entity._hasChanges">
            <summary>
            Represents if the entity has had changes or not.
            </summary>
        </member>
        <member name="F:Speedy.Entity._realType">
            <summary>
            Cached version of the "real" type, meaning not EF proxy but rather root type
            </summary>
        </member>
        <member name="M:Speedy.Entity.#ctor">
            <summary>
            Instantiates an entity
            </summary>
        </member>
        <member name="M:Speedy.Entity.#cctor">
            <summary>
            Instantiates an entity
            </summary>
        </member>
        <member name="P:Speedy.Entity.ExclusionCacheForIncomingSync">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Entity.ExclusionCacheForOutgoingSync">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Entity.ExclusionCacheForSyncUpdate">
            <summary>
            All hash sets for types, this is for optimization
            </summary>
        </member>
        <member name="P:Speedy.Entity.RealType">
            <summary>
            Cached version of the "real" type, meaning not EF proxy but rather root type
            </summary>
        </member>
        <member name="M:Speedy.Entity.CanBeModified">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityAdded">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityDeleted">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.EntityModified">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.HasChanges">
            <summary>
            Determines if the object has changes.
            </summary>
        </member>
        <member name="M:Speedy.Entity.IdIsSet">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.IsPropertyExcludedForChangeTracking(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.OnPropertyChanged(System.String)">
            <summary>
            Notify that a property has changed
            </summary>
            <param name="propertyName"> The name of the property that changed. </param>
        </member>
        <member name="M:Speedy.Entity.ResetChangeTracking">
            <summary>
            Reset the change tracking flag.
            </summary>
        </member>
        <member name="M:Speedy.Entity.ShallowClone">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.TrySetId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.Unwrap">
            <summary>
            Unwrap the entity from the proxy.
            </summary>
            <returns>
            The real entity unwrapped from the Entity Framework proxy.
            </returns>
        </member>
        <member name="M:Speedy.Entity.UpdateWith(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the updates. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
        </member>
        <member name="M:Speedy.Entity.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Entity.GetDefaultExclusionsForChangeTracking">
            <summary>
            Gets the default exclusions for change tracking. Warning: this is called during constructor, overrides need to be
            sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during change tracking. </returns>
        </member>
        <member name="M:Speedy.Entity.GetExclusions(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get exclusions for the provided type.
            </summary>
            <param name="type"> The type to get exclusions for. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> The list of members to be excluded. </returns>
        </member>
        <member name="E:Speedy.Entity.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.IEntity">
            <summary>
            Represents a Speedy entity.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.CanBeModified">
            <summary>
            Checks to see if an entity can be modified.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityAdded">
            <summary>
            Update an entity that has been added.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityDeleted">
            <summary>
            Update an entity that has been deleted.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.EntityModified">
            <summary>
            Update an entity that has been modified.
            </summary>
        </member>
        <member name="M:Speedy.IEntity.IdIsSet">
            <summary>
            Determine if the ID is set on the entity.
            </summary>
            <returns> True if the ID is set or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.IEntity.IsPropertyExcludedForChangeTracking(System.String)">
            <summary>
            Checks a property has been excluded for change tracking.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property is excluded or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.IEntity.TrySetId(System.String)">
            <summary>
            Try to set the ID from a serialized version.
            </summary>
            <returns> True if the ID is successfully set or false if otherwise. </returns>
        </member>
        <member name="T:Speedy.ICreatedEntity">
            <summary>
            Represents a Speedy entity that track the date and time it was created.
            </summary>
        </member>
        <member name="P:Speedy.ICreatedEntity.CreatedOn">
            <summary>
            Gets or sets the date and time the entity was created.
            </summary>
        </member>
        <member name="T:Speedy.IModifiableEntity">
            <summary>
            Represents a Speedy entity that track the date and time it was last modified.
            </summary>
        </member>
        <member name="P:Speedy.IModifiableEntity.ModifiedOn">
            <summary>
            Gets or sets the date and time the entity was modified.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.SpeedyException">
            <summary>
            The base exception for the Speedy framework.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.KeyNotFound">
            <summary>
            Represents message for key not found.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.RepositoryNotFound">
            <summary>
            Represents message for repository not found.
            </summary>
        </member>
        <member name="F:Speedy.Exceptions.SpeedyException.SyncEntityIncorrectType">
            <summary>
            Represents message for invalid sync entity type.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SpeedyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the speedy exception.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.SyncIssueException">
            <summary>
            Represents a sync issue exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor(System.String,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncIssue})">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncIssue})">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.SyncIssueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="P:Speedy.Exceptions.SyncIssueException.Issues">
            <summary>
            Gets the sync issues for this exception.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.UpdateException">
            <summary>
            Represents an update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the update exception.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.ValidationException">
            <summary>
            Represents an validation issue.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor(System.String)">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the validation exception.
            </summary>
        </member>
        <member name="T:Speedy.Exceptions.WebClientException">
            <summary>
            Represents a web client exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="M:Speedy.Exceptions.WebClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instantiates an instance of the exception.
            </summary>
        </member>
        <member name="P:Speedy.Exceptions.WebClientException.Code">
            <summary>
            The HTTP status code for this exception.
            </summary>
        </member>
        <member name="T:Speedy.ExclusionKey">
            <summary>
            Represents a key for an exclusion combination
            </summary>
        </member>
        <member name="M:Speedy.ExclusionKey.#ctor(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Instantiates an exclusion key
            </summary>
            <param name="type"> The type being processed. </param>
            <param name="excludeIncomingSync"> Should exclude properties during incoming sync. </param>
            <param name="excludeOutgoingSync"> Should exclude properties during outgoing sync. </param>
            <param name="excludeSyncUpdate"> Should exclude properties during sync update. </param>
        </member>
        <member name="P:Speedy.ExclusionKey.ExcludeIncomingSync">
            <summary>
            Should exclude properties during incoming sync.
            </summary>
        </member>
        <member name="P:Speedy.ExclusionKey.ExcludeOutgoingSync">
            <summary>
            Should exclude properties during outgoing sync.
            </summary>
        </member>
        <member name="P:Speedy.ExclusionKey.ExcludeSyncUpdate">
            <summary>
            Should exclude properties during sync update.
            </summary>
        </member>
        <member name="P:Speedy.ExclusionKey.Type">
            <summary>
            The type of object this key is for.
            </summary>
        </member>
        <member name="M:Speedy.ExclusionKey.CompareTo(Speedy.ExclusionKey)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.Equals(Speedy.ExclusionKey)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.ExclusionKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Extensions.CollectionExtensions">
            <summary>
            Extensions for collections.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddIfMissing``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Add a dictionary entry if the key is not found.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="value"> The value of the value. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Add or update a dictionary entry.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="value"> The value of the value. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},System.Func{``1,``1})">
            <summary>
            Add or update a dictionary entry.
            </summary>
            <typeparam name="T1"> The type of the key. </typeparam>
            <typeparam name="T2"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary to update. </param>
            <param name="key"> The value of the key. </param>
            <param name="get"> The function to get the value. </param>
            <param name="update"> The function to update the value. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add multiple items to a collection
            </summary>
            <param name="set"> The set to add items to. </param>
            <param name="items"> The items to add. </param>
            <typeparam name="T"> The type of the items in the collection. </typeparam>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.HashSet{``0},``0[])">
            <summary>
            Appends new values to an existing HashSet.
            </summary>
            <typeparam name="T"> The type of value in the set. </typeparam>
            <param name="set"> The set to append to. </param>
            <param name="values"> The values to add. </param>
            <returns> A new HashSet containing the new values. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.HashSet{``0})">
            <summary>
            Appends new values to an existing HashSet.
            </summary>
            <typeparam name="T"> The type of value in the set. </typeparam>
            <param name="set"> The set to append to. </param>
            <param name="values"> The values to add. </param>
            <returns> A new HashSet containing the new values. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.DeepClone``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Deep clone a dictionary of items. Will use the ICloneable interface if available.
            </summary>
            <typeparam name="T"> The key type. </typeparam>
            <typeparam name="T2"> The value type. </typeparam>
            <param name="dictionary"> The dictionary to clone. </param>
            <returns> The clone dictionary. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.DeepClone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Deep clone a dictionary of items. Will use the ICloneable interface if available.
            </summary>
            <typeparam name="T"> The key type. </typeparam>
            <typeparam name="T2"> The value type. </typeparam>
            <param name="dictionary"> The dictionary to clone. </param>
            <returns> The clone dictionary. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Execute the action on each entity in the collection.
            </summary>
            <param name="items"> The collection of items to process. </param>
            <param name="action"> The action to execute for each item. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute the action on each entity in the collection.
            </summary>
            <typeparam name="T"> The type of item in the collection. </typeparam>
            <param name="items"> The collection of items to process. </param>
            <param name="action"> The action to execute for each item. </param>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.NaturalSort(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Natural sort a string collection.
            </summary>
            <param name="collection"> The collection to sort. </param>
            <returns> The sorted collection. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.NaturalSort(System.Collections.Generic.IEnumerable{System.String},System.Globalization.CultureInfo)">
            <summary>
            Natural sort a string collection.
            </summary>
            <param name="collection"> The collection to sort. </param>
            <param name="cultureInfo"> The culture information to use during sort. </param>
            <returns> The sorted collection. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ToListSafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Safely convert an enumeration to a list without worry about "InvalidOperationException" due to collection being modified.
            </summary>
            <typeparam name="T"> The type in the collection. </typeparam>
            <param name="values"> The enumeration to convert to a list. </param>
            <returns> The values in a list format. </returns>
        </member>
        <member name="M:Speedy.Extensions.CollectionExtensions.ToListSafe``2(Speedy.IRepository{``0,``1})">
            <summary>
            Safely convert an enumeration to a list without worry about "InvalidOperationException" due to collection being modified.
            </summary>
            <typeparam name="T"> The type of the entity of the collection. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <param name="values"> The enumeration to convert to a list. </param>
            <returns> The values in a list format. </returns>
        </member>
        <member name="T:Speedy.Extensions.DateTimeExtensions">
            <summary>
            Extensions for date time
            </summary>
        </member>
        <member name="F:Speedy.Extensions.DateTimeExtensions.MaxDateTimeTicks">
            <summary>
            The amount of ticks in the Max Date / Time value.
            </summary>
        </member>
        <member name="F:Speedy.Extensions.DateTimeExtensions.MinDateTimeTicks">
            <summary>
            The amount of ticks in the Min Date / Time value.
            </summary>
        </member>
        <member name="T:Speedy.Extensions.EnumExtensions">
            <summary>
            Extensions for enumerations
            </summary>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.ClearFlag``1(``0,``0)">
            <summary>
            Clear the "flagged" enum value.
            </summary>
            <typeparam name="T"> The type of the enum value. </typeparam>
            <param name="value"> The value to update. </param>
            <param name="flag"> The flag to be cleared. </param>
            <returns> The value with the flagged cleared. </returns>
        </member>
        <member name="M:Speedy.Extensions.EnumExtensions.SetFlag``1(``0,``0)">
            <summary>
            Set the "flagged" enum value.
            </summary>
            <typeparam name="T"> The type of the enum value. </typeparam>
            <param name="value"> The value to update. </param>
            <param name="flag"> The flag to be set. </param>
            <returns> The value with the flagged set. </returns>
        </member>
        <member name="T:Speedy.Extensions.ExpressionExtensions">
            <summary>
            Extensions for expressions
            </summary>
        </member>
        <member name="M:Speedy.Extensions.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a expression that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.
            </summary>
            <typeparam name="T"> The type used in the expression. </typeparam>
            <param name="left"> A Expression to set the Left property equal to. </param>
            <param name="right"> A Expression to set the Right property equal to. </param>
            <returns> The updated expression. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a expression that represents a conditional OR operation.
            </summary>
            <typeparam name="T"> The type used in the expression. </typeparam>
            <param name="left"> A Expression to set the Left property equal to. </param>
            <param name="right"> A Expression to set the Right property equal to. </param>
            <returns> The updated expression. </returns>
        </member>
        <member name="M:Speedy.Extensions.ExpressionExtensions.ThenInclude``3(Speedy.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <typeparam name="T"> The type of entity being queried. </typeparam>
            <typeparam name="TPreviousProperty"> The type of the entity that was just included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="source"> The source query. </param>
            <param name="include"> A lambda expression representing the navigation property to be included (<c> t =&gt; t.Property1 </c>). </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="T:Speedy.Extensions.FileExtensions">
            <summary>
            File system extensions (file / directories)
            </summary>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeCreate(System.IO.DirectoryInfo)">
            <summary>
            Safely create a directory.
            </summary>
            <param name="info"> The information on the directory to create. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeCreate(System.IO.FileInfo)">
            <summary>
            Safely create a file.
            </summary>
            <param name="file"> The information of the file to create. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeDelete(System.IO.FileInfo)">
            <summary>
            Safely delete a file.
            </summary>
            <param name="info"> The information of the file to delete. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeDelete(System.IO.DirectoryInfo)">
            <summary>
            Safely delete a directory.
            </summary>
            <param name="info"> The information of the directory to delete. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.SafeMove(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Safely move a file.
            </summary>
            <param name="fileLocation"> The information of the file to move. </param>
            <param name="newLocation"> The location to move the file to. </param>
        </member>
        <member name="M:Speedy.Extensions.FileExtensions.OpenFile(System.IO.FileInfo)">
            <summary>
            Open the file with read/write permission with file read share.
            </summary>
            <param name="info"> The information for the file. </param>
            <returns> The stream for the file. </returns>
        </member>
        <member name="T:Speedy.Extensions.GuidExtensions">
            <summary>
            Extensions for Guids.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToGuid(System.Int32)">
            <summary>
            Converts an integer to a Guid. Ex. 1 == 00000000-0000-0000-0000-000000000001
            </summary>
            <param name="value"> The value to be converted to a Guid. </param>
            <returns> The guid. </returns>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToGuid(System.Int64)">
            <summary>
            Converts a long to a Guid. Ex. 1 == 00000000-0000-0000-0000-000000000001
            </summary>
            <param name="value"> The value to be converted to a Guid. </param>
            <returns> The guid. </returns>
        </member>
        <member name="M:Speedy.Extensions.GuidExtensions.ToGuid(System.UInt64)">
            <summary>
            Converts a ulong to a Guid. Ex. 1 == 00000000-0000-0000-0000-000000000001
            </summary>
            <param name="value"> The value to be converted to a Guid. </param>
            <returns> The guid. </returns>
        </member>
        <member name="T:Speedy.Extensions.LoggingExtensions">
            <summary>
            Extensions for logging.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.LoggingExtensions.GetMessage(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <summary>
            Convert the event written event argument to its payload string
            </summary>
            <param name="args"> The item to process. </param>
            <returns> The formatted message. </returns>
        </member>
        <member name="M:Speedy.Extensions.LoggingExtensions.GetDetailedMessage(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <summary>
            Convert the event written event argument to its payload string
            </summary>
            <param name="args"> The item to process. </param>
            <returns> The formatted message. </returns>
        </member>
        <member name="T:Speedy.Extensions.NewtonsoftExtensions">
            <summary>
            Extensions for Newtonsoft JSON.net
            </summary>
        </member>
        <member name="M:Speedy.Extensions.NewtonsoftExtensions.GetConverter``1(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Locates the first item of the provided type.
            </summary>
            <typeparam name="T"> The type of the JsonConverter. </typeparam>
            <param name="settings"> The JSON serializer settings. </param>
            <returns> The converter of provided type or otherwise default type. </returns>
        </member>
        <member name="T:Speedy.Extensions.QueryableExtensions">
            <summary>
            Extensions for queryable
            </summary>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets paged results.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <param name="order"> An optional order of the collection. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Func{``0,``1},Speedy.Collections.OrderBy{``0},Speedy.Collections.OrderBy{``0}[])">
            <summary>
            Gets paged results.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <param name="order"> The order of the collection. </param>
            <param name="thenBys"> An optional then bys to order the collection. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="M:Speedy.Extensions.QueryableExtensions.GetPagedResults``2(System.Linq.IQueryable{``0},Speedy.PagedRequest,System.Func{``0,``1})">
            <summary>
            Gets paged results.
            </summary>
            <typeparam name="T1"> The type of item in the query. </typeparam>
            <typeparam name="T2"> The type of the item returned. </typeparam>
            <param name="query"> The queryable collection. </param>
            <param name="request"> The request values. </param>
            <param name="transform"> The function to transfer the results. </param>
            <returns> The paged results. </returns>
        </member>
        <member name="T:Speedy.Extensions.ReflectionExtensions">
            <summary>
            Extensions for all the things.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.CachedMakeGenericMethod(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a
            MethodInfo object representing the resulting constructed method. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The property information to get the generic arguments for. </param>
            <param name="arguments"> An array of types to be substituted for the type parameters of the current generic method definition. </param>
            <returns> The method information with generics. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedAccessors(System.Reflection.PropertyInfo)">
            <summary>
            Gets a list of generic arguments for the provided property information. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The property information to get the generic arguments for. </param>
            <returns> The list of generic arguments for the property information of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedField(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a field by name for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the fields for. </param>
            <param name="name"> The type field name to locate. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The field information for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedFields(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of fields for the provided item. The results are cached so the next query is much faster.
            </summary>
            <param name="item"> The item to get the fields for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of field infos for the item. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedFields(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of fields for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the fields for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of field infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedGenericArguments(System.Reflection.MethodInfo)">
            <summary>
            Gets a list of generic arguments for the provided method information. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The method information to get the generic arguments for. </param>
            <returns> The list of generic arguments for the method information of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedGenericArguments(System.Type)">
            <summary>
            Gets a list of generic arguments for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the generic arguments for. </param>
            <returns> The list of generic arguments for the type of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethod(System.Type,System.String,System.Type[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the method for. </param>
            <param name="name"> The string containing the name of the public method to get. </param>
            <param name="types"> An array of type objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of type objects (as provided by the EmptyTypes field) to get a method that takes no parameters. </param>
            <returns> An object representing the public method whose parameters match the specified argument types, if found; otherwise null. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethod(System.Object,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets the method info from the provided type by the name provided.
            The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the methods for. </param>
            <param name="name"> The name of the method to be queried. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of method infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethods(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of methods for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the methods for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of method infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedMethods(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of methods for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the methods for. </param>
            <param name="flags"> The flags used to query with. </param>
            <returns> The list of method infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedParameters(System.Reflection.MethodInfo)">
            <summary>
            Gets a list of parameter infos for the provided method info. The results are cached so the next query is much faster.
            </summary>
            <param name="info"> The method info to get the parameters for. </param>
            <returns> The list of parameter infos for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedProperties(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of property types for the provided object type. The results are cached so the next query is much faster.
            </summary>
            <param name="value"> The value to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type of the value. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedProperties(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of property information for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedProperty(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets the information for the provided type and property name. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the property for. </param>
            <param name="name"> The name of the property to be queried. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetCachedVirtualProperties(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets a list of virtual property types for the provided type. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The type to get the properties for. </param>
            <param name="flags"> The flags to find properties by. Defaults to Public, Instance, Flatten Hierarchy </param>
            <returns> The list of properties for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetExpressionName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Get the name of the expression.
            </summary>
            <param name="expression"> The expression to process. </param>
            <returns> The name of the expression. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetGenericTypes(System.Object)">
            <summary>
            Get the types for the generic.
            </summary>
            <param name="value"> The value to get the types for. </param>
            <returns> The type values for the generic object. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetMemberValue(System.Object,System.String)">
            <summary>
            Gets the public or private member using reflection.
            </summary>
            <param name="value"> The value that contains the member. </param>
            <param name="memberName"> The name of the field or property to get the value of. </param>
            <returns> The value of member. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetRealType(System.Object)">
            <summary>
            Gets the real type of the entity. For use with proxy entities.
            </summary>
            <param name="item"> The object to process. </param>
            <returns> The real base type for the proxy or just the initial type if it is not a proxy. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetRealType(System.Type)">
            <summary>
            Gets the real type of the entity. For use with proxy entities.
            </summary>
            <param name="type"> The type to process. </param>
            <returns> The real base type for the proxy or just the initial type if it is not a proxy. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetVirtualPropertyNames(System.Type)">
            <summary>
            Gets a list of virtual property names. The results are cached so the next query is much faster.
            </summary>
            <param name="type"> The value to get the property names for. </param>
            <returns> The list of virtual property names for the type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.SetMemberValue(System.Object,System.String,System.Object)">
            <summary>
            Gets the public or private member using reflection.
            </summary>
            <param name="obj"> The target object. </param>
            <param name="memberName"> Name of the field or property. </param>
            <param name="newValue"> The new value to be set. </param>
            <returns> Old Value </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.ToAssemblyName(System.Type)">
            <summary>
            Converts the type to an assembly name. Does not include version. Ex. System.String,mscorlib
            </summary>
            <param name="type"> The type to get the assembly name for. </param>
            <returns> The assembly name for the provided type. </returns>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.GetDefault(System.Type)">
            <summary>
            Retrieves the default value for a given Type
            </summary>
            <param name="type"> The Type for which to get the default value </param>
            <returns> The default value for <paramref name="type" /> </returns>
            <remarks>
            If a null Type, a reference Type, or a System.Void Type is supplied, this method always returns null.  If a value type
            is supplied which is not publicly visible or which contains generic parameters, this method will fail with an
            exception.
            </remarks>
        </member>
        <member name="M:Speedy.Extensions.ReflectionExtensions.ToDetailedString(System.Exception)">
            <summary>
            Gets a detailed string of the exception. Includes messages of all exceptions.
            </summary>
            <param name="ex"> The exception to process. </param>
            <returns> The detailed string of the exception. </returns>
        </member>
        <member name="T:Speedy.Extensions.StringExtensions">
            <summary>
            Extensions for the string type.
            </summary>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ConvertHexStringToByteArray(System.String)">
            <summary>
            Convert a hex string to a byte array.
            </summary>
            <param name="hexString"> A string with hex data (2 bytes per character). </param>
            <returns> The byte array value of the hex string. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.FromHexString(System.String)">
            <summary>
            Convert a HEX string to a regular text string.
            </summary>
            <param name="value"> A string with hex data (2 bytes per character). </param>
            <returns> The string value. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.FromHexStringToArray(System.String)">
            <summary>
            Convert the hex string back to byte array.
            </summary>
            <param name="value"> The hex string to be converter. </param>
            <returns> The byte array. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.MaxLength(System.String,System.Int32,System.Boolean)">
            <summary>
            Trims string to a maximum length.
            </summary>
            <param name="value"> The value to process. </param>
            <param name="max"> The maximum length of the string. </param>
            <param name="addEllipses"> The option to add ellipses to shorted strings. Defaults to false. </param>
            <returns> The value limited to the maximum length. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToHexString(System.String)">
            <summary>
            Converts a string to hex string value. Ex. "A" -> "41"
            </summary>
            <param name="value"> The string value to convert. </param>
            <returns> The string in a hex string format. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToHexString(System.Guid)">
            <summary>
            Converts a byte array to a hex string format. Ex. [41],[42] = "4142"
            </summary>
            <param name="data"> The byte array to convert. </param>
            <returns> The byte array in a hex string format. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string format. Ex. [41],[42] = "4142"
            </summary>
            <param name="data"> The byte array to convert. </param>
            <returns> The byte array in a hex string format. </returns>
        </member>
        <member name="M:Speedy.Extensions.StringExtensions.ToLiteral(System.String)">
            <summary>
            To literal version of the string.
            </summary>
            <param name="input"> The string input. </param>
            <returns> The literal version of the string. </returns>
        </member>
        <member name="T:Speedy.Extensions.TaskExtensions">
            <summary>
            Extensions for Task
            </summary>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.AwaitResults(System.Threading.Tasks.Task)">
            <summary>
            Await the results of a task.
            </summary>
            <param name="task"> The task to run. </param>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.AwaitResults``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Await the results of a task.
            </summary>
            <typeparam name="T"> The type to return. </typeparam>
            <param name="task"> The task to run. </param>
            <returns> The result of the task. </returns>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.AwaitResults``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Await the results of a task.
            </summary>
            <typeparam name="T"> The type to return. </typeparam>
            <param name="task"> The task to run. </param>
            <param name="timeout"> The timeout if the task does not complete. </param>
            <returns> The result of the task. </returns>
        </member>
        <member name="M:Speedy.Extensions.TaskExtensions.IsCompleted(System.Threading.Tasks.Task)">
            <summary>
            Determine if a task has started and is completed.
            </summary>
            <param name="task"> The task to check. </param>
            <returns> True if the task is Cancelled, Faulted, or RanToCompletion otherwise false. </returns>
        </member>
        <member name="T:Speedy.Extensions.TrackerExtensions">
            <summary>
            Extensions for tracker profiler
            </summary>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.AddOrUpdate(System.Collections.Generic.ICollection{Speedy.Profiling.TrackerPathValue},System.String,System.Object)">
            <summary>
            Add or update the collection with the event value.
            </summary>
            <param name="collection"> The collection to update. </param>
            <param name="name"> The event name to add or update. </param>
            <param name="value"> The event value to add or update. </param>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.AddOrUpdate(System.Collections.Generic.ICollection{Speedy.Profiling.TrackerPathValue},Speedy.Profiling.TrackerPathValue)">
            <summary>
            Add or update the collection with the event value.
            </summary>
            <param name="collection"> The collection to update. </param>
            <param name="pathValue"> The event value to add or update. </param>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.AddOrUpdate(System.Collections.Generic.ICollection{Speedy.Profiling.TrackerPathValue},Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds or updates the item in the collection.
            </summary>
            <param name="collection"> The collection to be updated. </param>
            <param name="items"> The items to be added or updated. </param>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.OpenRepository(Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath},Speedy.Profiling.TrackerPath)">
            <summary>
            Creates a repository and writes the first session event.
            </summary>
            <param name="provider"> The provider to start a new repository on. </param>
            <param name="session"> The session event to start the repository with. </param>
            <returns> The repository containing the session event. </returns>
        </member>
        <member name="M:Speedy.Extensions.TrackerExtensions.WriteAndSave(Speedy.Storage.KeyValue.IKeyValueRepository{Speedy.Profiling.TrackerPath},Speedy.Profiling.TrackerPath)">
            <summary>
            Write the event to the repository and save it.
            </summary>
            <param name="repository"> The repository to write to. </param>
            <param name="value"> The event to be written to the repository. </param>
        </member>
        <member name="T:Speedy.Extensions.UpdatableExtensions">
            <summary>
            Extensions for the IUpdatable interface
            </summary>
        </member>
        <member name="M:Speedy.Extensions.UpdatableExtensions.UpdateWithUsingReflection``2(``0,``1,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <typeparam name="T"> The type to be updated. </typeparam>
            <typeparam name="T2"> The source type of the provided update. </typeparam>
            <param name="value"> The value to be updated. </param>
            <param name="update"> The source of the updates. </param>
            <param name="exclusions"> An optional list of members to exclude. </param>
        </member>
        <member name="T:Speedy.Extensions.UtilityExtensions">
            <summary>
            General utility extensions
            </summary>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.IfThen``1(``0,System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Runs action if the test is true.
            </summary>
            <param name="item"> The item to process. (does nothing) </param>
            <param name="test"> The test to validate. </param>
            <param name="action"> The action to run if test is true. </param>
            <typeparam name="T"> The type the function returns </typeparam>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.IfThenElse``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0})">
            <summary>
            Runs action1 if the test is true or action2 if false.
            </summary>
            <param name="item"> The item to process. (does nothing) </param>
            <param name="test"> The test to validate. </param>
            <param name="action1"> The action to run if test is true. </param>
            <param name="action2"> The action to run if test is false. </param>
            <typeparam name="T"> The type the function returns </typeparam>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Retry``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            Continues to run the action until we hit the timeout. If an exception occurs then delay for the
            provided delay time.
            </summary>
            <typeparam name="T"> The type for this retry. </typeparam>
            <param name="action"> The action to attempt to retry. </param>
            <param name="timeout"> The timeout to stop retrying. </param>
            <param name="delay"> The delay between retries. </param>
            <returns> The response from the action. </returns>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Retry(System.Action,System.Int32,System.Int32)">
            <summary>
            Continues to run the action until we hit the timeout. If an exception occurs then delay for the
            provided delay time.
            </summary>
            <param name="action"> The action to attempt to retry. </param>
            <param name="timeout"> The timeout to stop retrying. </param>
            <param name="delay"> The delay between retries. </param>
            <returns> The response from the action. </returns>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Wait(System.Func{System.Boolean},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Runs the action until the action returns true or the timeout is reached. Will delay in between actions of the provided
            time.
            </summary>
            <param name="action"> The action to call. </param>
            <param name="timeout"> The timeout to attempt the action. This value is in milliseconds. </param>
            <param name="delay"> The delay in between actions. This value is in milliseconds. </param>
            <param name="useTimeService"> An optional flag to use the TimeService instead of DateTime. Defaults to false to use DateTime. </param>
            <returns> Returns true of the call completed successfully or false if it timed out. </returns>
        </member>
        <member name="M:Speedy.Extensions.UtilityExtensions.Wait(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Wait for a cancellation or for the value to time out.
            </summary>
            <param name="cancellationPending"> A check for cancellation. </param>
            <param name="value"> The value of time to wait for. </param>
            <param name="delay"> The delay between checks. </param>
            <param name="minimum"> The minimal time to wait. </param>
            <param name="maximum"> The maximum time to wait. </param>
            <param name="useTimeService"> An optional flag to use the TimeService instead of DateTime. Defaults to false to use DateTime. </param>
            <returns> True if the wait was completed, false if the wait was cancelled. </returns>
        </member>
        <member name="T:Speedy.IBindable">
            <summary>
            Represents a bindable object.
            </summary>
        </member>
        <member name="M:Speedy.IBindable.GetDispatcher">
            <summary>
            Get the current dispatcher in use.
            </summary>
            <returns>
            The dispatcher that is currently being used. Null if no dispatcher is assigned.
            </returns>
        </member>
        <member name="M:Speedy.IBindable.UpdateDispatcher(Speedy.IDispatcher)">
            <summary>
            Updates the entity for this entity.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="T:Speedy.IDatabase">
            <summary>
            The interfaces for a Speedy database.
            </summary>
        </member>
        <member name="P:Speedy.IDatabase.Options">
            <summary>
            Gets the options for this database.
            </summary>
        </member>
        <member name="M:Speedy.IDatabase.Add``2(``0)">
            <summary>
            Adds an entity to the database
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <param name="item"> The item to be added. </param>
            <returns> The entity that was added. </returns>
        </member>
        <member name="M:Speedy.IDatabase.DiscardChanges">
            <summary>
            Discard all changes made in this context to the underlying database.
            </summary>
        </member>
        <member name="M:Speedy.IDatabase.GetReadOnlyRepository``2">
            <summary>
            Gets a read only repository of the requested entity.
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="M:Speedy.IDatabase.GetRepository``2">
            <summary>
            Gets a repository of the requested entity.
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="M:Speedy.IDatabase.Remove``2(``0)">
            <summary>
            Removes an entity from the database
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <param name="item"> The item to be removed. </param>
            <returns> The entity that was removed. </returns>
        </member>
        <member name="M:Speedy.IDatabase.SaveChanges">
            <summary>
            Saves all changes made in this context to the underlying database.
            </summary>
            <returns>
            The number of objects written to the underlying database.
            </returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if the context has been disposed. </exception>
        </member>
        <member name="T:Speedy.IDatabaseProvider`1">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="M:Speedy.IDatabaseProvider`1.BulkProcess(System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <summary>
            Runs a bulk process where the database lifetime is based on the iteration size.
            A database will be instantiated and used for the iteration count. When the iteration
            count is reach the database will be saved and disposed. A new database will be created
            and processing will continue until the total count is reached. Finally the database
            will be saved and disposed.
            </summary>
            <param name="total"> The total amount of items to process. </param>
            <param name="iterationSize"> The iteration size of each process. </param>
            <param name="process"> The action to the process. </param>
        </member>
        <member name="M:Speedy.IDatabaseProvider`1.GetDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.IDatabaseProvider`1.GetDatabase(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.IDatabaseProvider">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="P:Speedy.IDatabaseProvider.Options">
            <summary>
            Gets or sets the options for the database provider.
            </summary>
        </member>
        <member name="M:Speedy.IDatabaseProvider.GetDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.IDatabaseProvider.GetDatabase(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.IDispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="P:Speedy.IDispatcher.HasThreadAccess">
            <summary>
            Has access to the dispatching thread.
            </summary>
        </member>
        <member name="M:Speedy.IDispatcher.Run(System.Action)">
            <summary>
            Run an action on the dispatching thread.
            </summary>
            <param name="action"> </param>
        </member>
        <member name="M:Speedy.IDispatcher.RunAsync(System.Action)">
            <summary>
            Run an asynchronous action on the dispatching thread.
            </summary>
            <param name="action"> </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.IIncludableQueryable`2">
            <summary>
            Supports queryable Include/ThenInclude chaining operators.
            </summary>
            <typeparam name="T"> The entity type. </typeparam>
            <typeparam name="T2"> The type of the related entity to be included. </typeparam>
        </member>
        <member name="M:Speedy.IIncludableQueryable`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the query to include related entities in the results.
            </summary>
            <param name="include"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IIncludableQueryable`2.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Process the ThenInclude on an entity collection.
            </summary>
            <typeparam name="TPreviousProperty"> The previous property type of the related entity to be included. </typeparam>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="include"> A lambda expression representing the navigation property to be included (<c> t =&gt; t.Property1 </c>). </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="M:Speedy.IIncludableQueryable`2.ThenInclude``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Specifies additional related data to be further included based on a related type that was just included.
            </summary>
            <typeparam name="TProperty"> The type of the related entity to be included. </typeparam>
            <param name="include"> A lambda expression representing the navigation property to be included (<c> t =&gt; t.Property1 </c>). </param>
            <returns> A new query with the related data included. </returns>
        </member>
        <member name="T:Speedy.IncludableQueryable`2">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            Instantiate an instance of the IncludableQueryable
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Speedy.IncludableQueryable`2.ElementType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.IncludableQueryable`2.Expression">
            <inheritdoc />
        </member>
        <member name="P:Speedy.IncludableQueryable`2.Provider">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.ThenInclude``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.ThenInclude``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.IncludableQueryable`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Speedy.IRepository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type of the entity of the collection. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.IRepository`2.Add(`0)">
            <summary>
            Add an entity to the repository. The ID of the entity must be the default value.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.IRepository`2.AddOrUpdate(`0)">
            <summary>
            Adds or updates an entity in the repository. The ID of the entity must be the default value to add and a value to
            update.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAdd(`0[])">
            <summary>
            Bulk add to do more performant additions.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAdd(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk add to do more performant additions.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAddOrUpdate(`0[])">
            <summary>
            Bulk command to do more performant additions and / or updates.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkAddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk command to do more performant additions and / or updates.
            </summary>
            <param name="entities"> The items to be inserted. </param>
        </member>
        <member name="M:Speedy.IRepository`2.BulkRemove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Bulk remove based on provided filter. Only simple expressions are supported.
            </summary>
            <param name="filter"> The filter for the items to be removed. </param>
            <remarks>
            Please let me know if you find an expression that does not work.
            </remarks>
        </member>
        <member name="M:Speedy.IRepository`2.BulkUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Bulk update base on provided query and update expression. Only simple expressions are supported.
            </summary>
            <param name="filter"> The filter for the items to be updated. </param>
            <param name="update"> The update to be applied. </param>
            <remarks>
            Please let me know if you find an expression that does not work.
            </remarks>
        </member>
        <member name="M:Speedy.IRepository`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the query to include related entities in the results.
            </summary>
            <param name="include"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IRepository`2.Including(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Configures the query to include multiple related entities in the results.
            </summary>
            <param name="includes"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IRepository`2.Including``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
            Configures the query to include multiple related entities in the results.
            </summary>
            <param name="includes"> The related entities to include. </param>
            <returns> The results of the query including the related entities. </returns>
        </member>
        <member name="M:Speedy.IRepository`2.Remove(`1)">
            <summary>
            Removes an entity from the repository.
            </summary>
            <param name="id"> The ID of the entity to remove. </param>
        </member>
        <member name="M:Speedy.IRepository`2.Remove(`0)">
            <summary>
            Removes an entity from the repository.
            </summary>
            <param name="entity"> The entity to remove. </param>
        </member>
        <member name="M:Speedy.IRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Removes a set of entities from the repository.
            </summary>
            <param name="filter"> The filter of the entities to remove. </param>
        </member>
        <member name="T:Speedy.ISyncableDatabase">
            <summary>
            The interfaces for a Speedy syncable database.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableDatabase.KeyCache">
            <summary>
            An optional key manager for caching entity IDs (primary and sync).
            </summary>
        </member>
        <member name="M:Speedy.ISyncableDatabase.GetSyncableRepositories(Speedy.Sync.SyncOptions)">
            <summary>
            Gets a list of syncable repositories.
            </summary>
            <returns> The list of syncable repositories. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabase.GetSyncableRepository``2">
            <summary>
            Gets a syncable repository of the requested entity.
            </summary>
            <typeparam name="T"> The type of the entity to get a repository for. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabase.GetSyncableRepository(System.Type)">
            <summary>
            Gets a syncable repository of the requested entity.
            </summary>
            <returns> The repository of entities requested. </returns>
        </member>
        <member name="T:Speedy.ISyncableDatabaseProvider`1">
            <summary>
            Represents a database provider for syncable databases that is also a normal database provider.
            </summary>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider`1.GetSyncableDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider`1.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.ISyncableDatabaseProvider">
            <summary>
            Represents a database provider for syncable databases.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableDatabaseProvider.KeyCache">
            <summary>
            An optional key manager for tracking entity IDs (primary and sync).
            </summary>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider.GetSyncableDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.ISyncableDatabaseProvider.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Gets an instance of the database.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.ISyncableRepository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type of the entity of the collection. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="T:Speedy.ISyncableRepository">
            <summary>
            Represents a syncable repository.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableRepository.RealType">
            <summary>
            The type this repository is for.
            </summary>
        </member>
        <member name="P:Speedy.ISyncableRepository.TypeName">
            <summary>
            The type name this repository is for. Will be in assembly name format.
            </summary>
        </member>
        <member name="M:Speedy.ISyncableRepository.Add(Speedy.Sync.ISyncEntity)">
            <summary>
            Adds a sync entity to the repository.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.ISyncableRepository.GetChangeCount(System.DateTime,System.DateTime,Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Gets the count of changes from the repository.
            </summary>
            <param name="since"> The start date and time get changes for. </param>
            <param name="until"> The end date and time get changes for. </param>
            <param name="filter"> The optional filter expression to filter changes. </param>
            <returns> The count of changes from the repository. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.GetChanges(System.DateTime,System.DateTime,System.Int32,System.Int32,Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Gets the changes from the repository. The results are read only and will not have tracking enabled.
            </summary>
            <param name="since"> The start date and time get changes for. </param>
            <param name="until"> The end date and time get changes for. </param>
            <param name="skip"> The number of items to skip. </param>
            <param name="take"> The number of items to take. </param>
            <param name="filter"> The optional filter expression to filter changes. </param>
            <returns> The list of changes from the repository. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.Read(System.Guid)">
            <summary>
            Gets the sync entity by the ID.
            </summary>
            <param name="syncId"> The ID of the sync entity. </param>
            <returns> The sync entity or null. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.Read(Speedy.Sync.ISyncEntity,Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Gets the sync entity by the ID.
            </summary>
            <param name="entity"> The entity to use with the filter. </param>
            <param name="filter"> An optional sync filter to locate the entity. </param>
            <returns> The sync entity or null. </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.ReadAllKeys">
            <summary>
            Read all keys for the repository.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ISyncableRepository.Remove(Speedy.Sync.ISyncEntity)">
            <summary>
            Removes a sync entity to the repository.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="T:Speedy.IUnwrappable">
            <summary>
            Represents an unwrappable entity
            </summary>
        </member>
        <member name="M:Speedy.IUnwrappable.Unwrap">
            <summary>
            Unwraps an object from the object proxy.
            </summary>
            <returns> The unwrapped entity. </returns>
        </member>
        <member name="T:Speedy.Logging.Logger">
            <summary>
            Represents a logger for Speedy.
            </summary>
        </member>
        <member name="F:Speedy.Logging.Logger.LoggerGuid">
            <summary>
            The GUID for the logger.
            </summary>
        </member>
        <member name="F:Speedy.Logging.Logger.LoggerName">
            <summary>
            The Name for the logger.
            </summary>
        </member>
        <member name="P:Speedy.Logging.Logger.Instance">
            <summary>
            Gets the global instance of the logger.
            </summary>
        </member>
        <member name="M:Speedy.Logging.Logger.Write(System.Guid,System.String,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="sessionId"> The ID of the session this message is for. </param>
            <param name="message"> The message to be written. </param>
            <param name="level"> The level of this message. </param>
        </member>
        <member name="T:Speedy.Logging.LogListener">
            <summary>
            Represents an example on how to listen to the logger.
            </summary>
            <remarks>
            LogListener must be in the same process as the logger. See other ETW examples on how
            to capture logger from outside the process.
            </remarks>
        </member>
        <member name="M:Speedy.Logging.LogListener.#ctor(System.Guid,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Instantiates an instance of the log listener.
            </summary>
            <param name="sessionId"> The session of the log to monitor. </param>
            <param name="level"> The level in which to log. </param>
        </member>
        <member name="P:Speedy.Logging.LogListener.Events">
            <summary>
            The events that have been captured from the event source (logger).
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.IsListening">
            <summary>
            The log listener is listening.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.Level">
            <summary>
            The level in which to log.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.OnlyEventsWithMessages">
            <summary>
            Flag to capture only events with messages
            </summary>
            <remarks>
            Defaults to true so only events with a message will be captured.
            </remarks>
        </member>
        <member name="P:Speedy.Logging.LogListener.OutputToConsole">
            <summary>
            Flag to write incoming events to the console.
            </summary>
        </member>
        <member name="P:Speedy.Logging.LogListener.SessionId">
            <summary>
            The ID of the session.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogListener.CreateSession(System.Guid,System.Diagnostics.Tracing.EventLevel,System.Action{Speedy.Logging.LogListener})">
            <summary>
            Create an instance of the log listener and start listening.
            </summary>
            <param name="sessionId"> The session of the log to monitor. </param>
            <param name="level"> The level in which to log. </param>
            <param name="initialize"> An optional initialize action. </param>
        </member>
        <member name="M:Speedy.Logging.LogListener.Start">
            <summary>
            Start listening for log events.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogListener.Stop">
            <summary>
            Start listening for log events.
            </summary>
        </member>
        <member name="M:Speedy.Logging.LogListener.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> True if disposing and false if otherwise. </param>
        </member>
        <member name="M:Speedy.Logging.LogListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Logging.LogListener.OnPropertyChanged(System.String)">
            <summary>
            Notified when a property changed.
            </summary>
            <param name="propertyName"> The name of the property that has changed. </param>
        </member>
        <member name="E:Speedy.Logging.LogListener.EventWritten">
            <summary>
            Occurs when an event is written.
            </summary>
        </member>
        <member name="E:Speedy.Logging.LogListener.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Speedy.ModifiableEntity`1">
            <summary>
            Represents a modifiable entity.
            </summary>
            <typeparam name="T"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.ModifiableEntity`1.ModifiedOn">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Net.ServiceRequest`1">
            <summary>
            Represents a service request containing a collection.
            </summary>
            <typeparam name="T"> The type of the item collection. </typeparam>
        </member>
        <member name="M:Speedy.Net.ServiceRequest`1.#ctor">
            <summary>
            Instantiates an instance of a service request.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceRequest`1.#ctor(`0[])">
            <summary>
            Instantiates an instance of a service request.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceRequest`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of a service request.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest`1.Collection">
            <summary>
            The collection of items to include in the request.
            </summary>
        </member>
        <member name="T:Speedy.Net.ServiceRequest">
            <summary>
            Represents a service request.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Filters">
            <summary>
            The optional collection of filter values.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Including">
            <summary>
            The values to be include in the results. Defaults to an empty collection.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Options">
            <summary>
            The optional collection of request options.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Skip">
            <summary>
            The number of items to skip.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceRequest.Take">
            <summary>
            The number of items requested.
            </summary>
        </member>
        <member name="T:Speedy.Net.ServiceResult`1">
            <summary>
            Represents the results for a service request.
            </summary>
            <typeparam name="T"> The type of the items in the results collection. </typeparam>
        </member>
        <member name="M:Speedy.Net.ServiceResult`1.#ctor">
            <summary>
            Instantiates an instance of a request result.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceResult`1.#ctor(`0[])">
            <summary>
            Instantiates an instance of a request result.
            </summary>
        </member>
        <member name="M:Speedy.Net.ServiceResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiates an instance of a request result.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.Collection">
            <summary>
            The results for a service request.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.HasMore">
            <summary>
            The value to determine if the request has more pages.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.Skipped">
            <summary>
            The number of items that was skipped to start this result.
            </summary>
        </member>
        <member name="P:Speedy.Net.ServiceResult`1.TotalCount">
            <summary>
            The total count of items for the request.
            </summary>
        </member>
        <member name="T:Speedy.Net.WebClient">
            <summary>
            This class is used for making GET and POST calls to an HTTP endpoint.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebClient.#ctor(System.String,System.Int32,System.Net.NetworkCredential,System.Net.WebProxy)">
            <summary>
            Initializes a new HTTP helper to point at a specific URI, and with the specified session identifier.
            </summary>
            <param name="baseUri"> The base URI. </param>
            <param name="timeout"> The timeout in milliseconds. </param>
            <param name="credential"> The optional credential to authenticate with. </param>
            <param name="proxy"> The optional proxy to use. </param>
        </member>
        <member name="P:Speedy.Net.WebClient.BaseUri">
            <summary>
            Gets the base URI for connecting.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Cookies">
            <summary>
            The cookies for this client.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Credential">
            <summary>
            The credentials for the connection.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Headers">
            <summary>
            The headers for the connection.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.IsAuthenticated">
            <summary>
            Determines if the connection is authenticated.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Timeout">
            <summary>
            Gets or sets the number of milliseconds to wait before the request times out. The default value is 100 seconds.
            </summary>
        </member>
        <member name="P:Speedy.Net.WebClient.Proxy">
            <summary>
            Gets or sets an optional proxy for the connection.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebClient.Delete(System.String)">
            <summary>
            Delete request
            </summary>
            <param name="uri"> The URI to use. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Deserialize``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Deserialize the response.
            </summary>
            <typeparam name="T"> The type to deserialize into. </typeparam>
            <param name="result"> The result to deserialize. </param>
            <returns> The deserialized type. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Get``1(System.String)">
            <summary>
            Gets a response and deserialize it.
            </summary>
            <typeparam name="T"> The type to deserialize into. </typeparam>
            <param name="uri"> The URI of the content to deserialize. </param>
            <returns> The deserialized type. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Get(System.String)">
            <summary>
            Gets a response and deserialize it.
            </summary>
            <param name="uri"> The URI of the content to deserialize. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Patch``1(System.String,``0)">
            <summary>
            Patch an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to patch to. </param>
            <param name="content"> The content to update with. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Post``2(System.String,``0)">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <typeparam name="TResult"> The type to respond with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <returns> The server result. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Post``1(System.String,``0)">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Post(System.String,System.String)">
            <summary>
            Post an item on the server with the provide content.
            </summary>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Put``2(System.String,``0)">
            <summary>
            Put an item on the server with the provide content.
            </summary>
            <param name="uri"> The URI to put to. </param>
            <param name="content"> The content to update with. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="M:Speedy.Net.WebClient.Put``1(System.String,``0)">
            <summary>
            Put (update) an item on the server with the provide content.
            </summary>
            <typeparam name="TContent"> The type to update with. </typeparam>
            <param name="uri"> The URI to post to. </param>
            <param name="content"> The content to update with. </param>
            <returns> The response from the server. </returns>
        </member>
        <member name="T:Speedy.Net.WebSyncClient">
            <summary>
            Web client for a sync server implemented over Web API.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebSyncClient.#ctor(System.String,Speedy.ISyncableDatabaseProvider,System.String,System.String,System.Net.NetworkCredential,System.Net.WebProxy,System.Int32)">
            <summary>
            Instantiates an instance of the class.
            </summary>
            <param name="provider"> The database provider for the client </param>
            <param name="name"> The name of the client. </param>
            <param name="serverUri"> The server to send data to. </param>
            <param name="syncUri"> The sync URI. Defaults to "api/Sync". </param>
            <param name="credential"> The optional credential for the sync client. </param>
            <param name="proxy"> The optional proxy to use. </param>
            <param name="timeout"> The timeout in milliseconds for each transaction. </param>
        </member>
        <member name="P:Speedy.Net.WebSyncClient.DatabaseProvider">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.IncomingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Name">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Options">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.OutgoingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Statistics">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.SyncOptions">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.SyncSession">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.Profiler">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Net.WebSyncClient.WebClient">
            <summary>
            The web client to use to connect to the server.
            </summary>
        </member>
        <member name="M:Speedy.Net.WebSyncClient.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.EndSync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Net.WebSyncClient.GetDatabase``1">
            <inheritdoc />
        </member>
        <member name="T:Speedy.PagedRequest">
            <summary>
            Represents a paged request to a service.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.#ctor">
            <summary>
            Instantiates a paged request.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.Filter">
            <summary>
            The filter to limit the request to. Defaults to an empty filter.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.FilterValues">
            <summary>
            The optional collection of filter values.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.Including">
            <summary>
            The values to be include in the results. Defaults to an empty collection.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.Options">
            <summary>
            The optional collection of request options.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.OptionValues">
            <summary>
            The optional collection of option values.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.Order">
            <summary>
            The value to order the request by.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.Page">
            <summary>
            The page to start the request on.
            </summary>
        </member>
        <member name="P:Speedy.PagedRequest.PerPage">
            <summary>
            The number of items per page.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.AddIncluding(System.String[])">
            <summary>
            Add values to be included.
            </summary>
            <param name="values"> The values to be included. </param>
        </member>
        <member name="M:Speedy.PagedRequest.AddOptions(System.String,System.String)">
            <summary>
            Add values of options for the request.
            </summary>
            <param name="key"> The key for the option. </param>
            <param name="value"> The value for the option. </param>
        </member>
        <member name="M:Speedy.PagedRequest.Cleanup(System.Int32,System.Int32)">
            <summary>
            Cleanup the request. Set default values.
            </summary>
        </member>
        <member name="M:Speedy.PagedRequest.GetOptionValue(System.String)">
            <summary>
            Get the option value indexed at the key in the option index.
            </summary>
            <param name="option"> The option name. </param>
            <returns> The value in the same index of the key value in the option collection. </returns>
        </member>
        <member name="M:Speedy.PagedRequest.HasOption(System.String)">
            <summary>
            Performs case insensitive search on the options list.
            </summary>
            <param name="option"> The option to check for. </param>
            <returns> True if the option exists and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.PagedRequest.ProcessIncluding">
            <summary>
            Returns a processed including values. This method separates the key from the filter.
            </summary>
            <returns> The dictionary of includes. </returns>
        </member>
        <member name="M:Speedy.PagedRequest.ToQueryString">
            <summary>
            Convert the request to the query string values.
            </summary>
            <returns> The request in a query string format. </returns>
        </member>
        <member name="M:Speedy.PagedRequest.Cleanup``1(``0,System.Func{``0,System.Boolean},System.Action)">
            <summary>
            Cleanup a single item based on the test.
            </summary>
            <typeparam name="T"> The item type to be cleaned up. </typeparam>
            <param name="item"> The item to test and clean up. </param>
            <param name="test"> The test for the time. </param>
            <param name="action"> The action to cleanup the item. </param>
        </member>
        <member name="T:Speedy.PagedResults`1">
            <summary>
            Represents a page of results for a paged request to a service.
            </summary>
            <typeparam name="T"> The type of the items in the results collection. </typeparam>
        </member>
        <member name="M:Speedy.PagedResults`1.#ctor">
            <summary>
            Instantiate an instance of the paged results.
            </summary>
        </member>
        <member name="M:Speedy.PagedResults`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Instantiate an instance of the paged results.
            </summary>
            <param name="items"> The items in this set of results. </param>
            <param name="perPage"> The items per page. </param>
        </member>
        <member name="P:Speedy.PagedResults`1.Results">
            <summary>
            The results for a paged request.
            </summary>
        </member>
        <member name="T:Speedy.PagedResults">
            <summary>
            Represents a page of results for a paged request to a service.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.Filter">
            <summary>
            The filter to limit the request to. Defaults to an empty filter.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.FilterValues">
            <summary>
            The optional collection of filter values.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.HasMore">
            <summary>
            The value to determine if the request has more pages.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.Including">
            <summary>
            The values to be include in the results. Defaults to an empty collection.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.Order">
            <summary>
            The order the results are in.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.Page">
            <summary>
            The page of these results.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.PerPage">
            <summary>
            The maximum items per page.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.TotalCount">
            <summary>
            The total count of items for the request.
            </summary>
        </member>
        <member name="P:Speedy.PagedResults.TotalPages">
            <summary>
            The total count of pages for the request.
            </summary>
        </member>
        <member name="M:Speedy.PagedResults.CalculatePaginationValues">
            <summary>
            Calculate the start and end pagination values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Speedy.Profiling.AverageTimer">
            <summary>
            Average timer for tracking the average processing time of work.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor">
            <summary>
            Instantiate the average service.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor(System.Int32)">
            <summary>
            Instantiate the average service.
            </summary>
            <param name="limit"> The maximum amount of values to average. </param>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiate the average service.
            </summary>
            <param name="dispatcher"> The dispatcher. </param>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.#ctor(System.Int32,Speedy.IDispatcher)">
            <summary>
            Instantiate the average service.
            </summary>
            <param name="limit"> The maximum amount of values to average. </param>
            <param name="dispatcher"> The dispatcher. </param>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Average">
            <summary>
            Returns the Average value as TimeSpan. This expects the Average values to be "Ticks".
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Count">
            <summary>
            Number of times this timer has been called.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Elapsed">
            <summary>
            The amount of time that has elapsed.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.IsRunning">
            <summary>
            Indicates if the timer is running;
            </summary>
        </member>
        <member name="P:Speedy.Profiling.AverageTimer.Samples">
            <summary>
            Number of samples currently being averaged.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Cancel">
            <summary>
            Cancel the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Time(System.Action)">
            <summary>
            Start the timer, performs the action, then stops the timer.
            </summary>
            <param name="action"> The action to be timed. </param>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Time``1(System.Func{``0})">
            <summary>
            Start the timer, performs the function, then stops the timer, then returns the value from the function.
            </summary>
            <param name="function"> The action to be timed. </param>
            <returns> The value return from the function. </returns>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Reset">
            <summary>
            Reset the average timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.AverageTimer.Stop">
            <summary>
            Stop the timer then update the average.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.ITrackerPathRepository">
            <summary>
            Interface for storing tracker path data.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.ITrackerPathRepository.Write(Speedy.Profiling.TrackerPath[])">
            <summary>
            Writes a collection of tracker paths.
            </summary>
            <param name="paths"> The tracker paths to write. </param>
        </member>
        <member name="T:Speedy.Profiling.MemoryTrackerPathRepository">
            <summary>
            In memory tracker path repository.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.MemoryTrackerPathRepository.#ctor">
            <summary>
            Instantiates an instance of the path repository.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.MemoryTrackerPathRepository.Paths">
            <summary>
            The paths for this repository.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.MemoryTrackerPathRepository.Clear">
            <summary>
            Clears the paths from the repository.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.MemoryTrackerPathRepository.Write(Speedy.Profiling.TrackerPath[])">
            <summary>
            Writes paths to this repository.
            </summary>
            <param name="paths"> The paths to be added. </param>
        </member>
        <member name="T:Speedy.Profiling.Timer">
            <summary>
            Timer that uses the time service.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.#ctor">
            <summary>
            Instantiates an instance of the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the timer.
            </summary>
            <param name="dispatcher"> The dispatcher for handling property changes. </param>
        </member>
        <member name="P:Speedy.Profiling.Timer.Elapsed">
            <summary>
            The time elapsed for the timer.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Timer.IsRunning">
            <summary>
            Indicates the timer is running or not.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Add(Speedy.Profiling.AverageTimer)">
            <summary>
            Adds the average timer elapsed value to this timer.
            </summary>
            <param name="timer"> The timer to be added. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Add(System.TimeSpan)">
            <summary>
            Adds the time value to this timer.
            </summary>
            <param name="time"> The time to be added. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Create(System.Action)">
            <summary>
            Creates a new timer and processes the provided action.
            </summary>
            <param name="action"> The action to be timed. </param>
            <returns> The new timer. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.Create``1(System.Func{``0})">
            <summary>
            Create a new timer and processes provided function.
            </summary>
            <typeparam name="T"> The type of the response from the function. </typeparam>
            <param name="function"> The action to be timed. </param>
            <returns> The value return from the function and the new timer. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.Reset">
            <summary>
            Reset the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Reset(System.TimeSpan)">
            <summary>
            Reset the time while provided an elapsed timer.
            </summary>
            <param name="elapsed"> The value to set elapsed to. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Restart">
            <summary>
            Restarts the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Restart(System.DateTime)">
            <summary>
            Restarts the timer with a specific time. The elapsed time will be reset.
            </summary>
            <param name="dateTime"> The time the timer was started. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Start(System.DateTime)">
            <summary>
            Starts the timer with a specific time.
            </summary>
            <param name="dateTime"> The time the timer was started. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.StartNew">
            <summary>
            Creates a timer and starts it running.
            </summary>
            <returns> The new timer that is currently running. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Timer.Stop(System.DateTime)">
            <summary>
            Stops the timer at a specific time.
            </summary>
            <param name="dateTime"> The time the timer was stopped. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Time(System.Action)">
            <summary>
            Start the timer, performs the action, then stops the timer.
            </summary>
            <param name="action"> The action to be timed. </param>
        </member>
        <member name="M:Speedy.Profiling.Timer.Time``1(System.Func{``0})">
            <summary>
            Start the timer, performs the function, then stops the timer, then returns the value from the function.
            </summary>
            <param name="function"> The action to be timed. </param>
            <returns> The value return from the function. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.Timer.GetCurrentTime">
            <summary>
            Gets the current time for the timer.
            </summary>
            <returns> The current time. </returns>
        </member>
        <member name="M:Speedy.Profiling.Timer.RunningElapsed">
            <summary>
            The current running elapsed time.
            </summary>
            <returns> The running elapsed time. </returns>
        </member>
        <member name="T:Speedy.Profiling.Tracker">
            <summary>
            A tracker to track paths and exceptions. Each tracker instance represents a new sessions.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Tracker.#ctor(Speedy.Profiling.ITrackerPathRepository,Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath})">
            <summary>
            A tracker to capture, store, and transmit paths to a path repository.
            </summary>
            <param name="pathRepository"> The final repository used to store the data. </param>
            <param name="cacheProvider"> The repository used to cache data until it can be stored. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.#ctor(Speedy.Profiling.ITrackerPathRepository,Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath},Speedy.IDispatcher)">
            <summary>
            A tracker to capture, store, and transmit paths to a path repository.
            </summary>
            <param name="pathRepository"> The final repository used to store the data. </param>
            <param name="cacheProvider"> The repository used to cache data until it can be stored. </param>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Profiling.Tracker.Assembly">
            <summary>
            Gets the assembly for this item.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.AssemblyName">
            <summary>
            Gets the assembly name. Gets cached on call.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.AssemblyVersion">
            <summary>
            Gets the version of the assembly.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.PathProcessingDelay">
            <summary>
            Gets or sets the delay in milliseconds between processing paths. The path processor will
            delay this time between processing of paths. There will be a delay 4x this amount when an
            error occurs during processing.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.PathProcessorRunning">
            <summary>
            Gets the running status of the path processor.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.PathRepository">
            <summary>
            Gets the repository for paths that are tracked.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.Tracker.ProcessRepositoryChunk">
            <summary>
            Gets the chunk size for saving data to the final storage location.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Tracker.AddException(System.Exception,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an exception to the tracking session.
            </summary>
            <param name="exception"> The exception to be added. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.AddPath(System.String,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an path to the tracking session.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.AddPath(System.String,System.TimeSpan,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an path with an existing timespan to the tracking session.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="elapsedTime"> The elapsed time of the path. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Initialize(Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Initialize the tracker before using it.
            </summary>
            <param name="values"> The values to associate with this session. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Start(Speedy.Profiling.ITrackerPathRepository,Speedy.Storage.KeyValue.IKeyValueRepositoryProvider{Speedy.Profiling.TrackerPath},Speedy.Profiling.TrackerPathValue[])">
            <summary>
            A tracker to capture, store, and transmit paths to a data channel.
            </summary>
            <param name="repository"> The channel used to store the data remotely. </param>
            <param name="provider"> The repository used to store the data locally. </param>
            <param name="values"> The values to associate with this session. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Start(Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Start the tracker for the provided application.
            </summary>
            <param name="values"> The initial path values. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.StartNewPath(System.String,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Starts a new path. Once the path is done be sure to call <seealso cref="M:Speedy.Profiling.TrackerPath.Complete" />.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
            <returns> The path for tracking an path. </returns>
        </member>
        <member name="M:Speedy.Profiling.Tracker.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> A flag determining if we are currently disposing. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.OnLog(System.String,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Log a message.
            </summary>
            <param name="message"> The message to log. </param>
            <param name="level"> The level of the message. </param>
        </member>
        <member name="M:Speedy.Profiling.Tracker.ProcessSession">
            <summary>
            Give access to process the session for the path processor worker.
            </summary>
            <returns> The number of paths processed. </returns>
        </member>
        <member name="M:Speedy.Profiling.Tracker.ValidateTrackerState">
            <summary>
            Check to see if the tracker is in a good working state.
            </summary>
        </member>
        <member name="E:Speedy.Profiling.Tracker.Log">
            <summary>
            Event for when the tracker needs to write information.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.TrackerPath">
            <summary>
            Represents an tracker path.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.#ctor">
            <summary>
            Instantiates a new instance of the class.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Children">
            <summary>
            Gets or set the child paths.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.CompletedOn">
            <summary>
            Gets or set the date and time the path was completed.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.ElapsedTime">
            <summary>
            Gets or sets the elapsed time between the started on and completed on.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Id">
            <summary>
            Gets or sets the unique ID.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.IsCompleted">
            <summary>
            Returns true if the path has been completed.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.ParentId">
            <summary>
            Gets or sets the parent ID.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.StartedOn">
            <summary>
            Gets or set the date and time the path was started.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Type">
            <summary>
            Gets or sets the path type.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPath.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.AddException(System.Exception,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds an exception to this path.
            </summary>
            <param name="exception"> The exception to be added to the path. </param>
            <param name="values"> Optional values for this exception. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.AddPath(System.String,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Adds a child path to this path.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.AddValue(System.String,System.String)">
            <summary>
            Adds a value to this path.
            </summary>
            <param name="name"> The name of this value. </param>
            <param name="value"> The value of this value. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.Complete">
            <summary>
            Completes the path and adds it to the path or tracker.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.StartNewPath(System.Func{System.String},Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Starts a new path. Once the path is done be sure to call <seealso cref="M:Speedy.Profiling.TrackerPath.Complete" />.
            </summary>
            <param name="name"> The name of the path. </param>
            <param name="values"> Optional values for this path. </param>
            <returns> The path for tracking an path. </returns>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.TrackAction(System.Func{System.String},System.Action{Speedy.Profiling.TrackerPath})">
            <summary>
            Process an action and then add the path.
            </summary>
            <param name="key"> The key for the path. </param>
            <param name="action"> The action to process. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.TrackAction``1(System.Func{System.String},System.Func{Speedy.Profiling.TrackerPath,``0})">
            <summary>
            Process an action and then add the path.
            </summary>
            <typeparam name="T"> The type of the response for the action. </typeparam>
            <param name="key"> The key for the path. </param>
            <param name="action"> The action to process. </param>
            <returns> The result of the action. </returns>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"> True if disposing and false if otherwise. </param>
        </member>
        <member name="M:Speedy.Profiling.TrackerPath.CreatePath(System.Guid,System.Exception,Speedy.Profiling.TrackerPathValue[])">
            <summary>
            Starts a new path including an exception. The path will need to be completed or disposed before it will be added to the tracker.
            </summary>
            <param name="parentId"> The ID of the parent for this path. </param>
            <param name="ex"> The exception to be turned into an path. </param>
            <param name="values"> Optional values for this path. </param>
            <returns> The path for tracking an path. </returns>
        </member>
        <member name="E:Speedy.Profiling.TrackerPath.Completed">
            <summary>
            Occurs when the path is completed.
            </summary>
        </member>
        <member name="T:Speedy.Profiling.TrackerPathValue">
            <summary>
            Represents a value for a tracker path.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.#ctor">
            <summary>
            Instantiates a new instance of the class.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.#ctor(System.String,System.Object,Speedy.IDispatcher)">
            <summary>
            Instantiates a new instance of the class.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPathValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Speedy.Profiling.TrackerPathValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.Equals(Speedy.Profiling.TrackerPathValue)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Profiling.TrackerPathValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.Converters.VersionStringConverter">
            <summary>
            Converter for Version to convert to/from string format of "0.0.0.0".
            </summary>
        </member>
        <member name="P:Speedy.Serialization.Converters.VersionStringConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Serialization.Converters.VersionStringConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.VersionStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Version,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.Converters.VersionStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Version,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.ICloneable`1">
            <summary>
            Represents a cloneable item.
            </summary>
            <typeparam name="T"> The type of the item to clone. </typeparam>
        </member>
        <member name="M:Speedy.Serialization.ICloneable`1.DeepClone(System.Int32)">
            <summary>
            Deep clone the item with child relationships. Default level is -1 which means clone full hierarchy of children.
            </summary>
            <param name="levels"> The number of levels deep to clone. Default is full hierarchy. </param>
            <returns> The cloned objects. </returns>
        </member>
        <member name="M:Speedy.Serialization.ICloneable`1.ShallowClone">
            <summary>
            Shallow clone the item. No child items are cloned.
            </summary>
            <returns> The cloned objects. </returns>
        </member>
        <member name="T:Speedy.Serialization.ICloneable">
            <summary>
            Represents a cloneable item.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.ICloneable.DeepClone(System.Int32)">
            <summary>
            Deep clone the item with child relationships. Default level is -1 which means clone full hierarchy of children.
            </summary>
            <param name="levels"> The number of levels deep to clone. Default is full hierarchy. </param>
            <returns> The cloned objects. </returns>
        </member>
        <member name="M:Speedy.Serialization.ICloneable.ShallowClone">
            <summary>
            Shallow clone the item. No child items are cloned.
            </summary>
            <returns> The cloned objects. </returns>
        </member>
        <member name="T:Speedy.Serialization.JsonContractResolver">
            <summary>
            The contract resolver used for ToJson and GetSerializerSettings.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.JsonContractResolver.#ctor(System.Boolean,System.Func{System.Type,System.Collections.Generic.HashSet{System.String}},System.Func{System.String,System.Boolean})">
            <summary>
            Instantiates a contract resolver for serializing.
            </summary>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="initializeType"> </param>
            <param name="ignoreMember"> </param>
        </member>
        <member name="M:Speedy.Serialization.JsonContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Serialization.Serializer">
            <summary>
            Represents a serializer
            </summary>
        </member>
        <member name="M:Speedy.Serialization.Serializer.DeepClone``1(``0,System.Boolean)">
            <summary>
            Deep clone the item.
            </summary>
            <typeparam name="T"> The type to clone. </typeparam>
            <param name="item"> The item to clone. </param>
            <param name="ignoreVirtuals"> Flag to ignore the virtual properties. </param>
            <returns> The clone of the item. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.DeepCloneEntity(Speedy.IEntity,System.Boolean)">
            <summary>
            Deep clone the item.
            </summary>
            <param name="item"> The item to clone. </param>
            <param name="ignoreVirtuals"> Flag to ignore the virtual properties. </param>
            <returns> The clone of the item. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson``1(System.String)">
            <summary>
            Convert the string into an object.
            </summary>
            <typeparam name="T"> The type to convert into. </typeparam>
            <param name="item"> The JSON data to deserialize. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson``1(System.String,Speedy.Serialization.SerializerSettings)">
            <summary>
            Convert the string into an object.
            </summary>
            <typeparam name="T"> The type to convert into. </typeparam>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="settings"> The settings to be used. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson(System.String,System.Type)">
            <summary>
            Convert the string into an object.
            </summary>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="type"> The type to convert into. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson(System.String,System.Type,Speedy.Serialization.SerializerSettings)">
            <summary>
            Convert the string into an object.
            </summary>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="type"> The type to convert into. </param>
            <param name="settings"> The settings to be used. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.FromJson(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Convert the string into an object.
            </summary>
            <param name="item"> The JSON data to deserialize. </param>
            <param name="type"> The type to convert into. </param>
            <param name="settings"> The settings to be used. </param>
            <returns> The deserialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.IsJson(System.String)">
            <summary>
            Determines if the string is a JSON string.
            </summary>
            <param name="input"> The value to validate. </param>
            <returns> True if the input is JSON or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToJson``1(``0,Speedy.Serialization.SerializerSettings)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <param name="settings"> The settings for the serializer. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.ToJson``1(``0,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serialize an object into a JSON string.
            </summary>
            <typeparam name="T"> The type of the object to serialize. </typeparam>
            <param name="item"> The object to serialize. </param>
            <param name="indented"> The flag to determine if the JSON should be indented or not. Default value is false. </param>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="ignoreNullValues"> True to ignore members that are null else include them. </param>
            <param name="ignoreReadOnly"> True to ignore members that are read only. </param>
            <param name="ignoreVirtuals"> Flag to ignore virtual members. Default value is false. </param>
            <param name="convertEnumsToString"> True to convert enumerations to strings value instead. </param>
            <returns> The JSON string of the serialized object. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.Unwrap``2(``0,System.Action{``1})">
            <summary>
            Unwraps a sync entity and disconnects it from the Entity Framework context. Check the value to see if the
            IUnwrappable interface is implemented. If so the value's implementation is used instead.
            The default behavior is to ignore read only and virtual properties.
            </summary>
            <typeparam name="T"> The type of the incoming object. </typeparam>
            <typeparam name="T2"> The type of the outgoing object. </typeparam>
            <param name="value"> The value to unwrap from the proxy. </param>
            <param name="update"> An optional update method. </param>
            <returns> The disconnected entity. </returns>
        </member>
        <member name="M:Speedy.Serialization.Serializer.Unwrap(System.Object,System.Type)">
            <summary>
            Unwraps a sync entity and disconnects it from the Entity Framework context.
            </summary>
            <param name="value"> The value to unwrap from the proxy. </param>
            <param name="type"> The type of the outgoing object. </param>
            <returns> The disconnected entity. </returns>
        </member>
        <member name="T:Speedy.Serialization.SerializerSettings">
            <summary>
            Represents serialization settings
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.#ctor">
            <summary>
            Instantiates a set of settings for the serializer.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Instantiates a set of settings for the serializer.
            </summary>
            <param name="indented"> The flag to determine if the JSON should be indented or not. Default value is false. </param>
            <param name="camelCase"> The flag to determine if we should use camel case or not. Default value is false. </param>
            <param name="ignoreNullValues"> The flag to determine to ignore members that are null else include them. </param>
            <param name="ignoreReadOnly"> The flag to determine to ignore members that are readonly else include them. </param>
            <param name="ignoreVirtuals"> The flag to determine to ignore members that are virtual members else include them. </param>
            <param name="convertEnumsToString"> The flag to determine convert enums to string rather than number. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Instantiates a set of settings for the serializer.
            </summary>
            <param name="settings"> The initial settings. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.#cctor">
            <summary>
            Defaults are set to the initial default state of the class.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.CamelCase">
            <summary>
            The flag to determine if we should use camel case or not.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.ConvertEnumsToString">
            <summary>
            The flag to determine convert enums to string rather than number.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.DefaultSettings">
            <summary>
            Represents default values to set when <see cref="M:Speedy.Serialization.SerializerSettings.Reset" /> is invoked.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.IgnoreNullValues">
            <summary>
            The flag to determine to ignore members that are null else include them.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.IgnoreReadOnly">
            <summary>
            The flag to determine to ignore members that are readonly else include them.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.IgnoreVirtuals">
            <summary>
            The flag to determine to ignore members that are virtual members else include them.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.Indented">
            <summary>
            The flag to determine if the JSON should be indented or not.
            </summary>
        </member>
        <member name="P:Speedy.Serialization.SerializerSettings.JsonSettings">
            <summary>
            The JSON setting for Newtonsoft.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.Ignore(System.Type,System.String[])">
            <summary>
            Explicitly ignore the given property(s) for the given type
            </summary>
            <param name="type"> The type to ignore some properties on. </param>
            <param name="propertyNames"> One or more properties to ignore. Leave empty to ignore the type entirely. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.Ignore(System.String[])">
            <summary>
            Explicitly ignore the given property(s) for all types
            </summary>
            <param name="propertyNames"> One or more properties to ignore. Leave empty to ignore the type entirely. </param>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.Reset">
            <summary>
            Reset the state of shared settings
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.ResetDefaultSettings">
            <summary>
            Reset the DefaultSettings back to default settings.
            </summary>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateWith(Speedy.Serialization.SerializerSettings,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateWith(System.Object,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateJsonSerializerSettings">
            <summary>
            Get the JSON serialization settings.
            </summary>
            <returns> The serialization settings. </returns>
        </member>
        <member name="M:Speedy.Serialization.SerializerSettings.UpdateWithJsonSerializerSettings">
            <summary>
            Get the JSON serialization settings.
            </summary>
        </member>
        <member name="T:Speedy.ShortGuid">
            <summary>
            Represents a globally unique identifier (GUID) with a shorter string value.
            </summary>
        </member>
        <member name="F:Speedy.ShortGuid.Empty">
            <summary>
            A read-only instance of the ShortGuid class whose value
            is guaranteed to be all zeroes.
            </summary>
        </member>
        <member name="M:Speedy.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string.
            </summary>
            <param name="value">
            The encoded guid as a base64 string.
            </param>
        </member>
        <member name="M:Speedy.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid.
            </summary>
            <param name="guid"> The Guid to encode. </param>
        </member>
        <member name="P:Speedy.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid.
            </summary>
        </member>
        <member name="P:Speedy.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string.
            </summary>
        </member>
        <member name="M:Speedy.ShortGuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified Object represent the same type and value.
            </summary>
            <param name="obj"> The object to compare. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.NewGuid">
            <summary>
            Initializes a new instance of the ShortGuid class.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.ParseGuid(System.String)">
            <summary>
            Creates a new short Guid from the provided full Guid.
            </summary>
            <param name="guid"> The guid to be parsed. </param>
            <returns> The short guid version of the full guid. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.ParseShortGuid(System.String)">
            <summary>
            Creates a new short Guid from the provided short Guid string.
            </summary>
            <param name="sguid"> The short guid string to be parsed. </param>
            <returns> The short guid version of the short guid string. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Equality(Speedy.ShortGuid,Speedy.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying.
            Guid value.
            </summary>
            <param name="x"> The guid to be tested. </param>
            <param name="y"> The guid to be tested against. </param>
            <returns> Returns true if the values match or otherwise false if they do not match. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(Speedy.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivalent
            </summary>
            <param name="shortGuid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(Speedy.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivalent
            </summary>
            <param name="shortGuid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(System.String)~Speedy.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Implicit(System.Guid)~Speedy.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid
            </summary>
            <param name="guid"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.op_Inequality(Speedy.ShortGuid,Speedy.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the
            same underlying Guid value.
            </summary>
            <param name="x"> The guid to be tested. </param>
            <param name="y"> The guid to be tested against. </param>
            <returns> Returns true if the values do not match or otherwise false if they do match. </returns>
        </member>
        <member name="M:Speedy.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Speedy.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string.
            </summary>
            <param name="value"> The base64 encoded string of a Guid. </param>
            <returns> A new Guid </returns>
        </member>
        <member name="M:Speedy.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22.
            characters long.
            </summary>
            <param name="guid"> The Guid to encode. </param>
            <returns> </returns>
        </member>
        <member name="T:Speedy.Storage.CollectionChangeTracker">
            <summary>
            Simple collection tracker to help with collection changed notification.
            </summary>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.#ctor">
            <summary>
            Instantiates an instance of the collection change tracker.
            </summary>
        </member>
        <member name="P:Speedy.Storage.CollectionChangeTracker.Added">
            <summary>
            The items added during this collection update.
            </summary>
        </member>
        <member name="P:Speedy.Storage.CollectionChangeTracker.Removed">
            <summary>
            The items remove during this collection update.
            </summary>
        </member>
        <member name="P:Speedy.Storage.CollectionChangeTracker.Updated">
            <summary>
            The items updated during this collection update.
            </summary>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddAddedEntity``1(``0)">
            <summary>
            Add an item that was added during the collection update.
            </summary>
            <typeparam name="T"> The type of the item. </typeparam>
            <param name="item"> The item that was added. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddAddedEntity(System.Collections.IList)">
            <summary>
            Add a list of items that was added during the collection update.
            </summary>
            <param name="list"> The list of items that was added. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddRemovedEntity``1(``0)">
            <summary>
            Add an item that was removed during the collection update.
            </summary>
            <typeparam name="T"> The type of the item. </typeparam>
            <param name="item"> The item that was removed. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.AddUpdatedEntity``1(``0)">
            <summary>
            Add an item that was update during the collection update.
            </summary>
            <typeparam name="T"> The type of the item. </typeparam>
            <param name="item"> The item that was update. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.Remove(System.Collections.IList)">
            <summary>
            Add a list of items that was removed during the collection update.
            </summary>
            <param name="list"> The list of items that was removed. </param>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.Reset">
            <summary>
            Reset the tracking session.
            </summary>
        </member>
        <member name="M:Speedy.Storage.CollectionChangeTracker.Update(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Update the tracker with a change event.
            </summary>
            <param name="args"> The arguments to update with. </param>
        </member>
        <member name="M:Speedy.Storage.EntityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Speedy.Storage.EntityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj"> The <see cref="T:System.Object" /> for which a hash code is to be returned. </param>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj" /> is a reference type and
            <paramref name="obj" /> is null.
            </exception>
        </member>
        <member name="T:Speedy.Storage.IDatabaseRepository">
            <summary>
            This class is an internal class.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.AssignKey(Speedy.IEntity,System.Collections.Generic.List{Speedy.IEntity})">
            <summary>
            Assign primary keys to the entity.
            </summary>
            <param name="item"> The entity to assign a key to. </param>
            <param name="processed"> The list of entities that have already been processed. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.AssignKeys(System.Collections.Generic.List{Speedy.IEntity})">
            <summary>
            Assign primary keys to all entities.
            </summary>
            <param name="processed"> The list of entities that have already been processed. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.DiscardChanges">
            <summary>
            Discard all changes made in this repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.HasChanges">
            <summary>
            Determines if the repository has changes.
            </summary>
            <returns> True if there are changes and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.HasDependentRelationship(System.Object[],System.Object)">
            <summary>
            Check too see if there are other entities that depends on this entity.
            </summary>
            <param name="value"> The values to check. </param>
            <param name="id"> The ID of the entity. </param>
            <returns> True if the entity exist and false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.Read(System.Object)">
            <summary>
            Reads an object from the repository.
            </summary>
            <param name="id"> The ID of the item to read. </param>
            <returns> The object from the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.RemoveDependent(System.Object[],System.Object)">
            <summary>
            Remove the dependencies for the entity.
            </summary>
            <param name="value"> The values to check. </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.SaveChanges">
            <summary>
            Save the data to the data store.
            </summary>
            <returns> The number of items saved. </returns>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.SetDependentToNull(System.Object[],System.Object)">
            <summary>
            Set the foreign key values for this dependent to null.
            </summary>
            <param name="value"> The values for processing. </param>
            <param name="id"> The ID of the entity. </param>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.Sort">
            <summary>
            Sorts the repository by the primary key.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.UpdateRelationships">
            <summary>
            Updates the relationships for this entity.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IDatabaseRepository.ValidateEntities">
            <summary>
            Validates all entities in the repository.
            </summary>
        </member>
        <member name="T:Speedy.Storage.IUpdatable`1">
            <summary>
            Represents an updatable item
            </summary>
        </member>
        <member name="M:Speedy.Storage.IUpdatable`1.UpdateWith(`0,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="exclusions"> The properties will not be set during update. </param>
        </member>
        <member name="T:Speedy.Storage.IUpdatable">
            <summary>
            Represents an updatable item
            </summary>
        </member>
        <member name="M:Speedy.Storage.IUpdatable.UpdateWith(System.Object,System.String[])">
            <summary>
            Allows updating of one type to another based on member Name and Type.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="exclusions"> The properties will not be set during update. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.IKeyValueRepository`1">
            <summary>
            Represents a repository of key value pairs.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.IKeyValueRepository`1.Count">
            <summary>
            The number of items in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.IKeyValueRepository`1.Name">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Archive">
            <summary>
            Archives the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Clear">
            <summary>
            Clears the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Delete">
            <summary>
            Delete the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Flush">
            <summary>
            Flushes all cached items to storage.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Load(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Loads items directly into the repository. This will not check the keys so we can
            speed up the loading of items. If you need key protection then use Write instead.
            </summary>
            <param name="items"> The items to load into the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read">
            <summary>
            Read the repository using an enumerator.
            </summary>
            <returns> The list of key value pairs to enumerate. </returns>
            <remarks>
            Must be IEnumerable so we can yield the return.
            </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read(System.String)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <returns> The value for the key. </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Could not find the entry with the key. </exception>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="keys"> The keys of the items to read. </param>
            <returns> The value for the keys. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="condition"> The condition to test each key against. </param>
            <returns> The value for the keys that match the condition. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.ReadKeys">
            <summary>
            Read all the keys from the repository.
            </summary>
            <returns> The keys for the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Remove(System.String)">
            <summary>
            Removes an item from the repository by the key provided.
            </summary>
            <param name="key"> The key of the item to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Remove(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Removes items from the repository by the keys provided.
            </summary>
            <param name="keys"> The keys of the items to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Save">
            <summary>
            Save the changes to the repository (Writes, Removes, etc).
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.TryRead(System.String,`0@)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <param name="value"> The value read. </param>
            <returns> True if the key was found or false if otherwise.. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.String,`0)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.String,System.String)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="E:Speedy.Storage.KeyValue.IKeyValueRepository`1.OnEnumerated">
            <summary>
            Event for when an item is enumerated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1">
            <summary>
            Represents provider for a repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.ArchiveRepository(System.String)">
            <summary>
            Archive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to archive. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.AvailableRepositories(System.String[])">
            <summary>
            Gets a list of names for available repositories.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> A list of repository names that are available to access. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.DeleteRepository(System.String)">
            <summary>
            Delete a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to delete. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.OpenAvailableRepository(System.String[])">
            <summary>
            Gets the first available repository that is not currently open.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> The repository that was opened or null if none available. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.OpenRepository(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Gets a repository by the provided name. If the repository cannot be found a new one is created and returned.
            </summary>
            <param name="name"> The name of the repository to get. </param>
            <param name="options"> The options for the repository. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.IKeyValueRepositoryProvider`1.UnarchiveRepository(System.String)">
            <summary>
            Unarchive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to unarchive. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepository">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository.#ctor(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.#ctor(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Count">
            <summary>
            The number of items in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Name">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Archive">
            <summary>
            Archives the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Clear">
            <summary>
            Clears the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Delete">
            <summary>
            Delete the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Flush">
            <summary>
            Flushes all cached items to storage.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Load(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Loads items directly into the repository. This will not check the keys so we can
            speed up the loading of items.
            </summary>
            <param name="items"> The items to load into the repository. </param>
            <remarks> Will not be cached. These items will be written directly to disk. </remarks>
            <remarks> If you need key protection then use Write instead. </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read">
            <summary>
            Read the repository using an enumerator.
            </summary>
            <returns> The list of key value pairs to enumerate. </returns>
            <remarks>
            Must be IEnumerable so we can yield the return.
            </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read(System.String)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <returns> The value for the key. </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Could not find the entry with the key. </exception>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="keys"> The keys of the items to read. </param>
            <returns> The value for the keys. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="condition"> The condition to test each key against. </param>
            <returns> The value for the keys that match the condition. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.ReadKeys">
            <summary>
            Read all the keys from the repository.
            </summary>
            <returns> The keys for the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Remove(System.String)">
            <summary>
            Removes an item from the repository by the key provided.
            </summary>
            <param name="key"> The key of the item to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Remove(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Removes items from the repository by the keys provided.
            </summary>
            <param name="keys"> The keys of the items to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Save">
            <summary>
            Save the changes to the repository (Loads, Writes, Removes, etc).
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.TryRead(System.String,`0@)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <param name="value"> The value read. </param>
            <returns> True if the key was found or false if otherwise.. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.String,`0)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.String,System.String)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Write(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the repository.
            </summary>
            <param name="disposing"> True to dispose managed objects. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.GetCount">
            <summary>
            Gets the count if items in the repository.
            </summary>
            <returns> The number of items in the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.UpdateCache">
            <summary>
            Updates the cache with the changes.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Archived">
            <summary>
            Will be called on archive request.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.Deleted">
            <summary>
            Will be called on deletion request.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueMemoryRepository`1.OnEnumerated">
            <summary>
            Will be called on each item when this repository is enumerated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider.#ctor(System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.#ctor(System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.ArchivedRepositories">
            <summary>
            A list of the repositories that have been archived.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.Limit">
            <summary>
            Gets the maximum limit of items to be cached in memory.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.OpenedRepositories">
            <summary>
            A list of the repositories that have been opened.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.Timeout">
            <summary>
            Gets the amount of time to cache items in memory before persisting to disk.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.ArchiveRepository(System.String)">
            <summary>
            Archive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to archive. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.AvailableRepositories(System.String[])">
            <summary>
            Gets a list of names for available repositories.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> A list of repository names that are available to access. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.DeleteRepository(System.String)">
            <summary>
            Delete a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to delete. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.OpenAvailableRepository(System.String[])">
            <summary>
            Gets the first available repository that is not currently open.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> The repository that was opened or null if none available. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.OpenRepository(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Gets a repository by the provided name. If the repository cannot be found a new one is created and returned.
            </summary>
            <param name="name"> The name of the repository to get. </param>
            <param name="options"> The options for the repository. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueMemoryRepositoryProvider`1.UnarchiveRepository(System.String)">
            <summary>
            Unarchive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to unarchive. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepository">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository.#ctor(System.String,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository.#ctor(System.String,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepository`1">
            <summary>
            Represents a memory / file repository of key value pairs.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.#ctor(System.String,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.#ctor(System.String,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.#ctor(System.IO.DirectoryInfo,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.Count">
            <summary>
            The number of items in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.DirectoryInfo">
            <summary>
            The directory the repository will be located.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.Name">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.FileInfo">
            <summary>
            Gets the file info of the repository file.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepository`1.TempFileInfo">
            <summary>
            Gets the full path to the temporary repository file.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Archive">
            <summary>
            Archives the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Clear">
            <summary>
            Clears the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Create(System.IO.DirectoryInfo,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Create(System.String,System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Create(System.String,System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Instantiates an instance of the Repository class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="name"> The name of the repository. </param>
            <param name="options"> The options for the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Delete">
            <summary>
            Delete the repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Flush">
            <summary>
            Flushes all cached items to storage.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Load(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Loads items directly into the repository. This will not check the keys so we can
            speed up the loading of items.
            </summary>
            <param name="items"> The items to load into the repository. </param>
            <remarks> Will not be cached. These items will be written directly to disk. </remarks>
            <remarks> If you need key protection then use Write instead. </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read">
            <summary>
            Read the repository using an enumerator.
            </summary>
            <returns> The list of key value pairs to enumerate. </returns>
            <remarks>
            Must be IEnumerable so we can yield the return.
            </remarks>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read(System.String)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <returns> The value for the key. </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"> Could not find the entry with the key. </exception>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="keys"> The keys of the items to read. </param>
            <returns> The value for the keys. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Read(System.Func{System.String,System.Boolean})">
            <summary>
            Reads a set of items from the repository based on the keys provided.
            </summary>
            <param name="condition"> The condition to test each key against. </param>
            <returns> The value for the keys that match the condition. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.ReadKeys">
            <summary>
            Read all the keys from the repository.
            </summary>
            <returns> The keys for the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Refresh">
            <summary>
            Reads items from disk into the cache. This will not check the keys so we can speed up the loading of items.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Remove(System.String)">
            <summary>
            Removes an item from the repository by the key provided.
            </summary>
            <param name="key"> The key of the item to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Remove(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Removes items from the repository by the keys provided.
            </summary>
            <param name="keys"> The keys of the items to remove. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Save">
            <summary>
            Save the changes to the repository (Loads, Writes, Removes, etc).
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.TryRead(System.String,`0@)">
            <summary>
            Read an item from the repository based on the key provided.
            </summary>
            <param name="key"> The key of the item to read. </param>
            <param name="value"> The value read. </param>
            <returns> True if the key was found or false if otherwise.. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.String,`0)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.String,System.String)">
            <summary>
            Writes an item to the repository.
            </summary>
            <param name="key"> The key of the item to write. </param>
            <param name="value"> The value of the item to write. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Write(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes a collection of items to the repository.
            </summary>
            <param name="items"> The list of items to add to the repository. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the repository.
            </summary>
            <param name="disposing"> True to dispose managed objects. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.GetCount">
            <summary>
            Gets the count if items in the repository.
            </summary>
            <returns> The number of items in the repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.Initialize">
            <summary>
            Initializes the path the repository is to be located.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.SaveRepository(System.DateTime)">
            <summary>
            Saves items to the repository. Including items over the cache limit and any that have expired due to the cache timeout.
            </summary>
            <param name="threshold"> The date time threshold that was calculated from the cache timeout. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepository`1.UpdateCache">
            <summary>
            Updates the cache with the changes.
            </summary>
        </member>
        <member name="E:Speedy.Storage.KeyValue.KeyValueRepository`1.OnEnumerated">
            <summary>
            Will be called on each item when this repository is enumerated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepositoryOptions">
            <summary>
            Options for a key value repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.IgnoreVirtualMembers">
            <summary>
            Gets or sets a flag to ignore virtual members when saving entities.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.Limit">
            <summary>
            Gets or sets the caching limit.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.ReadOnly">
            <summary>
            Gets or sets the flag to determine if this repository is read only.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryOptions.Timeout">
            <summary>
            Gets or sets the maximum time to cache items.
            </summary>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepositoryProvider">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider.#ctor(System.IO.DirectoryInfo,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="T:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1">
            <summary>
            A provider for the memory / file repository.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.#ctor(System.String,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directory"> The directory where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.#ctor(System.IO.DirectoryInfo,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Instantiates an instance of the Repository provider class.
            </summary>
            <param name="directoryInfo"> The directory info where the repository will reside. </param>
            <param name="timeout">
            The amount of time to cache items in memory before persisting to disk. Defaults to null and then
            TimeSpan.Zero is used.
            </param>
            <param name="limit"> The maximum limit of items to be cached in memory. Defaults to a limit of 0. </param>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.Directory">
            <summary>
            Gets the directory where the repository will reside.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.Limit">
            <summary>
            Gets the maximum limit of items to be cached in memory.
            </summary>
        </member>
        <member name="P:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.Timeout">
            <summary>
            Gets the amount of time to cache items in memory before persisting to disk.
            </summary>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.ArchiveRepository(System.String)">
            <summary>
            Archive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to archive. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.AvailableRepositories(System.String[])">
            <summary>
            Gets a list of names for available repositories.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> A list of repository names that are available to access. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.DeleteRepository(System.String)">
            <summary>
            Delete a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to delete. </param>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.OpenAvailableRepository(System.String[])">
            <summary>
            Gets the first available repository that is not currently open.
            </summary>
            <param name="excluding"> The optional repositories to exclude. </param>
            <returns> The repository that was opened or null if none available. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.OpenRepository(System.String,Speedy.Storage.KeyValue.KeyValueRepositoryOptions)">
            <summary>
            Gets a repository by the provided name. If the repository cannot be found a new one is created and returned.
            </summary>
            <param name="name"> The name of the repository to get. </param>
            <param name="options"> The options for the repository. </param>
            <returns> The repository. </returns>
        </member>
        <member name="M:Speedy.Storage.KeyValue.KeyValueRepositoryProvider`1.UnarchiveRepository(System.String)">
            <summary>
            Unarchive a repository by the provided name.
            </summary>
            <param name="name"> The name of the repository to unarchive. </param>
        </member>
        <member name="T:Speedy.Storage.MemoryCache">
            <summary>
            Represent a memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.#ctor">
            <summary>
            Instantiates a memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.#ctor(System.TimeSpan)">
            <summary>
            Instantiates a memory cache.
            </summary>
            <param name="defaultTimeout"> The default timeout of new entries. </param>
        </member>
        <member name="P:Speedy.Storage.MemoryCache.IsEmpty">
            <summary>
            Indicates whether or not the memory cache is empty.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCache.SlidingExpiration">
            <summary>
            Determines if the expiration time should be extended when read from the cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Clear">
            <summary>
            Clear the memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Remove(System.String)">
            <summary>
            Remove an entry by the key name.
            </summary>
            <param name="key"> The name of the key. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Remove(Speedy.Storage.MemoryCacheItem)">
            <summary>
            Remove the entry from the cache.
            </summary>
            <param name="memoryCacheItem"> The item to remove from the cache. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Set(System.String,System.Object)">
            <summary>
            Set a new entry. This will add a new entry or update an existing one.
            </summary>
            <param name="key"> The key of the entry. </param>
            <param name="value"> The value of the entry. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Set a new entry with a custom timeout. This will add a new entry or update an existing one.
            </summary>
            <param name="key"> The key of the entry. </param>
            <param name="value"> The value of the entry. </param>
            <param name="timeout"> The custom timeout of the entry. </param>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.TryGet(System.String,Speedy.Storage.MemoryCacheItem@)">
            <summary>
            Try to get an entry from the cache.
            </summary>
            <param name="key"> The key of the entry. </param>
            <param name="value"> The entry that was found or otherwise null. </param>
            <returns> True if the entry was found or otherwise false. </returns>
        </member>
        <member name="M:Speedy.Storage.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Storage.MemoryCacheItem">
            <summary>
            Represents an item for a memory cache.
            </summary>
        </member>
        <member name="M:Speedy.Storage.MemoryCacheItem.#ctor(System.String,System.Object,System.TimeSpan)">
            <summary>
            Instantiates a memory cache item.
            </summary>
            <param name="key"> The key of the item. </param>
            <param name="value"> The value of the item. </param>
            <param name="timeout"> The timeout of the item. </param>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.CreatedOn">
            <summary>
            The date and time the cached item was created.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.ExpirationDate">
            <summary>
            The date and time the item will expire.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.HasExpired">
            <summary>
            Indicates if the item has expired.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.Key">
            <summary>
            The key of the item.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.LastAccessed">
            <summary>
            The last time the item was accessed.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.Timeout">
            <summary>
            The timeout value of the item.
            </summary>
        </member>
        <member name="P:Speedy.Storage.MemoryCacheItem.Value">
            <summary>
            The value of the item.
            </summary>
        </member>
        <member name="T:Speedy.Storage.IRelationshipRepository">
            <summary>
            This collection representing a list of entities for a relationship.
            </summary>
        </member>
        <member name="M:Speedy.Storage.IRelationshipRepository.UpdateRelationships">
            <summary>
            Updates the relationship for all entities in this list.
            </summary>
        </member>
        <member name="T:Speedy.Storage.RelationshipRepository`2">
            <summary>
            This collection representing a list of entities for a relationship.
            </summary>
            <typeparam name="T"> The type for the relationship. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="P:Speedy.Storage.RelationshipRepository`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Speedy.Storage.RelationshipRepository`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.AddOrUpdate(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise,
            false.
            </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
            from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based
            indexing.
            </param>
            <param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="array" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="arrayIndex" /> is less than 0. </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source
            <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
            <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.UpdateRelationships">
            <summary>
            Updates the relationship for all entities in this list.
            </summary>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.GetEnumerable">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Speedy.Storage.RelationshipRepository`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Speedy.Storage.Repository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type contained in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.Storage.Repository`2.#ctor(Speedy.Database)">
            <summary>
            Instantiates a repository for the provided database.
            </summary>
            <param name="database"> The database this repository is for. </param>
        </member>
        <member name="P:Speedy.Storage.Repository`2.NeverClearCache">
            <summary>
            Will keep the repository items in cache for the life cycle of the repository.
            </summary>
        </member>
        <member name="P:Speedy.Storage.Repository`2.Database">
            <summary>
            The database this repository is for.
            </summary>
        </member>
        <member name="P:Speedy.Storage.Repository`2.System#Linq#IQueryable#ElementType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.Repository`2.System#Linq#IQueryable#Expression">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.Repository`2.System#Linq#IQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.AddOrUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.AddOrUpdate(System.Object)">
            <summary>
            Adds or updates an entity in the repository. The ID of the entity must be the default value to add and a value to
            update.
            </summary>
            <param name="entity"> The entity to be added. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.AssignKey(Speedy.IEntity,System.Collections.Generic.List{Speedy.IEntity})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.AssignKeys(System.Collections.Generic.List{Speedy.IEntity})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAdd(`0[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAdd(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAddOrUpdate(`0[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkAddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkRemove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.BulkUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Contains(`0)">
            <summary>
            Check to see if the repository contains this entity.
            </summary>
            <param name="entity"> The entity to test for. </param>
            <returns> True if the entity exist or false it otherwise. </returns>
        </member>
        <member name="M:Speedy.Storage.Repository`2.DiscardChanges">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.GetRawQueryable(System.Func{`0,System.Boolean})">
            <summary>
            Returns a raw queryable.
            </summary>
            <param name="filter"> </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Storage.Repository`2.HasChanges">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.HasDependentRelationship(System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Including(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.InsertBefore(`0,`0)">
            <summary>
            Insert an entity to the repository before the provided entity. The ID of the entity must be the default value.
            </summary>
            <param name="entity"> The entity to be added. </param>
            <param name="targetEntity"> The entity to locate insert point. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.Read(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Read(`1)">
            <summary>
            Get entity by ID.
            </summary>
            <param name="id"> </param>
            <returns> The entity or null. </returns>
        </member>
        <member name="M:Speedy.Storage.Repository`2.Remove(`1)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.RemoveDependent(System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.SaveChanges">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.SetDependentToNull(System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Sort">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.Sort(System.Func{`0,System.Object})">
            <summary>
            Sorts the repository by the provide key.
            </summary>
        </member>
        <member name="M:Speedy.Storage.Repository`2.UpdateRelationships">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.ValidateEntities">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnAddingEntity(`0)">
            <summary>
            Occurs when an entity is being deleted.
            </summary>
            <param name="obj"> The entity that was deleted. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnDeletingEntity(`0)">
            <summary>
            Occurs when an entity is being deleted.
            </summary>
            <param name="obj"> The entity that was deleted. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnUpdateEntityRelationships(`0)">
            <summary>
            Occurs when an entity relationships are updated.
            </summary>
            <param name="obj"> The entity that was updated. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.OnValidateEntity(`0)">
            <summary>
            Occurs when an entity is validated.
            </summary>
            <param name="obj"> The entity that was validated. </param>
        </member>
        <member name="M:Speedy.Storage.Repository`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.Repository`2.UpdateEntity(Speedy.Entity{`1},Speedy.Entity{`1})">
            <summary>
            Update the entity with the new values.
            </summary>
            <param name="entity"> The entity to update. </param>
            <param name="updatedEntity"> The new values to update the entity with. </param>
        </member>
        <member name="E:Speedy.Storage.Repository`2.AddingEntity">
            <summary>
            Occurs when an entity is being added.
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="E:Speedy.Storage.Repository`2.DeletingEntity">
            <summary>
            Occurs when an entity is being deleted.
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.UpdateEntityRelationships">
            <summary>
            Occurs when an entity relationships are updated.
            </summary>
        </member>
        <member name="E:Speedy.Storage.Repository`2.ValidateEntity">
            <summary>
            Occurs when an entity is being validated.
            </summary>
        </member>
        <member name="T:Speedy.Storage.SyncableRepository`2">
            <summary>
            Represents a collection of entities for a Speedy database.
            </summary>
            <typeparam name="T"> The type contained in the repository. </typeparam>
            <typeparam name="T2"> The type of the entity key. </typeparam>
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.#ctor(Speedy.Database)">
            <summary>
            Instantiates a syncable repository for the provided database.
            </summary>
            <param name="database"> The database this repository is for. </param>
        </member>
        <member name="P:Speedy.Storage.SyncableRepository`2.RealType">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Storage.SyncableRepository`2.TypeName">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Add(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.GetChangeCount(System.DateTime,System.DateTime,Speedy.Sync.SyncRepositoryFilter)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.GetChanges(System.DateTime,System.DateTime,System.Int32,System.Int32,Speedy.Sync.SyncRepositoryFilter)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.ReadAllKeys">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Remove(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Speedy#ISyncableRepository#Read(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Storage.SyncableRepository`2.Speedy#ISyncableRepository#Read(Speedy.Sync.ISyncEntity,Speedy.Sync.SyncRepositoryFilter)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Storage.SyncKeyComparer">
            <inheritdocs />
        </member>
        <member name="M:Speedy.Storage.SyncKeyComparer.#ctor">
            <summary>
            Instantiates an instance of the natural comparer.
            </summary>
        </member>
        <member name="M:Speedy.Storage.SyncKeyComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Instantiates an instance of the natural comparer.
            </summary>
            <param name="cultureInfo"> </param>
        </member>
        <member name="M:Speedy.Storage.SyncKeyComparer.Compare(System.String,System.String)">
            <inheritdocs />
        </member>
        <member name="T:Speedy.Streams.NoCloseStreamReader">
            <summary>
            Encapsulates a stream reader which does not close the underlying stream.
            </summary>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new stream reader object.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
            <param name="encoding"> The encoding for the stream. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new stream reader object using default encoding.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamReader.Dispose(System.Boolean)">
            <summary>
            Disposes of the stream reader.
            </summary>
            <param name="disposing"> True to dispose managed objects. </param>
        </member>
        <member name="T:Speedy.Streams.NoCloseStreamWriter">
            <summary>
            Encapsulates a stream writer which does not close the underlying stream.
            </summary>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new stream writer object.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
            <param name="encoding"> The encoding for the stream. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new stream writer object using default encoding.
            </summary>
            <param name="stream"> The underlying stream to write to. </param>
        </member>
        <member name="M:Speedy.Streams.NoCloseStreamWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of the stream writer.
            </summary>
            <param name="disposing"> True to dispose managed objects. </param>
        </member>
        <member name="T:Speedy.Sync.ISyncClient">
            <summary>
            Represents a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.DatabaseProvider">
            <summary>
            The database provider to use during a sync session.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.IncomingConverter">
            <summary>
            An optional converter to process sync objects from Server to Client
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Name">
            <summary>
            Gets or sets the name of the sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Options">
            <summary>
            The options for the sync client
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.OutgoingConverter">
            <summary>
            An optional converter to process sync objects from Client to Server
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Profiler">
            <summary>
            Profiler for tracking specific points during sync client processing.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.Statistics">
            <summary>
            The communication statistics for this sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.SyncOptions">
            <summary>
            The options for the sync
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncClient.SyncSession">
            <summary>
            The active sync session. Will be null when a session is not started.
            </summary>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.GetDatabase">
            <summary>
            Gets an instance of the database this sync client is for.
            </summary>
            <returns> The database that is syncable. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncClient.GetDatabase``1">
            <summary>
            Gets an instance of the database this sync client is for.
            </summary>
            <returns> The database that is syncable. </returns>
        </member>
        <member name="T:Speedy.Sync.ISyncEntity">
            <summary>
            Represent an entity that can be synced.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncEntity.IsDeleted">
            <summary>
            Used to communicate if the sync entity is deleted.
            </summary>
        </member>
        <member name="P:Speedy.Sync.ISyncEntity.SyncId">
            <summary>
            The ID of the sync entity.
            </summary>
            <remarks>
            This ID is should be globally unique. Never reuse GUIDs.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.GetEntityId">
            <summary>
            Gets the primary key (ID) of the sync entity.
            </summary>
            <returns> The primary key value for the sync entity. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.GetEntitySyncId">
            <summary>
            Gets the sync key (ID) of the sync entity. Defaults to SyncId.
            This can be overriden by setting the LookupFilter for a sync repository filter.
            </summary>
            <returns> The sync key value for the sync entity. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.IsPropertyExcludedForIncomingSync(System.String)">
            <summary>
            Checks a property to see if it can be synced in incoming data.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property can be update during sync or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.IsPropertyExcludedForOutgoingSync(System.String)">
            <summary>
            Checks a property to see if it can be synced in outgoing data.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property can be update during sync or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.IsPropertyExcludedForSyncUpdate(System.String)">
            <summary>
            Checks a property has been excluded from updating.
            </summary>
            <param name="propertyName"> The property name to be tested. </param>
            <returns> True if the property can be written during an update or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.ToSyncObject">
            <summary>
            Converts the entity into an object to transmit.
            </summary>
            <returns> The sync object for this entity. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.UpdateLocalSyncIds">
            <summary>
            Update all local sync IDs.
            </summary>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.UpdateWith(Speedy.Sync.ISyncEntity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the entity with the provided entity. Virtual properties will be ignored.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncEntity.UpdateWith(Speedy.Sync.ISyncEntity,System.Boolean,System.String[])">
            <summary>
            Updates the entity with the provided entity.
            </summary>
            <param name="update"> The source of the update. </param>
            <param name="excludeVirtuals"> Exclude virtuals members. </param>
            <param name="exclusions"> The properties will not be set during update. </param>
        </member>
        <member name="T:Speedy.Sync.ISyncServerProxy">
            <summary>
            Represents a server proxy to communicate between a sync client and a sync engine.
            </summary>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <summary>
            Sends changes to a server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="changes"> The changes to write to the server. </param>
            <returns> A list of sync issues if there were any. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <summary>
            Sends issue corrections to a server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="corrections"> The corrections to write to the server. </param>
            <returns> A list of sync issues if there were any. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <summary>
            Starts the sync session.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="options"> The options for the sync session. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.EndSync(System.Guid)">
            <summary>
            Ends the sync session.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <summary>
            Gets the changes from the server.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="request"> The details for the request. </param>
            <returns> The list of changes from the server. </returns>
        </member>
        <member name="M:Speedy.Sync.ISyncServerProxy.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <summary>
            Gets the list of sync objects to try and resolve the issue list.
            </summary>
            <param name="sessionId"> The ID of the sync session. </param>
            <param name="issues"> The issues to process. </param>
            <returns> The sync objects to resolve the issues. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncableDatabaseProvider`1">
            <summary>
            Represents a sync database provider.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.#ctor(System.Func{Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.ISyncableDatabase},Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.IDispatcher)">
            <summary>
            Instantiates a sync database provider using the provided function.
            </summary>
            <param name="function"> The function to return the syncable database. </param>
            <param name="options"> The options for this database provider. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <param name="dispatcher"> An optional dispatcher to update with. </param>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.BulkProcess(System.Int32,System.Int32,System.Action{System.Int32,`0})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetDatabase">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetDatabase(Speedy.DatabaseOptions)">
            <summary>
            Gets an instance of the database.
            </summary>
            <returns> The database instance. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetSyncableDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.Speedy#IDatabaseProvider{T}#GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider`1.Speedy#IDatabaseProvider{T}#GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncableDatabaseProvider">
            <summary>
            Represents a sync database provider.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.#ctor(System.Func{Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.ISyncableDatabase},Speedy.DatabaseOptions,Speedy.DatabaseKeyCache,Speedy.IDispatcher)">
            <summary>
            Instantiates a sync database provider using the provided function.
            </summary>
            <param name="function"> The function to return the syncable database. </param>
            <param name="options"> The options for this database provider. </param>
            <param name="keyCache"> An optional key manager for managing entity IDs (primary and sync). </param>
            <param name="dispatcher"> An optional dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Sync.SyncableDatabaseProvider.KeyCache">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncableDatabaseProvider.Options">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetDatabase(Speedy.DatabaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetSyncableDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetSyncableDatabase(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncableDatabaseProvider.GetSyncableDatabaseFromProvider(Speedy.DatabaseOptions,Speedy.DatabaseKeyCache)">
            <summary>
            Gets an instance of the database from the provider.
            </summary>
            <param name="options"> The database options to use for the new database instance. </param>
            <param name="keyCache"> An optional key manager for tracking entity IDs (primary and sync). </param>
            <returns> The database instance. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncClient">
            <summary>
            Represents a sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClient.#ctor(System.String,Speedy.ISyncableDatabaseProvider)">
            <summary>
            Instantiates a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClient.DatabaseProvider">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.IncomingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Name">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Options">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.OutgoingConverter">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Profiler">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.Statistics">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.SyncOptions">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncClient.SyncSession">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.ApplyChanges(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.ApplyCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncObject})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.BeginSync(System.Guid,Speedy.Sync.SyncOptions)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.EndSync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetCorrections(System.Guid,Speedy.Net.ServiceRequest{Speedy.Sync.SyncIssue})">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetDatabase">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.GetDatabase``1">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClient.ValidateSession(System.Guid)">
            <summary>
            Validates the sync session. The SyncSession will be set on BeginSync and cleared on EndSync.
            </summary>
            <param name="sessionId"> </param>
        </member>
        <member name="M:Speedy.Sync.SyncClient.UpdateLocalRelationships(Speedy.Sync.ISyncEntity,Speedy.ISyncableDatabase)">
            <summary>
            Updates the entities local relationships.
            </summary>
            <param name="entity"> The entity to update. </param>
            <param name="database"> The database with the relationship repositories. </param>
            <exception cref="T:Speedy.Exceptions.SyncIssueException"> An exception will all sync issues. </exception>
        </member>
        <member name="T:Speedy.Sync.SyncClientIncomingConverter">
            <summary>
            Represents a sync object input converter for the sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientIncomingConverter.#ctor(Speedy.Sync.SyncObjectIncomingConverter[])">
            <summary>
            Instantiates a sync input converter to be used during syncing.
            </summary>
            <param name="converters"> The converters to process during conversion. </param>
        </member>
        <member name="T:Speedy.Sync.SyncClientOutgoingConverter">
            <summary>
            Represents a sync object output converter for the sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientOutgoingConverter.#ctor(Speedy.Sync.SyncObjectOutgoingConverter[])">
            <summary>
            Instantiates a sync output converter to be used during syncing.
            </summary>
            <param name="converters"> The converters to process during conversion. </param>
        </member>
        <member name="T:Speedy.Sync.SyncClientConverter">
            <summary>
            Represents a sync object converter for the sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObjectConverter})">
            <summary>
            Instantiates a sync converter to be used during syncing.
            </summary>
            <param name="excludePropertiesForIncomingSync"> Allow property exclusion during conversion in incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> Allow property exclusion during conversion in outgoing sync. </param>
            <param name="excludePropertiesForSyncUpdate"> Allow property exclusion during conversion in update. </param>
            <param name="converters"> The converters to process during conversion. </param>
        </member>
        <member name="P:Speedy.Sync.SyncClientConverter.ExcludePropertiesForIncomingSync">
            <summary>
            If true excluded properties will not processed during incoming sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientConverter.ExcludePropertiesForOutgoingSync">
            <summary>
            If true excluded properties will not processed during outgoing sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientConverter.ExcludePropertiesForSyncUpdate">
            <summary>
            If true excluded properties will not be changed during sync updates.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.CanConvert(System.String)">
            <summary>
            Test a sync object name to see if this converter can convert this object.
            </summary>
            <param name="name"> The sync object name to test. </param>
            <returns> True if the sync object can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Convert(System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject})">
            <summary>
            Process the provided request through the converters.
            </summary>
            <param name="collection"> The collection to process. </param>
            <returns> The request with an updated collection. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus)">
            <summary>
            Updates this sync object with another object.
            </summary>
            <param name="source"> The entity with the updates. </param>
            <param name="destination"> The destination sync entity to be updated. </param>
            <param name="status"> The status of the update. </param>
            <returns> Return true if the entity was updated and should be saved. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Convert(Speedy.Sync.SyncObject)">
            <summary>
            Process the provided sync object through the converters.
            </summary>
            <param name="value"> The sync object to process. </param>
            <returns> The process sync object. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncClientConverter.Convert(Speedy.Sync.SyncIssue)">
            <summary>
            Process the provided sync issue through the converters.
            </summary>
            <param name="issue"> The sync issue to process. </param>
            <returns> The process sync issue otherwise null if could not be converted. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncClientOptions">
            <summary>
            Represents the options for a sync client
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientOptions.EnablePrimaryKeyCache">
            <summary>
            Determines if the sync client should cache primary keys for relationships.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientOptions.IsServerClient">
            <summary>
            Indicates this client is the server and should maintain dates, meaning as you save data the CreatedOn, ModifiedOn will
            be updated to the current server time. This should only be set for the "Server" sync client that represents the primary database.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientOptions.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncClientOptions.UpdateWith(Speedy.Sync.SyncClientOptions,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncClientProfiler">
            <summary>
            Profiler for a the sync client
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProfiler.#ctor(System.String)">
            <summary>
            Instantiates a sync client profiler.
            </summary>
            <param name="name"> The name of the sync client the profiler is for. </param>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ApplyChanges">
            <summary>
            The overall processing time for SyncClient.ApplyChanges.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.GetChangeCount">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.GetChangeCount(Speedy.Sync.SyncRequest)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.GetChanges">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.GetChanges(System.Guid,Speedy.Sync.SyncRequest)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObject">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectAdded">
            <summary>
            The "Added" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectDeleted">
            <summary>
            The "Deleted" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectModified">
            <summary>
            The "Modified" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectReadEntity">
            <summary>
            The "ReadEntity" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObject(Speedy.Sync.SyncObject,Speedy.ISyncableDatabase,System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean,System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjects">
            <summary>
            The overall processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectsGetDatabase">
            <summary>
            The "GetDatabase" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectsSaveDatabase">
            <summary>
            The "SaveDatabase" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncClientProfiler.ProcessSyncObjectsSyncObjectsToList">
            <summary>
            The "SyncObjectsToList" portion of processing time for <seealso cref="M:Speedy.Sync.SyncClient.ProcessSyncObjects(Speedy.ISyncableDatabaseProvider,System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject},System.Collections.Generic.ICollection{Speedy.Sync.SyncIssue},System.Boolean)" />.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProfiler.ToString(System.TimeSpan)">
            <summary>
            Converts the profile results into a human readable string.
            </summary>
            <param name="totalTime"> The overall time to process. This is for generating percent value. </param>
            <returns> The human readable string for the profiler results. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncClientProvider">
            <summary>
            Represents a provider to get a sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProvider.#ctor(System.Func{System.String,System.Net.NetworkCredential,Speedy.Sync.ISyncClient})">
            <summary>
            Instantiates a provider to get a sync client.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncClientProvider.GetClient(System.String,System.Net.NetworkCredential)">
            <summary>
            Return a client by the provided name and credential.
            </summary>
            <param name="name"> The name of the client. </param>
            <param name="credential"> The credential for the client. </param>
            <returns> The sync client. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncEngine">
            <summary>
            Represents the sync engine.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.#ctor(Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions,System.Threading.CancellationTokenSource)">
            <summary>
            Instantiate an instance of the sync engine.
            </summary>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
            <param name="source"> An optional cancellation token source. </param>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.#ctor(System.Guid,Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions,System.Threading.CancellationTokenSource)">
            <summary>
            Instantiate an instance of the sync engine.
            </summary>
            <param name="sessionId"> The ID of the session. </param>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
            <param name="source"> An optional cancellation token source. </param>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.CancellationSource">
            <summary>
            An optional cancellation token.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.Options">
            <summary>
            Gets the options for the sync engine.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.Server">
            <summary>
            The server.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.SessionId">
            <summary>
            Gets the unique identifier for this sync session.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.State">
            <summary>
            Current state of the sync engine.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngine.SyncIssues">
            <summary>
            Gets the list of issues that happened during syncing.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Run">
            <summary>
            Start to sync process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Run(Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions,System.Threading.CancellationTokenSource)">
            <summary>
            Instantiate and run an instance of the sync engine.
            </summary>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
            <param name="source"> An optional cancellation token source. </param>
            <returns> A list of issues that occurred during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Run(System.Guid,Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,Speedy.Sync.SyncOptions,System.Threading.CancellationTokenSource)">
            <summary>
            Instantiate and run an instance of the sync engine.
            </summary>
            <param name="sessionId"> The ID of the session. </param>
            <param name="client"> The client to sync from. </param>
            <param name="server"> The server to sync to. </param>
            <param name="options"> The options for the sync engine. </param>
            <param name="source"> An optional cancellation token source. </param>
            <returns> A list of issues that occurred during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.RunAsync">
            <summary>
            Start to sync process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Stop(System.Nullable{System.TimeSpan})">
            <summary>
            Stops the sync process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.Process(Speedy.Sync.ISyncClient,Speedy.Sync.ISyncClient,System.DateTime,System.DateTime,System.Collections.Generic.IDictionary{System.Guid,System.DateTime})">
            <summary>
            Get changes from one client and apply them to another client.
            </summary>
            <param name="sourceClient"> The source to get changes from. </param>
            <param name="destinationClient"> The destination to apply changes to. </param>
            <param name="since"> The start date and time to get changes for. </param>
            <param name="until"> The end date and time to get changes for. </param>
            <param name="exclude"> The optional collection of items to exclude. </param>
        </member>
        <member name="M:Speedy.Sync.SyncEngine.SortLocalDatabases">
            <summary>
            Will attempt to sort local repositories after sync to order primary key.
            </summary>
        </member>
        <member name="E:Speedy.Sync.SyncEngine.SyncStateChanged">
            <summary>
            Notifies when the sync status changes.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncEngineState">
            <summary>
            Event arguments for the sync engine status change event.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.#ctor">
            <summary>
            Instantiates an instances of the sync engine state.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instances of the sync engine state.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Count">
            <summary>
            Gets or sets the current count of items processed.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.IsRunning">
            <summary>
            Indicates if the sync engine is running.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Message">
            <summary>
            Gets or set the message for the state.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Percent">
            <summary>
            Gets the percentage of progress. Ranging from [0.00] to [100.00].
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Status">
            <summary>
            Gets or sets the current status of the sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEngineState.Total">
            <summary>
            Gets or sets the total count of the items to process.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.OnPropertyChanged(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.ToString">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEngineState.UpdateWith(Speedy.Sync.SyncEngineState,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncEngineStatus">
            <summary>
            Represents the different states of syncing.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Stopped">
            <summary>
            The sync engine is not running.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Starting">
            <summary>
            The sync engine is starting up.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Pulling">
            <summary>
            The stage to pull data from the server and apply to the client.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Pushing">
            <summary>
            This stage is to push changes from the client and apply to the server.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Completed">
            <summary>
            The sync engine was completed successfully.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncEngineStatus.Cancelled">
            <summary>
            The sync engine was cancelled.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncEntity`1">
            <summary>
            Represent an entity that can be synced.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.#ctor">
            <summary>
            Instantiates a sync entity.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.CreatedOn">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.ModifiedOn">
            <inheritdoc />
        </member>
        <member name="P:Speedy.Sync.SyncEntity`1.SyncId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetEntityId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetEntitySyncId">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.IsPropertyExcludedForIncomingSync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.IsPropertyExcludedForOutgoingSync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.IsPropertyExcludedForSyncUpdate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.ToSyncObject">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.Unwrap">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.UpdateLocalSyncIds">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.UpdateWith(Speedy.Sync.ISyncEntity,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.UpdateWith(Speedy.Sync.ISyncEntity,System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.UpdateWith(Speedy.Sync.ISyncEntity,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetDefaultExclusionsForIncomingSync">
            <summary>
            Gets the default exclusions for incoming sync data. Warning: this is called during constructor,
            overrides need to be sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetDefaultExclusionsForOutgoingSync">
            <summary>
            Gets the default exclusions for outgoing sync data. Warning: this is called during constructor,
            overrides need to be sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during sync. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncEntity`1.GetDefaultExclusionsForSyncUpdate">
            <summary>
            Gets the default exclusions for update. Warning: this is called during constructor, overrides need to be
            sure to only return static values as to not cause issues.
            </summary>
            <returns> The values to exclude during update. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncIssue">
            <summary>
            Represents as issue that occurred during sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.Id">
            <summary>
            The ID of the sync item.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.IssueType">
            <summary>
            The type of issue. Example like CannotDelete due to relationship dependencies.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.Message">
            <summary>
            Get the description of the issue.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncIssue.TypeName">
            <summary>
            Gets or sets the type name of the object.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncIssue.Convert(System.String)">
            <summary>
            Convert this sync object to a different sync object
            </summary>
            <returns> The converted sync entity in a sync object format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncIssue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncIssueType">
            <summary>
            Represents the type of sync issue.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.Unknown">
            <summary>
            Could not determine the issue with the syncing object.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.RelationshipConstraint">
            <summary>
            The sync item is having issue due to a relationship. Example another entity depends on the
            entity that is trying to be deleted. Another example is trying to sync an entity with a
            relationship to an entity that has not synced yet.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.ConstraintException">
            <summary>
            The sync item is having issue with a constraint (ex. Unique Index).
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.RepositoryFiltered">
            <summary>
            The item is not being processed because this repository is being filtered.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.SyncEntityFiltered">
            <summary>
            The item is not being processed because the sync entity is being filtered.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.UpdateException">
            <summary>
            The item is not being updated due to an update exception.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncIssueType.ClientException">
            <summary>
            There was an exception with one of the sync clients.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncManager`1">
            <summary>
            Represents a sync manager for syncing two clients.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates a sync manager for syncing two clients.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IncomingConverter">
            <summary>
            Gets an optional incoming converter to convert incoming sync data. The converter is applied to the local sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsCancellationPending">
            <summary>
            Gets a value indicating the running sync is requesting to be cancelled.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsEnabled">
            <summary>
            Gets a value indicating the sync manager is enabled.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.IsRunning">
            <summary>
            Gets a value indicating the running status of the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.OutgoingConverter">
            <summary>
            Gets an optional outgoing converter to convert incoming sync data. The converter is applied to the local sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.ProcessTimeout">
            <summary>
            The timeout to be used when synchronously syncing.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SessionId">
            <summary>
            The session ID of the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.ShowProgress">
            <summary>
            Gets a flag to indicate progress should be shown. Will only be true if sync takes longer than the <seealso cref="P:Speedy.Sync.SyncManager`1.ShowProgressThreshold" />.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.ShowProgressThreshold">
            <summary>
            Gets the value to determine when to trigger <seealso cref="P:Speedy.Sync.SyncManager`1.ShowProgress" />. Defaults to one second.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncOptions">
            <summary>
            The configure sync options for the sync manager.
            </summary>
            <seealso cref="M:Speedy.Sync.SyncManager`1.GetOrAddSyncOptions(`0,System.Action{Speedy.Sync.SyncOptions})" />
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncState">
            <summary>
            Gets the current sync state.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncTimers">
            <summary>
            The configure sync timers for the sync manager.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncManager`1.SyncType">
            <summary>
            The type of the sync.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.CancelSync">
            <summary>
            Cancels the current running sync.
            </summary>
            <remarks>
            See <seealso cref="M:Speedy.Sync.SyncManager`1.WaitForSyncToComplete(System.Nullable{System.TimeSpan})" /> if you want to wait for the sync to complete.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.ResetSyncDates(System.DateTime,System.DateTime)">
            <summary>
            Reset the sync dates on all sync options
            </summary>
            <param name="lastSyncedOnClient"> The last time when synced on the client. </param>
            <param name="lastSyncedOnServer"> The last time when synced on the server. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitForSyncToComplete(System.Nullable{System.TimeSpan})">
            <summary>
            Wait for the sync to complete.
            </summary>
            <param name="timeout"> An optional max amount of time to wait. ProcessTimeout will be used it no timeout provided. </param>
            <returns> True if the sync completed otherwise false if timed out waiting. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitForSyncToStart(System.Nullable{System.TimeSpan})">
            <summary>
            Wait for the sync to start.
            </summary>
            <param name="timeout"> An optional max amount of time to wait. ProcessTimeout will be used it no timeout provided. </param>
            <returns> True if the sync was started otherwise false if timed out waiting. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetOrAddSyncOptions(`0,System.Action{Speedy.Sync.SyncOptions})">
            <summary>
            Gets the default sync options for a sync manager.
            </summary>
            <param name="syncType"> The type of sync these options are for. </param>
            <param name="update"> Optional update action to change provided defaults. </param>
            <returns> The default set of options. </returns>
            <remarks>
            This should only be use in the sync manager constructor.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetOrAddSyncTimer(`0,System.Int32)">
            <summary>
            Gets or adds an average sync timer for a sync type. This will track the average time spent syncing for the provided type.
            </summary>
            <param name="syncType"> The type of sync these options are for. </param>
            <param name="limit"> Optional limit of syncs to average. </param>
            <returns> The timer for tracking the time spent syncing. </returns>
            <remarks>
            This should only be use in the sync manager constructor.
            </remarks>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetSyncClientForClient">
            <summary>
            Gets the sync client to be used in the sync engine client input.
            </summary>
            <returns> The sync client. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetSyncClientForServer">
            <summary>
            Gets the sync client to be used in the sync engine client input.
            </summary>
            <returns> The sync client. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.GetSyncOptions(`0)">
            <summary>
            Gets the sync options by the provide sync type.
            </summary>
            <param name="syncType"> The sync type to get options for. </param>
            <returns> The sync options for the type </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnLogEvent(System.String,System.Diagnostics.Tracing.EventLevel)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="message"> The message to be written. </param>
            <param name="level"> The level of this message. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnSyncCompleted(Speedy.Sync.SyncResults{`0})">
            <summary>
            Indicate the sync is complete.
            </summary>
            <param name="results"> The results of the completed sync. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.OnSyncUpdated(Speedy.Sync.SyncEngineState)">
            <summary>
            Indicate the sync is being updated.
            </summary>
            <param name="state"> The state of the sync. </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.ProcessAsync(`0,System.Action{Speedy.Sync.SyncOptions},System.Nullable{System.TimeSpan},System.Action{Speedy.Sync.SyncResults{`0}})">
            <summary>
            Processes a sync request.
            </summary>
            <param name="syncType"> The type of the sync to process. </param>
            <param name="updateOptions"> The action to possibly update options when the sync starts. </param>
            <param name="waitFor"> Optional timeout to wait for the active sync to complete. </param>
            <param name="postAction">
            An optional action to run after sync is completed but before notification goes out. If the sync cannot
            start then the options will be null as they were never read or set.
            </param>
            <returns> The task for the process. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.WaitOnTask(System.Threading.Tasks.Task{Speedy.Sync.SyncResults{`0}},System.Nullable{System.TimeSpan})">
            <summary>
            Wait on a task to be completed.
            </summary>
            <param name="task"> The task to wait for. </param>
            <param name="timeout">
            A TimeSpan that represents the number of milliseconds to wait, or
            a TimeSpan that represents -1 milliseconds to wait indefinitely.
            </param>
        </member>
        <member name="M:Speedy.Sync.SyncManager`1.RunSync(Speedy.Sync.SyncResults{`0},System.Action{Speedy.Sync.SyncOptions})">
            <summary>
            Run the sync. This should only be called by ProcessAsync.
            </summary>
            <param name="results"> The results for the sync. </param>
            <param name="updateOptions"> Update options before running sync. </param>
        </member>
        <member name="E:Speedy.Sync.SyncManager`1.SyncCompleted">
            <summary>
            Indicates the sync is completed.
            </summary>
        </member>
        <member name="E:Speedy.Sync.SyncManager`1.SyncUpdated">
            <summary>
            Indicates the sync is being updated.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncModel`1">
            <summary>
            Represents a sync model, usually used in a web API model.
            </summary>
            <typeparam name="T"> The type for the key. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiate a sync model.
            </summary>
            <param name="dispatcher"> The dispatcher to update with. </param>
        </member>
        <member name="P:Speedy.Sync.SyncModel`1.Dispatcher">
            <summary>
            Represents a thread dispatcher to help with cross threaded request.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.OnPropertyChanged(System.String)">
            <summary>
            Indicates the property has changed on the bindable object.
            </summary>
            <param name="propertyName"> The name of the property has changed. </param>
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.GetDispatcher">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncModel`1.UpdateDispatcher(Speedy.IDispatcher)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObject">
            <summary>
            Represents an sync object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.Data">
            <summary>
            The serialized data of the object being synced.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.ModifiedOn">
            <summary>
            The date and time of the synced object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.Status">
            <summary>
            Gets or sets the status of this sync object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.SyncId">
            <summary>
            Gets or sets the ID of the sync object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObject.TypeName">
            <summary>
            Gets or sets the type name of the object. The data contains the serialized data.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObject.ToSyncEntity``2">
            <summary>
            Converts the sync object back into it's proper type.
            </summary>
            <returns> The deserialized sync object. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObject.ToSyncEntity">
            <summary>
            Converts the sync object back into it's proper type.
            </summary>
            <returns> The deserialized sync object. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncObjectIncomingConverter`4">
            <summary>
            Represents an object converter.
            </summary>
            <typeparam name="T1"> The sync entity type to convert from. </typeparam>
            <typeparam name="T2"> The primary key of the entity to convert from. </typeparam>
            <typeparam name="T3"> The sync entity type to convert to. </typeparam>
            <typeparam name="T4"> The primary key of the entity to convert to. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.#ctor(System.Action{`0,`2},System.Func{`2,`2,System.Action,Speedy.Sync.SyncObjectStatus,System.Boolean})">
            <summary>
            Instantiates an instance of a converter.
            </summary>
            <param name="convert"> An optional convert method to do some additional conversion. </param>
            <param name="update"> An optional update method to do some additional updating. </param>
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.CanUpdate(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.Convert(Speedy.Sync.SyncObject,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter`4.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObjectOutgoingConverter`4">
            <summary>
            Represents an outgoing object converter.
            </summary>
            <typeparam name="T1"> The sync entity type to convert from. </typeparam>
            <typeparam name="T2"> The primary key of the entity to convert from. </typeparam>
            <typeparam name="T3"> The sync entity type to convert to. </typeparam>
            <typeparam name="T4"> The primary key of the entity to convert to. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.#ctor(System.Action{`0,`2})">
            <summary>
            Instantiates an instance of a converter.
            </summary>
            <param name="convert"> An optional convert method to do some additional conversion. </param>
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.CanUpdate(Speedy.Sync.ISyncEntity)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.Convert(Speedy.Sync.SyncObject,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter`4.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncObjectIncomingConverter">
            <summary>
            Represents an incoming object converter.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectIncomingConverter.#ctor(System.String,System.String)">
            <summary>
            Instantiate an incoming object converter.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncObjectOutgoingConverter">
            <summary>
            Represents an outgoing object converter.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectOutgoingConverter.#ctor(System.String,System.String)">
            <summary>
            Instantiate an outgoing object converter.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncObjectConverter">
            <summary>
            Represents an object converter.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.#ctor(System.String,System.String)">
            <summary>
            Instantiate an object converter.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObjectConverter.DestinationName">
            <summary>
            The destination type name.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncObjectConverter.SourceName">
            <summary>
            The source type name.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanConvert(System.String)">
            <summary>
            Test a sync object name to see if this converter can convert this object.
            </summary>
            <param name="name"> The sync object name to test. </param>
            <returns> True if the sync object can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanConvert(Speedy.Sync.SyncObject)">
            <summary>
            Test a sync object to see if this converter can convert this object.
            </summary>
            <param name="syncObject"> The sync object to test. </param>
            <returns> True if the sync object can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanConvert(Speedy.Sync.SyncIssue)">
            <summary>
            Test a sync issue to see if this converter can convert this object.
            </summary>
            <param name="syncIssue"> The sync issue to test. </param>
            <returns> True if the sync issue can be converted or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.CanUpdate(Speedy.Sync.ISyncEntity)">
            <summary>
            Test a sync entity to see if this converter can update this object.
            </summary>
            <param name="syncEntity"> The sync entity to test. </param>
            <returns> True if the sync entity can be updated or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Convert(Speedy.Sync.SyncObject,System.Boolean,System.Boolean)">
            <summary>
            Convert this sync object to a different sync object
            </summary>
            <param name="syncObject"> The sync object to process. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <returns> The converted sync entity in a sync object format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Convert(Speedy.Sync.SyncIssue)">
            <summary>
            Convert this sync issue to a different sync object
            </summary>
            <param name="syncIssue"> The sync issue to process. </param>
            <returns> The converted sync issue in a sync issue format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Update(Speedy.Sync.ISyncEntity,Speedy.Sync.ISyncEntity,Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <summary>
            Updates this sync object with another object.
            </summary>
            <param name="source"> The entity with the updates. </param>
            <param name="destination"> The destination sync entity to be updated. </param>
            <param name="status"> The status of the update. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> Return true if the entity was updated and should be saved. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Convert``4(Speedy.Sync.SyncObject,System.Action{``0,``2},System.Boolean,System.Boolean)">
            <summary>
            Convert this sync object to a different sync object
            </summary>
            <typeparam name="T1"> The sync entity type to convert from. </typeparam>
            <typeparam name="T2"> The primary key of the entity to convert from. </typeparam>
            <typeparam name="T3"> The sync entity type to convert to. </typeparam>
            <typeparam name="T4"> The primary key of the entity to convert to. </typeparam>
            <param name="syncObject"> The sync object to be converted. </param>
            <param name="convert"> An optional convert method to do some additional conversion. </param>
            <param name="excludePropertiesForIncomingSync"> If true excluded properties will not be set during incoming sync. </param>
            <param name="excludePropertiesForOutgoingSync"> If true excluded properties will not be set during outgoing sync. </param>
            <returns> The converted sync entity in a sync object format. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncObjectConverter.Update``2(``0,``0,System.Func{``0,``0,System.Action,Speedy.Sync.SyncObjectStatus,System.Boolean},Speedy.Sync.SyncObjectStatus,System.Boolean)">
            <summary>
            Updates this sync object with another object.
            </summary>
            <typeparam name="T1"> The sync entity type to process. </typeparam>
            <typeparam name="T2"> The primary key of the sync entity. </typeparam>
            <param name="source"> The entity with the updates. </param>
            <param name="destination"> The destination sync entity to be updated. </param>
            <param name="update"> The function to do the updating. </param>
            <param name="status"> The status of the update. </param>
            <param name="excludePropertiesForSyncUpdate"> If true excluded properties will not be set during update. </param>
            <returns> Return true if the entity was updated and should be saved. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncObjectStatus">
            <summary>
            Represents the sync state of an entity
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncObjectStatus.Added">
            <summary>
            This entity was added.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncObjectStatus.Modified">
            <summary>
            This entity was last modified.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncObjectStatus.Deleted">
            <summary>
            This entity was delete.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncOptions">
            <summary>
            Represents options to be used during a sync.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncOptions.SyncKey">
            <summary>
            The sync key value. This will be included in the default sync options values.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.#ctor">
            <summary>
            Instantiates an instance of the class.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.#ctor(Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the class.
            </summary>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.IncludeIssueDetails">
            <summary>
            Include the detail of the exception in the SyncIssue(s) returned.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.ItemsPerSyncRequest">
            <summary>
            Gets or sets the number of objects to be processed per sync request.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.LastSyncedOnClient">
            <summary>
            Gets or sets the client was last synced on date and time.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.LastSyncedOnServer">
            <summary>
            Gets or sets the server was last synced on date and time.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.PermanentDeletions">
            <summary>
            If true the sync will actually delete entities marked for deletion. Defaults to false where IsDeleted will be marked "true".
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncOptions.Values">
            <summary>
            Additional values for synchronizing.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.AddSyncableFilter(Speedy.Sync.SyncRepositoryFilter)">
            <summary>
            Adds a syncable filter to the options.
            </summary>
            <param name="filter"> The syncable filter to be added. </param>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncOptions.GetSyncType``1(``0)">
            <summary>
            Gets the type of sync these options are for
            </summary>
            <typeparam name="T"> The sync type enumeration type. </typeparam>
            <param name="defaultValue"> The default value to return if the Sync Type value is missing or could not be parsed. </param>
            <returns> </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ResetFilters">
            <summary>
            Resets the syncable filters
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ShouldExcludeRepository(System.Type)">
            <summary>
            Check to see if a repository has been excluded from syncing.
            </summary>
            <param name="type"> The type to check for. </param>
            <returns> True if the type is filter or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ShouldExcludeRepository(System.String)">
            <summary>
            Check to see if a repository has been excluded from syncing.
            </summary>
            <param name="typeAssemblyName"> The type name to check for. Should be in assembly name format. </param>
            <returns> True if the type is filter or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.GetRepositoryLookupFilter(Speedy.ISyncableRepository)">
            <summary>
            Find a filter for the provided repository.
            </summary>
            <param name="repository"> The repository to process. </param>
            <returns> The filter if found or null otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.ShouldFilterEntity(System.String,Speedy.Sync.ISyncEntity)">
            <summary>
            Find the repository filter and check the entity to see if it should be filtered.
            </summary>
            <param name="typeAssemblyName"> The type of the entity in assembly format. </param>
            <param name="entity"> The entity to be tested. </param>
            <returns> True if the entity should be filter or false if otherwise. </returns>
        </member>
        <member name="M:Speedy.Sync.SyncOptions.GetRepositoryLookupFilter(System.String)">
            <summary>
            Find a filter for the provided repository.
            </summary>
            <param name="typeAssemblyName"> The repository type assembly name to process. </param>
            <returns> The filter if found or null otherwise. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncRepositoryFilter`1">
            <summary>
            Represents a repository filter
            </summary>
            <typeparam name="T"> The type for the filter. </typeparam>
        </member>
        <member name="M:Speedy.Sync.SyncRepositoryFilter`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}},System.Boolean)">
            <summary>
            Instantiates a repository filter.
            </summary>
            <param name="outgoingFilter"> The filter for the type for outgoing (GetChanges/GetCorrections). </param>
            <param name="incomingFilter"> The filter for the type for incoming (ApplyChanges/ApplyCorrections). </param>
            <param name="lookupFilter"> The filter for the type for looking up the entity (GetChanges/GetCorrections). </param>
            <param name="skipDeletedItemsOnInitialSync"> The option to skipped SyncEntity.IsDeleted on initial sync. </param>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.IncomingFilter">
            <summary>
            The incoming filter for the type.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.LookupFilter">
            <summary>
            The look up expression for the type
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter`1.OutgoingFilter">
            <summary>
            The outgoing filter for the type.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRepositoryFilter`1.ShouldFilterEntity(`0)">
            <summary>
            A test to validate if an entity should be filtered.
            </summary>
            <param name="entity"> The entity to be tested. </param>
            <returns> True if the entity matches the filter or false if otherwise. </returns>
        </member>
        <member name="T:Speedy.Sync.SyncRepositoryFilter">
            <summary>
            Represents a repository filter
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRepositoryFilter.#ctor(System.String,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Instantiates a repository filter.
            </summary>
            <param name="type"> The type this filter is for. </param>
            <param name="outgoingFilter"> The outgoing filter for the type. </param>
            <param name="incomingFilter"> The incoming filter for the type. </param>
            <param name="lookupFilter"> The lookup filter for the type. </param>
            <param name="skipDeletedItemsOnInitialSync"> The option to skipped SyncEntity.IsDeleted on initial sync. </param>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.IncomingExpression">
            <summary>
            The incoming filter as a generic object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.LookupExpression">
            <summary>
            The lookup filter as a generic object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.OutgoingExpression">
            <summary>
            The outgoing filter as a generic object.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.RepositoryType">
            <summary>
            The type contained in the repository.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRepositoryFilter.SkipDeletedItemsOnInitialSync">
            <summary>
            The option to skipped SyncEntity.IsDeleted on initial sync.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncRequest">
            <summary>
            The details to ask a sync client for changes.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.#ctor">
            <summary>
            Instantiates a sync request.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.#ctor(Speedy.Sync.SyncObject[])">
            <summary>
            Instantiates a sync request.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.#ctor(System.Collections.Generic.IEnumerable{Speedy.Sync.SyncObject})">
            <summary>
            Instantiates a sync request.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRequest.Since">
            <summary>
            The start date and time to get changes for.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncRequest.Until">
            <summary>
            The end date and time to get changes for.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncRequest.Reset">
            <summary>
            Resets the filter back to defaults.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncResults`1">
            <summary>
            The results of the sync.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncResults`1.#ctor">
            <summary>
            Initiates an instances of the sync results.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Client">
            <summary>
            The sync client for the client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Elapsed">
            <summary>
            The elapsed time for the sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Options">
            <summary>
            The sync options.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.Server">
            <summary>
            The sync client for the server.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncCancelled">
            <summary>
            Gets a value indicating if the last sync was started.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncCompleted">
            <summary>
            The sync ran to completion.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncIssues">
            <summary>
            Gets the list of issues that occurred during the last sync.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncStarted">
            <summary>
            Gets a value indicating if the last sync was started.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncStatus">
            <summary>
            The sync result status
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncSuccessful">
            <summary>
            Gets a value indicating if the last sync was successful.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncResults`1.SyncType">
            <summary>
            The Type for the sync.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncResultStatus">
            <summary>
            The status of the sync result.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Unknown">
            <summary>
            No flags have been set.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Successful">
            <summary>
            The sync was completed successfully.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Started">
            <summary>
            The sync was able to start.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Cancelled">
            <summary>
            The sync was cancelled.
            </summary>
        </member>
        <member name="F:Speedy.Sync.SyncResultStatus.Completed">
            <summary>
            The sync was able to run the full sync cycle.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncSession">
            <summary>
            The details of the sync session
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncSession.Id">
            <summary>
            The ID of the session
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncSession.StartedOn">
            <summary>
            The date and time the sync was started on the server.
            </summary>
        </member>
        <member name="T:Speedy.Sync.SyncStatistics">
            <summary>
            Represents the communication statistics for a sync client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.AppliedChanges">
            <summary>
            Represents changes written (incoming) to this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.AppliedCorrections">
            <summary>
            Represents corrections written (incoming) to this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.Changes">
            <summary>
            Represents changes sent (outgoing) from this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.Corrections">
            <summary>
            Represents corrections sent (outgoing) from this client.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.IndividualProcessCount">
            <summary>
            Represents how many times the sync client had to process applied changes individually.
            This means at some point one of the synced items had issues saving so we have to process items
            individually so we can determine which item is having issues.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncStatistics.IsReset">
            <summary>
            Returns true if the statistics are all zero.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncStatistics.DeepClone(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Speedy.Sync.SyncStatistics.Reset">
            <summary>
            Allows resetting of the sync statistics.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncStatistics.UpdateWith(Speedy.Sync.SyncStatistics,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Speedy.Sync.SyncTimer">
            <summary>
            Represents a timer for tracking a sync session.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncTimer.#ctor">
            <summary>
            Instantiates an instance of the class.
            </summary>
        </member>
        <member name="M:Speedy.Sync.SyncTimer.#ctor(System.Int32,Speedy.IDispatcher)">
            <summary>
            Instantiates an instance of the class.
            </summary>
            <param name="limit"> Optional limit of syncs to average. </param>
            <param name="dispatcher"> An optional dispatcher. </param>
        </member>
        <member name="P:Speedy.Sync.SyncTimer.CancelledSyncs">
            <summary>
            Tracks the number of cancelled syncs.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncTimer.FailedSyncs">
            <summary>
            Tracks the number of failed syncs.
            </summary>
        </member>
        <member name="P:Speedy.Sync.SyncTimer.SuccessfulSyncs">
            <summary>
            Tracks the number of successful syncs.
            </summary>
        </member>
        <member name="T:Speedy.TimeService">
            <summary>
            Represents the service to provide time. Allows control for when the system is being tested.
            </summary>
        </member>
        <member name="P:Speedy.TimeService.Now">
            <summary>
            Gets the date time in the format of the current time zone.
            </summary>
        </member>
        <member name="P:Speedy.TimeService.NowProvider">
            <summary>
            Gets or sets the Now time provider. Should be in the correct current time zone format.
            </summary>
        </member>
        <member name="P:Speedy.TimeService.UtcNow">
            <summary>
            Gets the date time in the format of UTC time zone.
            </summary>
        </member>
        <member name="P:Speedy.TimeService.UtcNowProvider">
            <summary>
            Gets or sets the UTC time provider.
            </summary>
        </member>
        <member name="M:Speedy.TimeService.Reset">
            <summary>
            Resets the providers to the default values.
            </summary>
        </member>
    </members>
</doc>
